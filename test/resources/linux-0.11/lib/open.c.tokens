<operator, #>
<identifier, define>
<identifier, __LIBRARY__>
<punctuator, #>
<identifier, include>
<header_name, <unistd.h>>
<punctuator, #>
<identifier, include>
<header_name, <stdarg.h>>
<keyword, int>
<identifier, open>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, flag>
<operator, ,>
<operator, .>
<operator, .>
<operator, .>
<operator, )>
<punctuator, {>
<keyword, register>
<keyword, int>
<identifier, res>
<punctuator, ;>
<identifier, va_list>
<identifier, arg>
<punctuator, ;>
<identifier, va_start>
<operator, (>
<identifier, arg>
<operator, ,>
<identifier, flag>
<operator, )>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "int $0x80">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, __NR_open>
<operator, )>
<operator, ,>
<string_literal, "b">
<operator, (>
<identifier, filename>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, flag>
<operator, )>
<operator, ,>
<string_literal, "d">
<operator, (>
<identifier, va_arg>
<operator, (>
<identifier, arg>
<operator, ,>
<keyword, int>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, res>
<operator, >>
<operator, =>
<integer_constant, 0>
<operator, )>
<keyword, return>
<identifier, res>
<punctuator, ;>
<identifier, errno>
<operator, =>
<operator, ->
<identifier, res>
<punctuator, ;>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
