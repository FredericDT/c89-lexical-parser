<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/mm.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<keyword, struct>
<identifier, bucket_desc>
<punctuator, {>
<keyword, void>
<operator, *>
<identifier, page>
<punctuator, ;>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, next>
<punctuator, ;>
<keyword, void>
<operator, *>
<identifier, freeptr>
<punctuator, ;>
<keyword, unsigned>
<keyword, short>
<identifier, refcnt>
<punctuator, ;>
<keyword, unsigned>
<keyword, short>
<identifier, bucket_size>
<punctuator, ;>
<punctuator, }>
<punctuator, ;>
<keyword, struct>
<identifier, _bucket_dir>
<punctuator, {>
<keyword, int>
<identifier, size>
<punctuator, ;>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, chain>
<punctuator, ;>
<punctuator, }>
<punctuator, ;>
<keyword, struct>
<identifier, _bucket_dir>
<identifier, bucket_dir>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<integer_constant, 16>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 32>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 64>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 128>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 256>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 512>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 1024>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 2048>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 4096>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, }>
<punctuator, }>
<punctuator, ;>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, free_bucket_desc>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, init_bucket_desc>
<operator, (>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, bdesc>
<operator, ,>
<operator, *>
<identifier, first>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, first>
<operator, =>
<identifier, bdesc>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<operator, )>
<identifier, get_free_page>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bdesc>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Out of memory in init_bucket_desc()">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<identifier, PAGE_SIZE>
<operator, />
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, bucket_desc>
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, >>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, -->
<operator, )>
<punctuator, {>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, bdesc>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<identifier, bdesc>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, free_bucket_desc>
<punctuator, ;>
<identifier, free_bucket_desc>
<operator, =>
<identifier, first>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<operator, *>
<identifier, malloc>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, len>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, _bucket_dir>
<operator, *>
<identifier, bdir>
<punctuator, ;>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, bdesc>
<punctuator, ;>
<keyword, void>
<operator, *>
<identifier, retval>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, bdir>
<operator, =>
<identifier, bucket_dir>
<punctuator, ;>
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<identifier, bdir>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, bdir>
<operator, ->>
<identifier, size>
<operator, >>
<operator, =>
<identifier, len>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bdir>
<operator, ->>
<identifier, size>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "malloc called with impossibly large argument (%d)\n">
<operator, ,>
<identifier, len>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "malloc: bad arg">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, bdesc>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<punctuator, ;>
<identifier, bdesc>
<punctuator, ;>
<identifier, bdesc>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, )>
<keyword, if>
<operator, (>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bdesc>
<operator, )>
<punctuator, {>
<keyword, char>
<operator, *>
<identifier, cp>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, free_bucket_desc>
<operator, )>
<identifier, init_bucket_desc>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, bdesc>
<operator, =>
<identifier, free_bucket_desc>
<punctuator, ;>
<identifier, free_bucket_desc>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, refcnt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, bucket_size>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, page>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<identifier, cp>
<operator, =>
<identifier, get_free_page>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, cp>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Out of memory in kernel malloc()">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<identifier, PAGE_SIZE>
<operator, />
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<identifier, i>
<operator, >>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, -->
<operator, )>
<punctuator, {>
<operator, *>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, *>
<operator, )>
<identifier, cp>
<operator, )>
<operator, =>
<identifier, cp>
<operator, +>
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<identifier, cp>
<operator, +>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<punctuator, }>
<operator, *>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, *>
<operator, )>
<identifier, cp>
<operator, )>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<punctuator, ;>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<operator, =>
<identifier, bdesc>
<punctuator, ;>
<punctuator, }>
<identifier, retval>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<operator, =>
<operator, *>
<operator, (>
<operator, (>
<keyword, void>
<operator, *>
<operator, *>
<operator, )>
<identifier, retval>
<operator, )>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, refcnt>
<operator, ++>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, retval>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, free_s>
<operator, (>
<keyword, void>
<operator, *>
<identifier, obj>
<operator, ,>
<keyword, int>
<identifier, size>
<operator, )>
<punctuator, {>
<keyword, void>
<operator, *>
<identifier, page>
<punctuator, ;>
<keyword, struct>
<identifier, _bucket_dir>
<operator, *>
<identifier, bdir>
<punctuator, ;>
<keyword, struct>
<identifier, bucket_desc>
<operator, *>
<identifier, bdesc>
<operator, ,>
<operator, *>
<identifier, prev>
<punctuator, ;>
<identifier, page>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, obj>
<operator, &>
<integer_constant, 0xfffff000>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, bdir>
<operator, =>
<identifier, bucket_dir>
<punctuator, ;>
<identifier, bdir>
<operator, ->>
<identifier, size>
<punctuator, ;>
<identifier, bdir>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, prev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bdir>
<operator, ->>
<identifier, size>
<operator, <>
<identifier, size>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, bdesc>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<punctuator, ;>
<identifier, bdesc>
<punctuator, ;>
<identifier, bdesc>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bdesc>
<operator, ->>
<identifier, page>
<operator, ==>
<identifier, page>
<operator, )>
<keyword, goto>
<identifier, found>
<punctuator, ;>
<identifier, prev>
<operator, =>
<identifier, bdesc>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, panic>
<operator, (>
<string_literal, "Bad address passed to kernel free_s()">
<operator, )>
<punctuator, ;>
<identifier, found>
<operator, :>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<operator, *>
<operator, (>
<operator, (>
<keyword, void>
<operator, *>
<operator, *>
<operator, )>
<identifier, obj>
<operator, )>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, freeptr>
<operator, =>
<identifier, obj>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, refcnt>
<operator, -->
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bdesc>
<operator, ->>
<identifier, refcnt>
<operator, ==>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<identifier, prev>
<operator, &>
<operator, &>
<operator, (>
<identifier, prev>
<operator, ->>
<identifier, next>
<operator, !>
<operator, =>
<identifier, bdesc>
<operator, )>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<operator, !>
<identifier, prev>
<operator, &>
<operator, &>
<operator, (>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<operator, !>
<operator, =>
<identifier, bdesc>
<operator, )>
<operator, )>
<operator, )>
<keyword, for>
<operator, (>
<identifier, prev>
<operator, =>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<punctuator, ;>
<identifier, prev>
<punctuator, ;>
<identifier, prev>
<operator, =>
<identifier, prev>
<operator, ->>
<identifier, next>
<operator, )>
<keyword, if>
<operator, (>
<identifier, prev>
<operator, ->>
<identifier, next>
<operator, ==>
<identifier, bdesc>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, prev>
<operator, )>
<identifier, prev>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<punctuator, ;>
<keyword, else>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<operator, !>
<operator, =>
<identifier, bdesc>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "malloc bucket chains corrupted">
<operator, )>
<punctuator, ;>
<identifier, bdir>
<operator, ->>
<identifier, chain>
<operator, =>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<punctuator, ;>
<punctuator, }>
<identifier, free_page>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, bdesc>
<operator, ->>
<identifier, page>
<operator, )>
<punctuator, ;>
<identifier, bdesc>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, free_bucket_desc>
<punctuator, ;>
<identifier, free_bucket_desc>
<operator, =>
<identifier, bdesc>
<punctuator, ;>
<punctuator, }>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
