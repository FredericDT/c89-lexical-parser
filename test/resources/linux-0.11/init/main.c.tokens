<operator, #>
<identifier, define>
<identifier, __LIBRARY__>
<punctuator, #>
<identifier, include>
<header_name, <unistd.h>>
<punctuator, #>
<identifier, include>
<header_name, <time.h>>
<keyword, static>
<identifier, inline>
<identifier, _syscall0>
<operator, (>
<keyword, int>
<operator, ,>
<identifier, fork>
<operator, )>
<keyword, static>
<identifier, inline>
<identifier, _syscall0>
<operator, (>
<keyword, int>
<operator, ,>
<identifier, pause>
<operator, )>
<keyword, static>
<identifier, inline>
<identifier, _syscall1>
<operator, (>
<keyword, int>
<operator, ,>
<identifier, setup>
<operator, ,>
<keyword, void>
<operator, *>
<operator, ,>
<identifier, BIOS>
<operator, )>
<keyword, static>
<identifier, inline>
<identifier, _syscall0>
<operator, (>
<keyword, int>
<operator, ,>
<identifier, sync>
<operator, )>
<punctuator, #>
<identifier, include>
<header_name, <linux/tty.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/head.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<punctuator, #>
<identifier, include>
<header_name, <stddef.h>>
<punctuator, #>
<identifier, include>
<header_name, <stdarg.h>>
<punctuator, #>
<identifier, include>
<header_name, <unistd.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/types.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<keyword, static>
<keyword, char>
<identifier, printbuf>
<operator, [>
<integer_constant, 1024>
<operator, ]>
<punctuator, ;>
<keyword, extern>
<keyword, int>
<identifier, vsprintf>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, blk_dev_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, chr_dev_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, hd_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, floppy_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, mem_init>
<operator, (>
<keyword, long>
<identifier, start>
<operator, ,>
<keyword, long>
<identifier, end>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, long>
<identifier, rd_init>
<operator, (>
<keyword, long>
<identifier, mem_start>
<operator, ,>
<keyword, int>
<identifier, length>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, long>
<identifier, kernel_mktime>
<operator, (>
<keyword, struct>
<identifier, tm>
<operator, *>
<identifier, tm>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, long>
<identifier, startup_time>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, EXT_MEM_K>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x90002>
<operator, )>
<operator, #>
<identifier, define>
<identifier, DRIVE_INFO>
<operator, (>
<operator, *>
<operator, (>
<keyword, struct>
<identifier, drive_info>
<operator, *>
<operator, )>
<integer_constant, 0x90080>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_ROOT_DEV>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x901FC>
<operator, )>
<operator, #>
<identifier, define>
<identifier, CMOS_READ>
<operator, (>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<identifier, outb_p>
<operator, (>
<integer_constant, 0x80>
<operator, |>
<identifier, addr>
<operator, ,>
<integer_constant, 0x70>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x71>
<operator, )>
<punctuator, ;>
<unknown, \>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, val>
<operator, )>
<operator, (>
<operator, (>
<identifier, val>
<operator, )>
<operator, =>
<operator, (>
<operator, (>
<identifier, val>
<operator, )>
<operator, &>
<integer_constant, 15>
<operator, )>
<operator, +>
<operator, (>
<operator, (>
<identifier, val>
<operator, )>
<operator, >>>
<integer_constant, 4>
<operator, )>
<operator, *>
<integer_constant, 10>
<operator, )>
<keyword, static>
<keyword, void>
<identifier, time_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, tm>
<identifier, time>
<punctuator, ;>
<keyword, do>
<punctuator, {>
<identifier, time>
<operator, .>
<identifier, tm_sec>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_min>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_hour>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 4>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_mday>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 7>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_mon>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 8>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_year>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 9>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, while>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_sec>
<operator, !>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_sec>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_min>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_hour>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_mday>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_mon>
<operator, )>
<punctuator, ;>
<identifier, BCD_TO_BIN>
<operator, (>
<identifier, time>
<operator, .>
<identifier, tm_year>
<operator, )>
<punctuator, ;>
<identifier, time>
<operator, .>
<identifier, tm_mon>
<operator, -->
<punctuator, ;>
<identifier, startup_time>
<operator, =>
<identifier, kernel_mktime>
<operator, (>
<operator, &>
<identifier, time>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, long>
<identifier, memory_end>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, long>
<identifier, buffer_memory_end>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, long>
<identifier, main_memory_start>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, drive_info>
<punctuator, {>
<keyword, char>
<identifier, dummy>
<operator, [>
<integer_constant, 32>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<identifier, drive_info>
<punctuator, ;>
<keyword, void>
<identifier, main>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, ROOT_DEV>
<operator, =>
<identifier, ORIG_ROOT_DEV>
<punctuator, ;>
<identifier, drive_info>
<operator, =>
<identifier, DRIVE_INFO>
<punctuator, ;>
<identifier, memory_end>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<integer_constant, 20>
<operator, )>
<operator, +>
<operator, (>
<identifier, EXT_MEM_K>
<operator, <<>
<integer_constant, 10>
<operator, )>
<punctuator, ;>
<identifier, memory_end>
<operator, &>
<operator, =>
<integer_constant, 0xfffff000>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, memory_end>
<operator, >>
<integer_constant, 16>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<operator, )>
<identifier, memory_end>
<operator, =>
<integer_constant, 16>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, memory_end>
<operator, >>
<integer_constant, 12>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<operator, )>
<identifier, buffer_memory_end>
<operator, =>
<integer_constant, 4>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, memory_end>
<operator, >>
<integer_constant, 6>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<operator, )>
<identifier, buffer_memory_end>
<operator, =>
<integer_constant, 2>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<punctuator, ;>
<keyword, else>
<identifier, buffer_memory_end>
<operator, =>
<integer_constant, 1>
<operator, *>
<integer_constant, 1024>
<operator, *>
<integer_constant, 1024>
<punctuator, ;>
<identifier, main_memory_start>
<operator, =>
<identifier, buffer_memory_end>
<punctuator, ;>
<operator, #>
<identifier, ifdef>
<identifier, RAMDISK>
<identifier, main_memory_start>
<operator, +>
<operator, =>
<identifier, rd_init>
<operator, (>
<identifier, main_memory_start>
<operator, ,>
<identifier, RAMDISK>
<operator, *>
<integer_constant, 1024>
<operator, )>
<punctuator, ;>
<operator, #>
<identifier, endif>
<identifier, mem_init>
<operator, (>
<identifier, main_memory_start>
<operator, ,>
<identifier, memory_end>
<operator, )>
<punctuator, ;>
<identifier, trap_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, blk_dev_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, chr_dev_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, tty_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, time_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, sched_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, buffer_init>
<operator, (>
<identifier, buffer_memory_end>
<operator, )>
<punctuator, ;>
<identifier, hd_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, floppy_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, move_to_user_mode>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, fork>
<operator, (>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, init>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<punctuator, ;>
<punctuator, ;>
<operator, )>
<identifier, pause>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, printf>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, fmt>
<operator, ,>
<operator, .>
<operator, .>
<operator, .>
<operator, )>
<punctuator, {>
<identifier, va_list>
<identifier, args>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, va_start>
<operator, (>
<identifier, args>
<operator, ,>
<identifier, fmt>
<operator, )>
<punctuator, ;>
<identifier, write>
<operator, (>
<integer_constant, 1>
<operator, ,>
<identifier, printbuf>
<operator, ,>
<identifier, i>
<operator, =>
<identifier, vsprintf>
<operator, (>
<identifier, printbuf>
<operator, ,>
<identifier, fmt>
<operator, ,>
<identifier, args>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, va_end>
<operator, (>
<identifier, args>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, char>
<operator, *>
<identifier, argv_rc>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<string_literal, "/bin/sh">
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, char>
<operator, *>
<identifier, envp_rc>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<string_literal, "HOME=/">
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, char>
<operator, *>
<identifier, argv>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<string_literal, "-/bin/sh">
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, char>
<operator, *>
<identifier, envp>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<string_literal, "HOME=/usr/root">
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, ;>
<keyword, void>
<identifier, init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, pid>
<operator, ,>
<identifier, i>
<punctuator, ;>
<identifier, setup>
<operator, (>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<operator, &>
<identifier, drive_info>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, open>
<operator, (>
<string_literal, "/dev/tty0">
<operator, ,>
<identifier, O_RDWR>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, dup>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, dup>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, printf>
<operator, (>
<string_literal, "%d buffers = %d bytes buffer space\n\r">
<operator, ,>
<identifier, NR_BUFFERS>
<operator, ,>
<identifier, NR_BUFFERS>
<operator, *>
<identifier, BLOCK_SIZE>
<operator, )>
<punctuator, ;>
<identifier, printf>
<operator, (>
<string_literal, "Free mem: %d bytes\n\r">
<operator, ,>
<identifier, memory_end>
<operator, ->
<identifier, main_memory_start>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, pid>
<operator, =>
<identifier, fork>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, close>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, open>
<operator, (>
<string_literal, "/etc/rc">
<operator, ,>
<identifier, O_RDONLY>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<identifier, _exit>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, execve>
<operator, (>
<string_literal, "/bin/sh">
<operator, ,>
<identifier, argv_rc>
<operator, ,>
<identifier, envp_rc>
<operator, )>
<punctuator, ;>
<identifier, _exit>
<operator, (>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, >>
<integer_constant, 0>
<operator, )>
<keyword, while>
<operator, (>
<identifier, pid>
<operator, !>
<operator, =>
<identifier, wait>
<operator, (>
<operator, &>
<identifier, i>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<identifier, pid>
<operator, =>
<identifier, fork>
<operator, (>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, printf>
<operator, (>
<string_literal, "Fork failed in init\r\n">
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, pid>
<operator, )>
<punctuator, {>
<identifier, close>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, close>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, close>
<operator, (>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<identifier, setsid>
<operator, (>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, open>
<operator, (>
<string_literal, "/dev/tty0">
<operator, ,>
<identifier, O_RDWR>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, dup>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, dup>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, _exit>
<operator, (>
<identifier, execve>
<operator, (>
<string_literal, "/bin/sh">
<operator, ,>
<identifier, argv>
<operator, ,>
<identifier, envp>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, while>
<operator, (>
<integer_constant, 1>
<operator, )>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, ==>
<identifier, wait>
<operator, (>
<operator, &>
<identifier, i>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<identifier, printf>
<operator, (>
<string_literal, "\n\rchild %d died with code %04x\n\r">
<operator, ,>
<identifier, pid>
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<identifier, sync>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, _exit>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
