<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <signal.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/wait.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/tty.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<keyword, int>
<identifier, sys_pause>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, int>
<identifier, sys_close>
<operator, (>
<keyword, int>
<identifier, fd>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, release>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ==>
<identifier, p>
<operator, )>
<punctuator, {>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, free_page>
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<identifier, p>
<operator, )>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, panic>
<operator, (>
<string_literal, "trying to release non-existent task">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, int>
<identifier, send_sig>
<operator, (>
<keyword, long>
<identifier, sig>
<operator, ,>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, p>
<operator, ,>
<keyword, int>
<identifier, priv>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, |>
<operator, |>
<identifier, sig>
<operator, <>
<integer_constant, 1>
<operator, |>
<operator, |>
<identifier, sig>
<operator, >>
<integer_constant, 32>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, priv>
<operator, |>
<operator, |>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, ==>
<identifier, p>
<operator, ->>
<identifier, euid>
<operator, )>
<operator, |>
<operator, |>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<identifier, p>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, sig>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, kill_session>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<operator, =>
<identifier, NR_TASKS>
<operator, +>
<identifier, task>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, session>
<operator, ==>
<identifier, current>
<operator, ->>
<identifier, session>
<operator, )>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGHUP>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, int>
<identifier, sys_kill>
<operator, (>
<keyword, int>
<identifier, pid>
<operator, ,>
<keyword, int>
<identifier, sig>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<operator, =>
<identifier, NR_TASKS>
<operator, +>
<identifier, task>
<punctuator, ;>
<keyword, int>
<identifier, err>
<operator, ,>
<identifier, retval>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, pid>
<operator, )>
<keyword, while>
<operator, (>
<operator, -->
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pgrp>
<operator, ==>
<identifier, current>
<operator, ->>
<identifier, pid>
<operator, )>
<keyword, if>
<operator, (>
<identifier, err>
<operator, =>
<identifier, send_sig>
<operator, (>
<identifier, sig>
<operator, ,>
<operator, *>
<identifier, p>
<operator, ,>
<integer_constant, 1>
<operator, )>
<operator, )>
<identifier, retval>
<operator, =>
<identifier, err>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, >>
<integer_constant, 0>
<operator, )>
<keyword, while>
<operator, (>
<operator, -->
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pid>
<operator, ==>
<identifier, pid>
<operator, )>
<keyword, if>
<operator, (>
<identifier, err>
<operator, =>
<identifier, send_sig>
<operator, (>
<identifier, sig>
<operator, ,>
<operator, *>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<identifier, retval>
<operator, =>
<identifier, err>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, ==>
<operator, ->
<integer_constant, 1>
<operator, )>
<keyword, while>
<operator, (>
<operator, -->
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<operator, )>
<keyword, if>
<operator, (>
<identifier, err>
<operator, =>
<identifier, send_sig>
<operator, (>
<identifier, sig>
<operator, ,>
<operator, *>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<identifier, retval>
<operator, =>
<identifier, err>
<punctuator, ;>
<keyword, else>
<keyword, while>
<operator, (>
<operator, -->
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<operator, )>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pgrp>
<operator, ==>
<operator, ->
<identifier, pid>
<operator, )>
<keyword, if>
<operator, (>
<identifier, err>
<operator, =>
<identifier, send_sig>
<operator, (>
<identifier, sig>
<operator, ,>
<operator, *>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<identifier, retval>
<operator, =>
<identifier, err>
<punctuator, ;>
<keyword, return>
<identifier, retval>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, tell_father>
<operator, (>
<keyword, int>
<identifier, pid>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, )>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, pid>
<operator, !>
<operator, =>
<identifier, pid>
<operator, )>
<keyword, continue>
<punctuator, ;>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGCHLD>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, printk>
<operator, (>
<string_literal, "BAD BAD - no father found\n\r">
<operator, )>
<punctuator, ;>
<identifier, release>
<operator, (>
<identifier, current>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, do_exit>
<operator, (>
<keyword, long>
<identifier, code>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, free_page_tables>
<operator, (>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<operator, ,>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x0f>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, free_page_tables>
<operator, (>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<operator, ,>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x17>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, &>
<operator, &>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, father>
<operator, ==>
<identifier, current>
<operator, ->>
<identifier, pid>
<operator, )>
<punctuator, {>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, father>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, state>
<operator, ==>
<identifier, TASK_ZOMBIE>
<operator, )>
<operator, (>
<keyword, void>
<operator, )>
<identifier, send_sig>
<operator, (>
<identifier, SIGCHLD>
<operator, ,>
<identifier, task>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_OPEN>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, sys_close>
<operator, (>
<identifier, i>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, leader>
<operator, &>
<operator, &>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, >>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, tty_table>
<operator, [>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, ]>
<operator, .>
<identifier, pgrp>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, ==>
<identifier, current>
<operator, )>
<identifier, last_task_used_math>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, leader>
<operator, )>
<identifier, kill_session>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_ZOMBIE>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, exit_code>
<operator, =>
<identifier, code>
<punctuator, ;>
<identifier, tell_father>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, father>
<operator, )>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_exit>
<operator, (>
<keyword, int>
<identifier, error_code>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, do_exit>
<operator, (>
<operator, (>
<identifier, error_code>
<operator, &>
<integer_constant, 0xff>
<operator, )>
<operator, <<>
<integer_constant, 8>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_waitpid>
<operator, (>
<identifier, pid_t>
<identifier, pid>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, stat_addr>
<operator, ,>
<keyword, int>
<identifier, options>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, flag>
<operator, ,>
<identifier, code>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<punctuator, ;>
<identifier, verify_area>
<operator, (>
<identifier, stat_addr>
<operator, ,>
<integer_constant, 4>
<operator, )>
<punctuator, ;>
<identifier, repeat>
<operator, :>
<identifier, flag>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, p>
<operator, =>
<operator, &>
<identifier, LAST_TASK>
<punctuator, ;>
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<punctuator, ;>
<operator, -->
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, *>
<identifier, p>
<operator, |>
<operator, |>
<operator, *>
<identifier, p>
<operator, ==>
<identifier, current>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, father>
<operator, !>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, pid>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pid>
<operator, !>
<operator, =>
<identifier, pid>
<operator, )>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, pid>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pgrp>
<operator, !>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, pgrp>
<operator, )>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, pid>
<operator, !>
<operator, =>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pgrp>
<operator, !>
<operator, =>
<operator, ->
<identifier, pid>
<operator, )>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, switch>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, state>
<operator, )>
<punctuator, {>
<keyword, case>
<identifier, TASK_STOPPED>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, options>
<operator, &>
<identifier, WUNTRACED>
<operator, )>
<operator, )>
<keyword, continue>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<integer_constant, 0x7f>
<operator, ,>
<identifier, stat_addr>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pid>
<punctuator, ;>
<keyword, case>
<identifier, TASK_ZOMBIE>
<operator, :>
<identifier, current>
<operator, ->>
<identifier, cutime>
<operator, +>
<operator, =>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, utime>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, cstime>
<operator, +>
<operator, =>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, stime>
<punctuator, ;>
<identifier, flag>
<operator, =>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, pid>
<punctuator, ;>
<identifier, code>
<operator, =>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, exit_code>
<punctuator, ;>
<identifier, release>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<identifier, code>
<operator, ,>
<identifier, stat_addr>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, flag>
<punctuator, ;>
<keyword, default>
<operator, :>
<identifier, flag>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, options>
<operator, &>
<identifier, WNOHANG>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_INTERRUPTIBLE>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGCHLD>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, )>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, else>
<keyword, return>
<operator, ->
<identifier, EINTR>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<operator, ->
<identifier, ECHILD>
<punctuator, ;>
<punctuator, }>
