<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<keyword, extern>
<keyword, void>
<identifier, write_verify>
<operator, (>
<keyword, unsigned>
<keyword, long>
<identifier, address>
<operator, )>
<punctuator, ;>
<keyword, long>
<identifier, last_pid>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, void>
<identifier, verify_area>
<operator, (>
<keyword, void>
<operator, *>
<identifier, addr>
<operator, ,>
<keyword, int>
<identifier, size>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, long>
<identifier, start>
<punctuator, ;>
<identifier, start>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, addr>
<punctuator, ;>
<identifier, size>
<operator, +>
<operator, =>
<identifier, start>
<operator, &>
<integer_constant, 0xfff>
<punctuator, ;>
<identifier, start>
<operator, &>
<operator, =>
<integer_constant, 0xfffff000>
<punctuator, ;>
<identifier, start>
<operator, +>
<operator, =>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, size>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, size>
<operator, ->
<operator, =>
<integer_constant, 4096>
<punctuator, ;>
<identifier, write_verify>
<operator, (>
<identifier, start>
<operator, )>
<punctuator, ;>
<identifier, start>
<operator, +>
<operator, =>
<integer_constant, 4096>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, int>
<identifier, copy_mem>
<operator, (>
<keyword, int>
<identifier, nr>
<operator, ,>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, long>
<identifier, old_data_base>
<operator, ,>
<identifier, new_data_base>
<operator, ,>
<identifier, data_limit>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<identifier, old_code_base>
<operator, ,>
<identifier, new_code_base>
<operator, ,>
<identifier, code_limit>
<punctuator, ;>
<identifier, code_limit>
<operator, =>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x0f>
<operator, )>
<punctuator, ;>
<identifier, data_limit>
<operator, =>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x17>
<operator, )>
<punctuator, ;>
<identifier, old_code_base>
<operator, =>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, old_data_base>
<operator, =>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, old_data_base>
<operator, !>
<operator, =>
<identifier, old_code_base>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "We don't support separate I&D">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, data_limit>
<operator, <>
<identifier, code_limit>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Bad data_limit">
<operator, )>
<punctuator, ;>
<identifier, new_data_base>
<operator, =>
<identifier, new_code_base>
<operator, =>
<identifier, nr>
<operator, *>
<integer_constant, 0x4000000>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, start_code>
<operator, =>
<identifier, new_code_base>
<punctuator, ;>
<identifier, set_base>
<operator, (>
<identifier, p>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, new_code_base>
<operator, )>
<punctuator, ;>
<identifier, set_base>
<operator, (>
<identifier, p>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<identifier, new_data_base>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, copy_page_tables>
<operator, (>
<identifier, old_data_base>
<operator, ,>
<identifier, new_data_base>
<operator, ,>
<identifier, data_limit>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, free_page_tables>
<operator, (>
<identifier, new_data_base>
<operator, ,>
<identifier, data_limit>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOMEM>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, copy_process>
<operator, (>
<keyword, int>
<identifier, nr>
<operator, ,>
<keyword, long>
<identifier, ebp>
<operator, ,>
<keyword, long>
<identifier, edi>
<operator, ,>
<keyword, long>
<identifier, esi>
<operator, ,>
<keyword, long>
<identifier, gs>
<operator, ,>
<keyword, long>
<identifier, none>
<operator, ,>
<keyword, long>
<identifier, ebx>
<operator, ,>
<keyword, long>
<identifier, ecx>
<operator, ,>
<keyword, long>
<identifier, edx>
<operator, ,>
<keyword, long>
<identifier, fs>
<operator, ,>
<keyword, long>
<identifier, es>
<operator, ,>
<keyword, long>
<identifier, ds>
<operator, ,>
<keyword, long>
<identifier, eip>
<operator, ,>
<keyword, long>
<identifier, cs>
<operator, ,>
<keyword, long>
<identifier, eflags>
<operator, ,>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, ss>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, f>
<punctuator, ;>
<identifier, p>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, )>
<identifier, get_free_page>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EAGAIN>
<punctuator, ;>
<identifier, task>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<identifier, p>
<punctuator, ;>
<operator, *>
<identifier, p>
<operator, =>
<operator, *>
<identifier, current>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_UNINTERRUPTIBLE>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, pid>
<operator, =>
<identifier, last_pid>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, father>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, pid>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, counter>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, priority>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, signal>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, alarm>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, leader>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, utime>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, stime>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, cutime>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, cstime>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, start_time>
<operator, =>
<identifier, jiffies>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, back_link>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, esp0>
<operator, =>
<identifier, PAGE_SIZE>
<operator, +>
<operator, (>
<keyword, long>
<operator, )>
<identifier, p>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ss0>
<operator, =>
<integer_constant, 0x10>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, eip>
<operator, =>
<identifier, eip>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, eflags>
<operator, =>
<identifier, eflags>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, eax>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ecx>
<operator, =>
<identifier, ecx>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, edx>
<operator, =>
<identifier, edx>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ebx>
<operator, =>
<identifier, ebx>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, esp>
<operator, =>
<identifier, esp>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ebp>
<operator, =>
<identifier, ebp>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, esi>
<operator, =>
<identifier, esi>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, edi>
<operator, =>
<identifier, edi>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, es>
<operator, =>
<identifier, es>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, cs>
<operator, =>
<identifier, cs>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ss>
<operator, =>
<identifier, ss>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ds>
<operator, =>
<identifier, ds>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, fs>
<operator, =>
<identifier, fs>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, gs>
<operator, =>
<identifier, gs>
<operator, &>
<integer_constant, 0xffff>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, ldt>
<operator, =>
<identifier, _LDT>
<operator, (>
<identifier, nr>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, trace_bitmap>
<operator, =>
<integer_constant, 0x80000000>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, ==>
<identifier, current>
<operator, )>
<identifier, __asm__>
<operator, (>
<string_literal, "clts ; fnsave %0">
<operator, :>
<operator, :>
<string_literal, "m">
<operator, (>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, i387>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, copy_mem>
<operator, (>
<identifier, nr>
<operator, ,>
<identifier, p>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, task>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, free_page>
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<identifier, p>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EAGAIN>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_OPEN>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, f>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, f>
<operator, ->>
<identifier, f_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<identifier, set_tss_desc>
<operator, (>
<identifier, gdt>
<operator, +>
<operator, (>
<identifier, nr>
<operator, <<>
<integer_constant, 1>
<operator, )>
<operator, +>
<identifier, FIRST_TSS_ENTRY>
<operator, ,>
<operator, &>
<operator, (>
<identifier, p>
<operator, ->>
<identifier, tss>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, set_ldt_desc>
<operator, (>
<identifier, gdt>
<operator, +>
<operator, (>
<identifier, nr>
<operator, <<>
<integer_constant, 1>
<operator, )>
<operator, +>
<identifier, FIRST_LDT_ENTRY>
<operator, ,>
<operator, &>
<operator, (>
<identifier, p>
<operator, ->>
<identifier, ldt>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_RUNNING>
<punctuator, ;>
<keyword, return>
<identifier, last_pid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, find_empty_process>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, repeat>
<operator, :>
<keyword, if>
<operator, (>
<operator, (>
<operator, ++>
<identifier, last_pid>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, last_pid>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, &>
<operator, &>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, pid>
<operator, ==>
<identifier, last_pid>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<keyword, return>
<identifier, i>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EAGAIN>
<punctuator, ;>
<punctuator, }>
