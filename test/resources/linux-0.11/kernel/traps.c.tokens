<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/head.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<operator, #>
<identifier, define>
<identifier, get_seg_byte>
<operator, (>
<identifier, seg>
<operator, ,>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, char>
<identifier, __res>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "push %%fs;mov %%ax,%%fs;movb %%fs:%2,%%al;pop %%fs">
<unknown, \>
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, seg>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, get_seg_long>
<operator, (>
<identifier, seg>
<operator, ,>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, unsigned>
<keyword, long>
<identifier, __res>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "push %%fs;mov %%ax,%%fs;movl %%fs:%2,%%eax;pop %%fs">
<unknown, \>
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, seg>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, _fs>
<operator, (>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, unsigned>
<keyword, short>
<identifier, __res>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "mov %%fs,%%ax">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<keyword, int>
<identifier, do_exit>
<operator, (>
<keyword, long>
<identifier, code>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, page_exception>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, divide_error>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, debug>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, nmi>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, int3>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, overflow>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, bounds>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, invalid_op>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, device_not_available>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, double_fault>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, coprocessor_segment_overrun>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, invalid_TSS>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, segment_not_present>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, stack_segment>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, general_protection>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, page_fault>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, coprocessor_error>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, reserved>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, parallel_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, irq13>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, die>
<operator, (>
<keyword, char>
<operator, *>
<identifier, str>
<operator, ,>
<keyword, long>
<identifier, esp_ptr>
<operator, ,>
<keyword, long>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, long>
<operator, *>
<identifier, esp>
<operator, =>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, esp_ptr>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%s: %04x\n\r">
<operator, ,>
<identifier, str>
<operator, ,>
<identifier, nr>
<operator, &>
<integer_constant, 0xffff>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "EIP:\t%04x:%p\nEFLAGS:\t%p\nESP:\t%04x:%p\n">
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "fs: %04x\n">
<operator, ,>
<identifier, _fs>
<operator, (>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "base: %p, limit: %p\n">
<operator, ,>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<operator, ,>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x17>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, esp>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, ==>
<integer_constant, 0x17>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Stack: ">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 4>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "%p ">
<operator, ,>
<identifier, get_seg_long>
<operator, (>
<integer_constant, 0x17>
<operator, ,>
<identifier, i>
<operator, +>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, esp>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "\n">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, str>
<operator, (>
<identifier, i>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "Pid: %d, process nr: %d\n\r">
<operator, ,>
<identifier, current>
<operator, ->>
<identifier, pid>
<operator, ,>
<integer_constant, 0xffff>
<operator, &>
<identifier, i>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 10>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "%02x ">
<operator, ,>
<integer_constant, 0xff>
<operator, &>
<identifier, get_seg_byte>
<operator, (>
<identifier, esp>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<operator, (>
<identifier, i>
<operator, +>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, esp>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "\n\r">
<operator, )>
<punctuator, ;>
<identifier, do_exit>
<operator, (>
<integer_constant, 11>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_double_fault>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "double fault">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_general_protection>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "general protection">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_divide_error>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "divide error">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_int3>
<operator, (>
<keyword, long>
<operator, *>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, ,>
<keyword, long>
<identifier, fs>
<operator, ,>
<keyword, long>
<identifier, es>
<operator, ,>
<keyword, long>
<identifier, ds>
<operator, ,>
<keyword, long>
<identifier, ebp>
<operator, ,>
<keyword, long>
<identifier, esi>
<operator, ,>
<keyword, long>
<identifier, edi>
<operator, ,>
<keyword, long>
<identifier, edx>
<operator, ,>
<keyword, long>
<identifier, ecx>
<operator, ,>
<keyword, long>
<identifier, ebx>
<operator, ,>
<keyword, long>
<identifier, eax>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, tr>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "str %%ax">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, tr>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "eax\t\tebx\t\tecx\t\tedx\n\r%8x\t%8x\t%8x\t%8x\n\r">
<operator, ,>
<identifier, eax>
<operator, ,>
<identifier, ebx>
<operator, ,>
<identifier, ecx>
<operator, ,>
<identifier, edx>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "esi\t\tedi\t\tebp\t\tesp\n\r%8x\t%8x\t%8x\t%8x\n\r">
<operator, ,>
<identifier, esi>
<operator, ,>
<identifier, edi>
<operator, ,>
<identifier, ebp>
<operator, ,>
<operator, (>
<keyword, long>
<operator, )>
<identifier, esp>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "\n\rds\tes\tfs\ttr\n\r%4x\t%4x\t%4x\t%4x\n\r">
<operator, ,>
<identifier, ds>
<operator, ,>
<identifier, es>
<operator, ,>
<identifier, fs>
<operator, ,>
<identifier, tr>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "EIP: %8x   CS: %4x  EFLAGS: %8x\n\r">
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, esp>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_nmi>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "nmi">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_debug>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "debug">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_overflow>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "overflow">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_bounds>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "bounds">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_invalid_op>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "invalid operand">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_device_not_available>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "device not available">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_coprocessor_segment_overrun>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "coprocessor segment overrun">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_invalid_TSS>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "invalid TSS">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_segment_not_present>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "segment not present">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_stack_segment>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "stack segment">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_coprocessor_error>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, !>
<operator, =>
<identifier, current>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, die>
<operator, (>
<string_literal, "coprocessor error">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_reserved>
<operator, (>
<keyword, long>
<identifier, esp>
<operator, ,>
<keyword, long>
<identifier, error_code>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "reserved (15,17-47) error">
<operator, ,>
<identifier, esp>
<operator, ,>
<identifier, error_code>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, trap_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 0>
<operator, ,>
<operator, &>
<identifier, divide_error>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 1>
<operator, ,>
<operator, &>
<identifier, debug>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 2>
<operator, ,>
<operator, &>
<identifier, nmi>
<operator, )>
<punctuator, ;>
<identifier, set_system_gate>
<operator, (>
<integer_constant, 3>
<operator, ,>
<operator, &>
<identifier, int3>
<operator, )>
<punctuator, ;>
<identifier, set_system_gate>
<operator, (>
<integer_constant, 4>
<operator, ,>
<operator, &>
<identifier, overflow>
<operator, )>
<punctuator, ;>
<identifier, set_system_gate>
<operator, (>
<integer_constant, 5>
<operator, ,>
<operator, &>
<identifier, bounds>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 6>
<operator, ,>
<operator, &>
<identifier, invalid_op>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 7>
<operator, ,>
<operator, &>
<identifier, device_not_available>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 8>
<operator, ,>
<operator, &>
<identifier, double_fault>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 9>
<operator, ,>
<operator, &>
<identifier, coprocessor_segment_overrun>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 10>
<operator, ,>
<operator, &>
<identifier, invalid_TSS>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 11>
<operator, ,>
<operator, &>
<identifier, segment_not_present>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 12>
<operator, ,>
<operator, &>
<identifier, stack_segment>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 13>
<operator, ,>
<operator, &>
<identifier, general_protection>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 14>
<operator, ,>
<operator, &>
<identifier, page_fault>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 15>
<operator, ,>
<operator, &>
<identifier, reserved>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 16>
<operator, ,>
<operator, &>
<identifier, coprocessor_error>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 17>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 48>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, set_trap_gate>
<operator, (>
<identifier, i>
<operator, ,>
<operator, &>
<identifier, reserved>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 45>
<operator, ,>
<operator, &>
<identifier, irq13>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x21>
<operator, )>
<operator, &>
<integer_constant, 0xfb>
<operator, ,>
<integer_constant, 0x21>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0xA1>
<operator, )>
<operator, &>
<integer_constant, 0xdf>
<operator, ,>
<integer_constant, 0xA1>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 39>
<operator, ,>
<operator, &>
<identifier, parallel_interrupt>
<operator, )>
<punctuator, ;>
<punctuator, }>
