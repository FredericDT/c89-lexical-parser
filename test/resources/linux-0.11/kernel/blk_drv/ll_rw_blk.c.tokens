<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, "blk.h">
<keyword, struct>
<identifier, request>
<identifier, request>
<operator, [>
<identifier, NR_REQUEST>
<operator, ]>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, wait_for_request>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, struct>
<identifier, blk_dev_struct>
<identifier, blk_dev>
<operator, [>
<identifier, NR_BLK_DEV>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<operator, ,>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, lock_buffer>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_wait>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, unlock_buffer>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "ll_rw_block.c: buffer not locked\n\r">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_wait>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, add_request>
<operator, (>
<keyword, struct>
<identifier, blk_dev_struct>
<operator, *>
<identifier, dev>
<operator, ,>
<keyword, struct>
<identifier, request>
<operator, *>
<identifier, req>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, request>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, req>
<operator, ->>
<identifier, bh>
<operator, )>
<identifier, req>
<operator, ->>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, tmp>
<operator, =>
<identifier, dev>
<operator, ->>
<identifier, current_request>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, dev>
<operator, ->>
<identifier, current_request>
<operator, =>
<identifier, req>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<operator, (>
<identifier, dev>
<operator, ->>
<identifier, request_fn>
<operator, )>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<punctuator, ;>
<identifier, tmp>
<operator, ->>
<identifier, next>
<punctuator, ;>
<identifier, tmp>
<operator, =>
<identifier, tmp>
<operator, ->>
<identifier, next>
<operator, )>
<keyword, if>
<operator, (>
<operator, (>
<identifier, IN_ORDER>
<operator, (>
<identifier, tmp>
<operator, ,>
<identifier, req>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<identifier, IN_ORDER>
<operator, (>
<identifier, tmp>
<operator, ,>
<identifier, tmp>
<operator, ->>
<identifier, next>
<operator, )>
<operator, )>
<operator, &>
<operator, &>
<identifier, IN_ORDER>
<operator, (>
<identifier, req>
<operator, ,>
<identifier, tmp>
<operator, ->>
<identifier, next>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, tmp>
<operator, ->>
<identifier, next>
<punctuator, ;>
<identifier, tmp>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, req>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, make_request>
<operator, (>
<keyword, int>
<identifier, major>
<operator, ,>
<keyword, int>
<identifier, rw>
<operator, ,>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, request>
<operator, *>
<identifier, req>
<punctuator, ;>
<keyword, int>
<identifier, rw_ahead>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, rw_ahead>
<operator, =>
<operator, (>
<identifier, rw>
<operator, ==>
<identifier, READA>
<operator, |>
<operator, |>
<identifier, rw>
<operator, ==>
<identifier, WRITEA>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, rw>
<operator, ==>
<identifier, READA>
<operator, )>
<identifier, rw>
<operator, =>
<identifier, READ>
<punctuator, ;>
<keyword, else>
<identifier, rw>
<operator, =>
<identifier, WRITE>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, rw>
<operator, !>
<operator, =>
<identifier, READ>
<operator, &>
<operator, &>
<identifier, rw>
<operator, !>
<operator, =>
<identifier, WRITE>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Bad block dev command, must be R/W/RA/WA">
<operator, )>
<punctuator, ;>
<identifier, lock_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, rw>
<operator, ==>
<identifier, WRITE>
<operator, &>
<operator, &>
<operator, !>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, rw>
<operator, ==>
<identifier, READ>
<operator, &>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, unlock_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, repeat>
<operator, :>
<keyword, if>
<operator, (>
<identifier, rw>
<operator, ==>
<identifier, READ>
<operator, )>
<identifier, req>
<operator, =>
<identifier, request>
<operator, +>
<identifier, NR_REQUEST>
<punctuator, ;>
<keyword, else>
<identifier, req>
<operator, =>
<identifier, request>
<operator, +>
<operator, (>
<operator, (>
<identifier, NR_REQUEST>
<operator, *>
<integer_constant, 2>
<operator, )>
<operator, />
<integer_constant, 3>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, req>
<operator, >>
<operator, =>
<identifier, request>
<operator, )>
<keyword, if>
<operator, (>
<identifier, req>
<operator, ->>
<identifier, dev>
<operator, <>
<integer_constant, 0>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, req>
<operator, <>
<identifier, request>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, rw_ahead>
<operator, )>
<punctuator, {>
<identifier, unlock_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, wait_for_request>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, req>
<operator, ->>
<identifier, dev>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, cmd>
<operator, =>
<identifier, rw>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, errors>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, sector>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, <<>
<integer_constant, 1>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, nr_sectors>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, buffer>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, waiting>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, bh>
<operator, =>
<identifier, bh>
<punctuator, ;>
<identifier, req>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, add_request>
<operator, (>
<identifier, major>
<operator, +>
<identifier, blk_dev>
<operator, ,>
<identifier, req>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, ll_rw_block>
<operator, (>
<keyword, int>
<identifier, rw>
<operator, ,>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, int>
<identifier, major>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, major>
<operator, =>
<identifier, MAJOR>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, )>
<operator, )>
<operator, >>
<operator, =>
<identifier, NR_BLK_DEV>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, blk_dev>
<operator, [>
<identifier, major>
<operator, ]>
<operator, .>
<identifier, request_fn>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Trying to read nonexistent block-device\n\r">
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, make_request>
<operator, (>
<identifier, major>
<operator, ,>
<identifier, rw>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, blk_dev_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_REQUEST>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, request>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, dev>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, request>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, next>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
