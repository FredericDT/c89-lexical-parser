<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fdreg.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<operator, #>
<identifier, define>
<identifier, MAJOR_NR>
<integer_constant, 2>
<punctuator, #>
<identifier, include>
<header_name, "blk.h">
<keyword, static>
<keyword, int>
<identifier, recalibrate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, reset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, seek>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, extern>
<keyword, unsigned>
<keyword, char>
<identifier, current_DOR>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, immoutb_p>
<operator, (>
<identifier, val>
<operator, ,>
<identifier, port>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "outb %0,%1\n\tjmp 1f\n1:\tjmp 1f\n1:">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<operator, (>
<keyword, char>
<operator, )>
<operator, (>
<identifier, val>
<operator, )>
<operator, )>
<operator, ,>
<string_literal, "i">
<operator, (>
<identifier, port>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, TYPE>
<operator, (>
<identifier, x>
<operator, )>
<operator, (>
<operator, (>
<identifier, x>
<operator, )>
<operator, >>>
<integer_constant, 2>
<operator, )>
<operator, #>
<identifier, define>
<identifier, DRIVE>
<operator, (>
<identifier, x>
<operator, )>
<operator, (>
<operator, (>
<identifier, x>
<operator, )>
<operator, &>
<integer_constant, 0x03>
<operator, )>
<operator, #>
<identifier, define>
<identifier, MAX_ERRORS>
<integer_constant, 8>
<operator, #>
<identifier, define>
<identifier, MAX_REPLIES>
<integer_constant, 7>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, reply_buffer>
<operator, [>
<identifier, MAX_REPLIES>
<operator, ]>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, ST0>
<operator, (>
<identifier, reply_buffer>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ST1>
<operator, (>
<identifier, reply_buffer>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ST2>
<operator, (>
<identifier, reply_buffer>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ST3>
<operator, (>
<identifier, reply_buffer>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, )>
<keyword, static>
<keyword, struct>
<identifier, floppy_struct>
<punctuator, {>
<keyword, unsigned>
<keyword, int>
<identifier, size>
<operator, ,>
<identifier, sect>
<operator, ,>
<identifier, head>
<operator, ,>
<identifier, track>
<operator, ,>
<identifier, stretch>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, gap>
<operator, ,>
<identifier, rate>
<operator, ,>
<identifier, spec1>
<punctuator, ;>
<punctuator, }>
<identifier, floppy_type>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x00>
<operator, ,>
<integer_constant, 0x00>
<operator, ,>
<integer_constant, 0x00>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 720>
<operator, ,>
<integer_constant, 9>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 40>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x2A>
<operator, ,>
<integer_constant, 0x02>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 2400>
<operator, ,>
<integer_constant, 15>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 80>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x1B>
<operator, ,>
<integer_constant, 0x00>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 720>
<operator, ,>
<integer_constant, 9>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 40>
<operator, ,>
<integer_constant, 1>
<operator, ,>
<integer_constant, 0x2A>
<operator, ,>
<integer_constant, 0x02>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 1440>
<operator, ,>
<integer_constant, 9>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 80>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x2A>
<operator, ,>
<integer_constant, 0x02>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 720>
<operator, ,>
<integer_constant, 9>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 40>
<operator, ,>
<integer_constant, 1>
<operator, ,>
<integer_constant, 0x23>
<operator, ,>
<integer_constant, 0x01>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 1440>
<operator, ,>
<integer_constant, 9>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 80>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x23>
<operator, ,>
<integer_constant, 0x01>
<operator, ,>
<integer_constant, 0xDF>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 2880>
<operator, ,>
<integer_constant, 18>
<operator, ,>
<integer_constant, 2>
<operator, ,>
<integer_constant, 80>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0x1B>
<operator, ,>
<integer_constant, 0x00>
<operator, ,>
<integer_constant, 0xCF>
<punctuator, }>
<operator, ,>
<punctuator, }>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, floppy_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, char>
<identifier, tmp_floppy_area>
<operator, [>
<integer_constant, 1024>
<operator, ]>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, cur_spec1>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, cur_rate>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, static>
<keyword, struct>
<identifier, floppy_struct>
<operator, *>
<identifier, floppy>
<operator, =>
<identifier, floppy_type>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, current_drive>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, sector>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, head>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, track>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, seek_track>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, current_track>
<operator, =>
<integer_constant, 255>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, command>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, selected>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, wait_on_floppy_select>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, void>
<identifier, floppy_deselect>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, !>
<operator, =>
<operator, (>
<identifier, current_DOR>
<operator, &>
<integer_constant, 3>
<operator, )>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "floppy_deselect: drive not selected\n\r">
<operator, )>
<punctuator, ;>
<identifier, selected>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, wait_on_floppy_select>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, floppy_change>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, repeat>
<operator, :>
<identifier, floppy_on>
<operator, (>
<identifier, nr>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, (>
<identifier, current_DOR>
<operator, &>
<integer_constant, 3>
<operator, )>
<operator, !>
<operator, =>
<identifier, nr>
<operator, &>
<operator, &>
<identifier, selected>
<operator, )>
<identifier, interruptible_sleep_on>
<operator, (>
<operator, &>
<identifier, wait_on_floppy_select>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, current_DOR>
<operator, &>
<integer_constant, 3>
<operator, )>
<operator, !>
<operator, =>
<identifier, nr>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inb>
<operator, (>
<identifier, FD_DIR>
<operator, )>
<operator, &>
<integer_constant, 0x80>
<operator, )>
<punctuator, {>
<identifier, floppy_off>
<operator, (>
<identifier, nr>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, floppy_off>
<operator, (>
<identifier, nr>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, copy_buffer>
<operator, (>
<identifier, from>
<operator, ,>
<identifier, to>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld ; rep ; movsl">
<unknown, \>
<operator, :>
<operator, :>
<string_literal, "c">
<operator, (>
<identifier, BLOCK_SIZE>
<operator, />
<integer_constant, 4>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<operator, (>
<identifier, from>
<operator, )>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<operator, (>
<identifier, to>
<operator, )>
<operator, )>
<unknown, \>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<keyword, static>
<keyword, void>
<identifier, setup_DMA>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, long>
<identifier, addr>
<operator, =>
<operator, (>
<keyword, long>
<operator, )>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, addr>
<operator, >>
<operator, =>
<integer_constant, 0x100000>
<operator, )>
<punctuator, {>
<identifier, addr>
<operator, =>
<operator, (>
<keyword, long>
<operator, )>
<identifier, tmp_floppy_area>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, command>
<operator, ==>
<identifier, FD_WRITE>
<operator, )>
<identifier, copy_buffer>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<identifier, tmp_floppy_area>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, immoutb_p>
<operator, (>
<integer_constant, 4>
<operator, |>
<integer_constant, 2>
<operator, ,>
<integer_constant, 10>
<operator, )>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "outb %%al,$12\n\tjmp 1f\n1:\tjmp 1f\n1:\t">
<string_literal, "outb %%al,$11\n\tjmp 1f\n1:\tjmp 1f\n1:">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<operator, (>
<keyword, char>
<operator, )>
<operator, (>
<operator, (>
<identifier, command>
<operator, ==>
<identifier, FD_READ>
<operator, )>
<operator, ?>
<identifier, DMA_READ>
<operator, :>
<identifier, DMA_WRITE>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<identifier, addr>
<operator, ,>
<integer_constant, 4>
<operator, )>
<punctuator, ;>
<identifier, addr>
<operator, >>>
<operator, =>
<integer_constant, 8>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<identifier, addr>
<operator, ,>
<integer_constant, 4>
<operator, )>
<punctuator, ;>
<identifier, addr>
<operator, >>>
<operator, =>
<integer_constant, 8>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<identifier, addr>
<operator, ,>
<integer_constant, 0x81>
<operator, )>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<integer_constant, 0xff>
<operator, ,>
<integer_constant, 5>
<operator, )>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<integer_constant, 3>
<operator, ,>
<integer_constant, 5>
<operator, )>
<punctuator, ;>
<identifier, immoutb_p>
<operator, (>
<integer_constant, 0>
<operator, |>
<integer_constant, 2>
<operator, ,>
<integer_constant, 10>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, output_byte>
<operator, (>
<keyword, char>
<identifier, byte>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, counter>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, status>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, counter>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, counter>
<operator, <>
<integer_constant, 10000>
<punctuator, ;>
<identifier, counter>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, status>
<operator, =>
<identifier, inb_p>
<operator, (>
<identifier, FD_STATUS>
<operator, )>
<operator, &>
<operator, (>
<identifier, STATUS_READY>
<operator, |>
<identifier, STATUS_DIR>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, status>
<operator, ==>
<identifier, STATUS_READY>
<operator, )>
<punctuator, {>
<identifier, outb>
<operator, (>
<identifier, byte>
<operator, ,>
<identifier, FD_DATA>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "Unable to send byte to FDC\n\r">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, result>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, =>
<integer_constant, 0>
<operator, ,>
<identifier, counter>
<operator, ,>
<identifier, status>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, counter>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, counter>
<operator, <>
<integer_constant, 10000>
<punctuator, ;>
<identifier, counter>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, status>
<operator, =>
<identifier, inb_p>
<operator, (>
<identifier, FD_STATUS>
<operator, )>
<operator, &>
<operator, (>
<identifier, STATUS_DIR>
<operator, |>
<identifier, STATUS_READY>
<operator, |>
<identifier, STATUS_BUSY>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, status>
<operator, ==>
<identifier, STATUS_READY>
<operator, )>
<keyword, return>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, status>
<operator, ==>
<operator, (>
<identifier, STATUS_DIR>
<operator, |>
<identifier, STATUS_READY>
<operator, |>
<identifier, STATUS_BUSY>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<operator, =>
<identifier, MAX_REPLIES>
<operator, )>
<keyword, break>
<punctuator, ;>
<identifier, reply_buffer>
<operator, [>
<identifier, i>
<operator, ++>
<operator, ]>
<operator, =>
<identifier, inb_p>
<operator, (>
<identifier, FD_DATA>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "Getstatus times out\n\r">
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, bad_flp_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, >>
<identifier, MAX_ERRORS>
<operator, )>
<punctuator, {>
<identifier, floppy_deselect>
<operator, (>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, >>
<identifier, MAX_ERRORS>
<operator, />
<integer_constant, 2>
<operator, )>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<identifier, recalibrate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, rw_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, result>
<operator, (>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 7>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST0>
<operator, &>
<integer_constant, 0xf8>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST1>
<operator, &>
<integer_constant, 0xbf>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST2>
<operator, &>
<integer_constant, 0x73>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, ST1>
<operator, &>
<integer_constant, 0x02>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Drive %d is write protected\n\r">
<operator, ,>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, floppy_deselect>
<operator, (>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, bad_flp_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, command>
<operator, ==>
<identifier, FD_READ>
<operator, &>
<operator, &>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, )>
<operator, >>
<operator, =>
<integer_constant, 0x100000>
<operator, )>
<identifier, copy_buffer>
<operator, (>
<identifier, tmp_floppy_area>
<operator, ,>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, )>
<punctuator, ;>
<identifier, floppy_deselect>
<operator, (>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, end_request>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, inline>
<keyword, void>
<identifier, setup_rw_floppy>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, setup_DMA>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_floppy>
<operator, =>
<identifier, rw_interrupt>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, command>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, head>
<operator, <<>
<integer_constant, 2>
<operator, |>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, track>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, head>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, sector>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, floppy>
<operator, ->>
<identifier, sect>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, floppy>
<operator, ->>
<identifier, gap>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<integer_constant, 0xFF>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, seek_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_SENSEI>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, result>
<operator, (>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST0>
<operator, &>
<integer_constant, 0xF8>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0x20>
<operator, |>
<operator, |>
<identifier, ST1>
<operator, !>
<operator, =>
<identifier, seek_track>
<operator, )>
<punctuator, {>
<identifier, bad_flp_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, current_track>
<operator, =>
<identifier, ST1>
<punctuator, ;>
<identifier, setup_rw_floppy>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, transfer>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, cur_spec1>
<operator, !>
<operator, =>
<identifier, floppy>
<operator, ->>
<identifier, spec1>
<operator, )>
<punctuator, {>
<identifier, cur_spec1>
<operator, =>
<identifier, floppy>
<operator, ->>
<identifier, spec1>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, FD_SPECIFY>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, cur_spec1>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<integer_constant, 6>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, cur_rate>
<operator, !>
<operator, =>
<identifier, floppy>
<operator, ->>
<identifier, rate>
<operator, )>
<identifier, outb_p>
<operator, (>
<identifier, cur_rate>
<operator, =>
<identifier, floppy>
<operator, ->>
<identifier, rate>
<operator, ,>
<identifier, FD_DCR>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<punctuator, {>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, seek>
<operator, )>
<punctuator, {>
<identifier, setup_rw_floppy>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, do_floppy>
<operator, =>
<identifier, seek_interrupt>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, seek_track>
<operator, )>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_SEEK>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, head>
<operator, <<>
<integer_constant, 2>
<operator, |>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, seek_track>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_RECALIBRATE>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, head>
<operator, <<>
<integer_constant, 2>
<operator, |>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, recal_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_SENSEI>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, result>
<operator, (>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST0>
<operator, &>
<integer_constant, 0xE0>
<operator, )>
<operator, ==>
<integer_constant, 0x60>
<operator, )>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<identifier, recalibrate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, unexpected_floppy_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_SENSEI>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, result>
<operator, (>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, |>
<operator, |>
<operator, (>
<identifier, ST0>
<operator, &>
<integer_constant, 0xE0>
<operator, )>
<operator, ==>
<integer_constant, 0x60>
<operator, )>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<identifier, recalibrate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, recalibrate_floppy>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, recalibrate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, current_track>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, do_floppy>
<operator, =>
<identifier, recal_interrupt>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, FD_RECALIBRATE>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, head>
<operator, <<>
<integer_constant, 2>
<operator, |>
<identifier, current_drive>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, reset_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, output_byte>
<operator, (>
<identifier, FD_SENSEI>
<operator, )>
<punctuator, ;>
<operator, (>
<keyword, void>
<operator, )>
<identifier, result>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, FD_SPECIFY>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<identifier, cur_spec1>
<operator, )>
<punctuator, ;>
<identifier, output_byte>
<operator, (>
<integer_constant, 6>
<operator, )>
<punctuator, ;>
<identifier, do_fd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, reset_floppy>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, reset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, cur_spec1>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, cur_rate>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, recalibrate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "Reset-floppy called\n\r">
<operator, )>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_floppy>
<operator, =>
<identifier, reset_interrupt>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, current_DOR>
<operator, &>
<operator, ~>
<integer_constant, 0x04>
<operator, ,>
<identifier, FD_DOR>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 100>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, __asm__>
<operator, (>
<string_literal, "nop">
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, current_DOR>
<operator, ,>
<identifier, FD_DOR>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, floppy_on_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, selected>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current_drive>
<operator, !>
<operator, =>
<operator, (>
<identifier, current_DOR>
<operator, &>
<integer_constant, 3>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, current_DOR>
<operator, &>
<operator, =>
<integer_constant, 0xFC>
<punctuator, ;>
<identifier, current_DOR>
<operator, |>
<operator, =>
<identifier, current_drive>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, current_DOR>
<operator, ,>
<identifier, FD_DOR>
<operator, )>
<punctuator, ;>
<identifier, add_timer>
<operator, (>
<integer_constant, 2>
<operator, ,>
<operator, &>
<identifier, transfer>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, transfer>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_fd_request>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, int>
<identifier, block>
<punctuator, ;>
<identifier, seek>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<punctuator, {>
<identifier, reset_floppy>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, recalibrate>
<operator, )>
<punctuator, {>
<identifier, recalibrate_floppy>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, INIT_REQUEST>
<punctuator, ;>
<identifier, floppy>
<operator, =>
<operator, (>
<identifier, MINOR>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, dev>
<operator, )>
<operator, >>>
<integer_constant, 2>
<operator, )>
<operator, +>
<identifier, floppy_type>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current_drive>
<operator, !>
<operator, =>
<identifier, CURRENT_DEV>
<operator, )>
<identifier, seek>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, current_drive>
<operator, =>
<identifier, CURRENT_DEV>
<punctuator, ;>
<identifier, block>
<operator, =>
<identifier, CURRENT>
<operator, ->>
<identifier, sector>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, >>
<identifier, floppy>
<operator, ->>
<identifier, size>
<operator, )>
<punctuator, {>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, sector>
<operator, =>
<identifier, block>
<operator, %>
<identifier, floppy>
<operator, ->>
<identifier, sect>
<punctuator, ;>
<identifier, block>
<operator, />
<operator, =>
<identifier, floppy>
<operator, ->>
<identifier, sect>
<punctuator, ;>
<identifier, head>
<operator, =>
<identifier, block>
<operator, %>
<identifier, floppy>
<operator, ->>
<identifier, head>
<punctuator, ;>
<identifier, track>
<operator, =>
<identifier, block>
<operator, />
<identifier, floppy>
<operator, ->>
<identifier, head>
<punctuator, ;>
<identifier, seek_track>
<operator, =>
<identifier, track>
<operator, <<>
<identifier, floppy>
<operator, ->>
<identifier, stretch>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, seek_track>
<operator, !>
<operator, =>
<identifier, current_track>
<operator, )>
<identifier, seek>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, sector>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, READ>
<operator, )>
<identifier, command>
<operator, =>
<identifier, FD_READ>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, WRITE>
<operator, )>
<identifier, command>
<operator, =>
<identifier, FD_WRITE>
<punctuator, ;>
<keyword, else>
<identifier, panic>
<operator, (>
<string_literal, "do_fd_request: unknown command">
<operator, )>
<punctuator, ;>
<identifier, add_timer>
<operator, (>
<identifier, ticks_to_floppy_on>
<operator, (>
<identifier, current_drive>
<operator, )>
<operator, ,>
<operator, &>
<identifier, floppy_on_interrupt>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, floppy_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, blk_dev>
<operator, [>
<identifier, MAJOR_NR>
<operator, ]>
<operator, .>
<identifier, request_fn>
<operator, =>
<identifier, DEVICE_REQUEST>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 0x26>
<operator, ,>
<operator, &>
<identifier, floppy_interrupt>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x21>
<operator, )>
<operator, &>
<operator, ~>
<integer_constant, 0x40>
<operator, ,>
<integer_constant, 0x21>
<operator, )>
<punctuator, ;>
<punctuator, }>
