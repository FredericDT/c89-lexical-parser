<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/config.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/memory.h>>
<operator, #>
<identifier, define>
<identifier, MAJOR_NR>
<integer_constant, 1>
<punctuator, #>
<identifier, include>
<header_name, "blk.h">
<keyword, char>
<operator, *>
<identifier, rd_start>
<punctuator, ;>
<keyword, int>
<identifier, rd_length>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, void>
<identifier, do_rd_request>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, len>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, addr>
<punctuator, ;>
<identifier, INIT_REQUEST>
<punctuator, ;>
<identifier, addr>
<operator, =>
<identifier, rd_start>
<operator, +>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, sector>
<operator, <<>
<integer_constant, 9>
<operator, )>
<punctuator, ;>
<identifier, len>
<operator, =>
<identifier, CURRENT>
<operator, ->>
<identifier, nr_sectors>
<operator, <<>
<integer_constant, 9>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, MINOR>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, dev>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 1>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, addr>
<operator, +>
<identifier, len>
<operator, >>
<identifier, rd_start>
<operator, +>
<identifier, rd_length>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, WRITE>
<operator, )>
<punctuator, {>
<operator, (>
<keyword, void>
<operator, )>
<identifier, memcpy>
<operator, (>
<identifier, addr>
<operator, ,>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<identifier, len>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, READ>
<operator, )>
<punctuator, {>
<operator, (>
<keyword, void>
<operator, )>
<identifier, memcpy>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<identifier, addr>
<operator, ,>
<identifier, len>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, panic>
<operator, (>
<string_literal, "unknown ramdisk-command">
<operator, )>
<punctuator, ;>
<identifier, end_request>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<keyword, long>
<identifier, rd_init>
<operator, (>
<keyword, long>
<identifier, mem_start>
<operator, ,>
<keyword, int>
<identifier, length>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, cp>
<punctuator, ;>
<identifier, blk_dev>
<operator, [>
<identifier, MAJOR_NR>
<operator, ]>
<operator, .>
<identifier, request_fn>
<operator, =>
<identifier, DEVICE_REQUEST>
<punctuator, ;>
<identifier, rd_start>
<operator, =>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, mem_start>
<punctuator, ;>
<identifier, rd_length>
<operator, =>
<identifier, length>
<punctuator, ;>
<identifier, cp>
<operator, =>
<identifier, rd_start>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, length>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<operator, *>
<identifier, cp>
<operator, ++>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, length>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, rd_load>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<identifier, s>
<punctuator, ;>
<keyword, int>
<identifier, block>
<operator, =>
<integer_constant, 256>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, int>
<identifier, nblocks>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, cp>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, rd_length>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "Ram disk: %d bytes, starting at 0x%x\n">
<operator, ,>
<identifier, rd_length>
<operator, ,>
<operator, (>
<keyword, int>
<operator, )>
<identifier, rd_start>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, MAJOR>
<operator, (>
<identifier, ROOT_DEV>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, breada>
<operator, (>
<identifier, ROOT_DEV>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 1>
<operator, ,>
<identifier, block>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, ,>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Disk error while looking for ramdisk!\n">
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<operator, *>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_super_block>
<operator, *>
<operator, )>
<operator, &>
<identifier, s>
<operator, )>
<operator, =>
<operator, *>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_super_block>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, s>
<operator, .>
<identifier, s_magic>
<operator, !>
<operator, =>
<identifier, SUPER_MAGIC>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, nblocks>
<operator, =>
<identifier, s>
<operator, .>
<identifier, s_nzones>
<operator, <<>
<identifier, s>
<operator, .>
<identifier, s_log_zone_size>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, nblocks>
<operator, >>
<operator, (>
<identifier, rd_length>
<operator, >>>
<identifier, BLOCK_SIZE_BITS>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Ram disk image too big!  (%d blocks, %d avail)\n">
<operator, ,>
<identifier, nblocks>
<operator, ,>
<identifier, rd_length>
<operator, >>>
<identifier, BLOCK_SIZE_BITS>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, printk>
<operator, (>
<string_literal, "Loading %d bytes into ram disk... 0000k">
<operator, ,>
<identifier, nblocks>
<operator, <<>
<identifier, BLOCK_SIZE_BITS>
<operator, )>
<punctuator, ;>
<identifier, cp>
<operator, =>
<identifier, rd_start>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nblocks>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nblocks>
<operator, >>
<integer_constant, 2>
<operator, )>
<identifier, bh>
<operator, =>
<identifier, breada>
<operator, (>
<identifier, ROOT_DEV>
<operator, ,>
<identifier, block>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 1>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, ,>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, else>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, ROOT_DEV>
<operator, ,>
<identifier, block>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "I/O error on block %d, aborting load\n">
<operator, ,>
<identifier, block>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<operator, (>
<keyword, void>
<operator, )>
<identifier, memcpy>
<operator, (>
<identifier, cp>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, ,>
<identifier, BLOCK_SIZE>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "\010\010\010\010\010%4dk">
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<identifier, cp>
<operator, +>
<operator, =>
<identifier, BLOCK_SIZE>
<punctuator, ;>
<identifier, block>
<operator, ++>
<punctuator, ;>
<identifier, nblocks>
<operator, -->
<punctuator, ;>
<identifier, i>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, printk>
<operator, (>
<string_literal, "\010\010\010\010\010done \n">
<operator, )>
<punctuator, ;>
<identifier, ROOT_DEV>
<operator, =>
<integer_constant, 0x0101>
<punctuator, ;>
<punctuator, }>
