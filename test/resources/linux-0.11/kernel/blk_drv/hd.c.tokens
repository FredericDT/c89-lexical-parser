<punctuator, #>
<identifier, include>
<header_name, <linux/config.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/hdreg.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<operator, #>
<identifier, define>
<identifier, MAJOR_NR>
<integer_constant, 3>
<punctuator, #>
<identifier, include>
<header_name, "blk.h">
<operator, #>
<identifier, define>
<identifier, CMOS_READ>
<operator, (>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<identifier, outb_p>
<operator, (>
<integer_constant, 0x80>
<operator, |>
<identifier, addr>
<operator, ,>
<integer_constant, 0x70>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x71>
<operator, )>
<punctuator, ;>
<unknown, \>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, MAX_ERRORS>
<integer_constant, 7>
<operator, #>
<identifier, define>
<identifier, MAX_HD>
<integer_constant, 2>
<keyword, static>
<keyword, void>
<identifier, recal_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, recalibrate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, struct>
<identifier, hd_i_struct>
<punctuator, {>
<keyword, int>
<identifier, head>
<operator, ,>
<identifier, sect>
<operator, ,>
<identifier, cyl>
<operator, ,>
<identifier, wpcom>
<operator, ,>
<identifier, lzone>
<operator, ,>
<identifier, ctl>
<punctuator, ;>
<punctuator, }>
<punctuator, ;>
<operator, #>
<identifier, ifdef>
<identifier, HD_TYPE>
<keyword, struct>
<identifier, hd_i_struct>
<identifier, hd_info>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<identifier, HD_TYPE>
<punctuator, }>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, NR_HD>
<operator, (>
<operator, (>
<keyword, sizeof>
<operator, (>
<identifier, hd_info>
<operator, )>
<operator, )>
<operator, />
<operator, (>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, hd_i_struct>
<operator, )>
<operator, )>
<operator, )>
<operator, #>
<keyword, else>
<keyword, struct>
<identifier, hd_i_struct>
<identifier, hd_info>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<punctuator, }>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, NR_HD>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, #>
<identifier, endif>
<keyword, static>
<keyword, struct>
<identifier, hd_struct>
<punctuator, {>
<keyword, long>
<identifier, start_sect>
<punctuator, ;>
<keyword, long>
<identifier, nr_sects>
<punctuator, ;>
<punctuator, }>
<identifier, hd>
<operator, [>
<integer_constant, 5>
<operator, *>
<identifier, MAX_HD>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<punctuator, }>
<operator, ,>
<punctuator, }>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, port_read>
<operator, (>
<identifier, port>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, nr>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld;rep;insw">
<operator, :>
<operator, :>
<string_literal, "d">
<operator, (>
<identifier, port>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, buf>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, nr>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, )>
<operator, #>
<identifier, define>
<identifier, port_write>
<operator, (>
<identifier, port>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, nr>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld;rep;outsw">
<operator, :>
<operator, :>
<string_literal, "d">
<operator, (>
<identifier, port>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, buf>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, nr>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "si">
<operator, )>
<keyword, extern>
<keyword, void>
<identifier, hd_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, rd_load>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, int>
<identifier, sys_setup>
<operator, (>
<keyword, void>
<operator, *>
<identifier, BIOS>
<operator, )>
<punctuator, {>
<keyword, static>
<keyword, int>
<identifier, callable>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, drive>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, cmos_disks>
<punctuator, ;>
<keyword, struct>
<identifier, partition>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, callable>
<operator, )>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, callable>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, #>
<identifier, ifndef>
<identifier, HD_TYPE>
<keyword, for>
<operator, (>
<identifier, drive>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, drive>
<operator, <>
<integer_constant, 2>
<punctuator, ;>
<identifier, drive>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, cyl>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, BIOS>
<punctuator, ;>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, head>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 2>
<operator, +>
<identifier, BIOS>
<operator, )>
<punctuator, ;>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, wpcom>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 5>
<operator, +>
<identifier, BIOS>
<operator, )>
<punctuator, ;>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, ctl>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 8>
<operator, +>
<identifier, BIOS>
<operator, )>
<punctuator, ;>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, lzone>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 12>
<operator, +>
<identifier, BIOS>
<operator, )>
<punctuator, ;>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, =>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 14>
<operator, +>
<identifier, BIOS>
<operator, )>
<punctuator, ;>
<identifier, BIOS>
<operator, +>
<operator, =>
<integer_constant, 16>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, hd_info>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, .>
<identifier, cyl>
<operator, )>
<identifier, NR_HD>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, else>
<identifier, NR_HD>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<operator, #>
<identifier, endif>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_HD>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, *>
<integer_constant, 5>
<operator, ]>
<operator, .>
<identifier, start_sect>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, *>
<integer_constant, 5>
<operator, ]>
<operator, .>
<identifier, nr_sects>
<operator, =>
<identifier, hd_info>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, head>
<operator, *>
<identifier, hd_info>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, *>
<identifier, hd_info>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, cyl>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, (>
<identifier, cmos_disks>
<operator, =>
<identifier, CMOS_READ>
<operator, (>
<integer_constant, 0x12>
<operator, )>
<operator, )>
<operator, &>
<integer_constant, 0xf0>
<operator, )>
<keyword, if>
<operator, (>
<identifier, cmos_disks>
<operator, &>
<integer_constant, 0x0f>
<operator, )>
<identifier, NR_HD>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, else>
<identifier, NR_HD>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<identifier, NR_HD>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<identifier, NR_HD>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 2>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, *>
<integer_constant, 5>
<operator, ]>
<operator, .>
<identifier, start_sect>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, *>
<integer_constant, 5>
<operator, ]>
<operator, .>
<identifier, nr_sects>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, drive>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, drive>
<operator, <>
<identifier, NR_HD>
<punctuator, ;>
<identifier, drive>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<integer_constant, 0x300>
<operator, +>
<identifier, drive>
<operator, *>
<integer_constant, 5>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Unable to read partition table of drive %d\n\r">
<operator, ,>
<identifier, drive>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 510>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0x55>
<operator, |>
<operator, |>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 511>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0xAA>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Bad partition table on drive %d\n\r">
<operator, ,>
<identifier, drive>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, p>
<operator, =>
<integer_constant, 0x1BE>
<operator, +>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 5>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, p>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, +>
<integer_constant, 5>
<operator, *>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, start_sect>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, start_sect>
<punctuator, ;>
<identifier, hd>
<operator, [>
<identifier, i>
<operator, +>
<integer_constant, 5>
<operator, *>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, nr_sects>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, nr_sects>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, NR_HD>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "Partition table%s ok.\n\r">
<operator, ,>
<operator, (>
<identifier, NR_HD>
<operator, >>
<integer_constant, 1>
<operator, )>
<operator, ?>
<string_literal, "s">
<operator, :>
<string_literal, "">
<operator, )>
<punctuator, ;>
<identifier, rd_load>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, mount_root>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, controller_ready>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, retries>
<operator, =>
<integer_constant, 10000>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, retries>
<operator, &>
<operator, &>
<operator, (>
<identifier, inb_p>
<operator, (>
<identifier, HD_STATUS>
<operator, )>
<operator, &>
<integer_constant, 0xc0>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0x40>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, retries>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, win_result>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, =>
<identifier, inb_p>
<operator, (>
<identifier, HD_STATUS>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, i>
<operator, &>
<operator, (>
<identifier, BUSY_STAT>
<operator, |>
<identifier, READY_STAT>
<operator, |>
<identifier, WRERR_STAT>
<operator, |>
<identifier, SEEK_STAT>
<operator, |>
<identifier, ERR_STAT>
<operator, )>
<operator, )>
<operator, ==>
<operator, (>
<identifier, READY_STAT>
<operator, |>
<identifier, SEEK_STAT>
<operator, )>
<operator, )>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, &>
<integer_constant, 1>
<operator, )>
<identifier, i>
<operator, =>
<identifier, inb>
<operator, (>
<identifier, HD_ERROR>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, hd_out>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, drive>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, nsect>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, sect>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, head>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, cyl>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, cmd>
<operator, ,>
<keyword, void>
<operator, (>
<operator, *>
<identifier, intr_addr>
<operator, )>
<operator, (>
<keyword, void>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, register>
<keyword, int>
<identifier, port>
<identifier, asm>
<operator, (>
<string_literal, "dx">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, drive>
<operator, >>
<integer_constant, 1>
<operator, |>
<operator, |>
<identifier, head>
<operator, >>
<integer_constant, 15>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Trying to write bad sector">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, controller_ready>
<operator, (>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "HD controller not ready">
<operator, )>
<punctuator, ;>
<identifier, do_hd>
<operator, =>
<identifier, intr_addr>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, ctl>
<operator, ,>
<identifier, HD_CMD>
<operator, )>
<punctuator, ;>
<identifier, port>
<operator, =>
<identifier, HD_DATA>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, hd_info>
<operator, [>
<identifier, drive>
<operator, ]>
<operator, .>
<identifier, wpcom>
<operator, >>>
<integer_constant, 2>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, nsect>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, sect>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, cyl>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, cyl>
<operator, >>>
<integer_constant, 8>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xA0>
<operator, |>
<operator, (>
<identifier, drive>
<operator, <<>
<integer_constant, 4>
<operator, )>
<operator, |>
<identifier, head>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, cmd>
<operator, ,>
<operator, ++>
<identifier, port>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, drive_busy>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 10000>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, READY_STAT>
<operator, ==>
<operator, (>
<identifier, inb_p>
<operator, (>
<identifier, HD_STATUS>
<operator, )>
<operator, &>
<operator, (>
<identifier, BUSY_STAT>
<operator, |>
<identifier, READY_STAT>
<operator, )>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, inb>
<operator, (>
<identifier, HD_STATUS>
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, &>
<operator, =>
<identifier, BUSY_STAT>
<operator, |>
<identifier, READY_STAT>
<operator, |>
<identifier, SEEK_STAT>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, ==>
<identifier, READY_STAT>
<operator, |>
<identifier, SEEK_STAT>
<operator, )>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "HD controller times out\n\r">
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, reset_controller>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, outb>
<operator, (>
<integer_constant, 4>
<operator, ,>
<identifier, HD_CMD>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 100>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, nop>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, hd_info>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, ctl>
<operator, &>
<integer_constant, 0x0f>
<operator, ,>
<identifier, HD_CMD>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, drive_busy>
<operator, (>
<operator, )>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "HD-controller still busy\n\r">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, i>
<operator, =>
<identifier, inb>
<operator, (>
<identifier, HD_ERROR>
<operator, )>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 1>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "HD-controller reset failed: %02x\n\r">
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, reset_hd>
<operator, (>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, reset_controller>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, hd_out>
<operator, (>
<identifier, nr>
<operator, ,>
<identifier, hd_info>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, ,>
<identifier, hd_info>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, ,>
<identifier, hd_info>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, .>
<identifier, head>
<operator, ->
<integer_constant, 1>
<operator, ,>
<identifier, hd_info>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, .>
<identifier, cyl>
<operator, ,>
<identifier, WIN_SPECIFY>
<operator, ,>
<operator, &>
<identifier, recal_intr>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, unexpected_hd_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Unexpected HD interrupt\n\r">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, bad_rw_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, ++>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, >>
<operator, =>
<identifier, MAX_ERRORS>
<operator, )>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, >>
<identifier, MAX_ERRORS>
<operator, />
<integer_constant, 2>
<operator, )>
<identifier, reset>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, read_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, win_result>
<operator, (>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, bad_rw_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_hd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, port_read>
<operator, (>
<identifier, HD_DATA>
<operator, ,>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<integer_constant, 256>
<operator, )>
<punctuator, ;>
<identifier, CURRENT>
<operator, ->>
<identifier, errors>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, +>
<operator, =>
<integer_constant, 512>
<punctuator, ;>
<identifier, CURRENT>
<operator, ->>
<identifier, sector>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, -->
<identifier, CURRENT>
<operator, ->>
<identifier, nr_sectors>
<operator, )>
<punctuator, {>
<identifier, do_hd>
<operator, =>
<operator, &>
<identifier, read_intr>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, end_request>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, do_hd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, write_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, win_result>
<operator, (>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, bad_rw_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_hd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, -->
<identifier, CURRENT>
<operator, ->>
<identifier, nr_sectors>
<operator, )>
<punctuator, {>
<identifier, CURRENT>
<operator, ->>
<identifier, sector>
<operator, ++>
<punctuator, ;>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, +>
<operator, =>
<integer_constant, 512>
<punctuator, ;>
<identifier, do_hd>
<operator, =>
<operator, &>
<identifier, write_intr>
<punctuator, ;>
<identifier, port_write>
<operator, (>
<identifier, HD_DATA>
<operator, ,>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<integer_constant, 256>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, end_request>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, do_hd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, recal_intr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, win_result>
<operator, (>
<operator, )>
<operator, )>
<identifier, bad_rw_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, do_hd_request>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_hd_request>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, r>
<punctuator, ;>
<keyword, unsigned>
<keyword, int>
<identifier, block>
<operator, ,>
<identifier, dev>
<punctuator, ;>
<keyword, unsigned>
<keyword, int>
<identifier, sec>
<operator, ,>
<identifier, head>
<operator, ,>
<identifier, cyl>
<punctuator, ;>
<keyword, unsigned>
<keyword, int>
<identifier, nsect>
<punctuator, ;>
<identifier, INIT_REQUEST>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, MINOR>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, dev>
<operator, )>
<punctuator, ;>
<identifier, block>
<operator, =>
<identifier, CURRENT>
<operator, ->>
<identifier, sector>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, dev>
<operator, >>
<operator, =>
<integer_constant, 5>
<operator, *>
<identifier, NR_HD>
<operator, |>
<operator, |>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, >>
<identifier, hd>
<operator, [>
<identifier, dev>
<operator, ]>
<operator, .>
<identifier, nr_sects>
<operator, )>
<punctuator, {>
<identifier, end_request>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, block>
<operator, +>
<operator, =>
<identifier, hd>
<operator, [>
<identifier, dev>
<operator, ]>
<operator, .>
<identifier, start_sect>
<punctuator, ;>
<identifier, dev>
<operator, />
<operator, =>
<integer_constant, 5>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "divl %4">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, block>
<operator, )>
<operator, ,>
<string_literal, "=d">
<operator, (>
<identifier, sec>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, block>
<operator, )>
<operator, ,>
<string_literal, "1">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, hd_info>
<operator, [>
<identifier, dev>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "divl %4">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, cyl>
<operator, )>
<operator, ,>
<string_literal, "=d">
<operator, (>
<identifier, head>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, block>
<operator, )>
<operator, ,>
<string_literal, "1">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, hd_info>
<operator, [>
<identifier, dev>
<operator, ]>
<operator, .>
<identifier, head>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, sec>
<operator, ++>
<punctuator, ;>
<identifier, nsect>
<operator, =>
<identifier, CURRENT>
<operator, ->>
<identifier, nr_sectors>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, reset>
<operator, )>
<punctuator, {>
<identifier, reset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, recalibrate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, reset_hd>
<operator, (>
<identifier, CURRENT_DEV>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, recalibrate>
<operator, )>
<punctuator, {>
<identifier, recalibrate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, hd_out>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, hd_info>
<operator, [>
<identifier, CURRENT_DEV>
<operator, ]>
<operator, .>
<identifier, sect>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, WIN_RESTORE>
<operator, ,>
<operator, &>
<identifier, recal_intr>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, WRITE>
<operator, )>
<punctuator, {>
<identifier, hd_out>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, nsect>
<operator, ,>
<identifier, sec>
<operator, ,>
<identifier, head>
<operator, ,>
<identifier, cyl>
<operator, ,>
<identifier, WIN_WRITE>
<operator, ,>
<operator, &>
<identifier, write_intr>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 3000>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<identifier, r>
<operator, =>
<identifier, inb_p>
<operator, (>
<identifier, HD_STATUS>
<operator, )>
<operator, &>
<identifier, DRQ_STAT>
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, r>
<operator, )>
<punctuator, {>
<identifier, bad_rw_intr>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, port_write>
<operator, (>
<identifier, HD_DATA>
<operator, ,>
<identifier, CURRENT>
<operator, ->>
<identifier, buffer>
<operator, ,>
<integer_constant, 256>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, CURRENT>
<operator, ->>
<identifier, cmd>
<operator, ==>
<identifier, READ>
<operator, )>
<punctuator, {>
<identifier, hd_out>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, nsect>
<operator, ,>
<identifier, sec>
<operator, ,>
<identifier, head>
<operator, ,>
<identifier, cyl>
<operator, ,>
<identifier, WIN_READ>
<operator, ,>
<operator, &>
<identifier, read_intr>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, panic>
<operator, (>
<string_literal, "unknown hd-command">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, hd_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, blk_dev>
<operator, [>
<identifier, MAJOR_NR>
<operator, ]>
<operator, .>
<identifier, request_fn>
<operator, =>
<identifier, DEVICE_REQUEST>
<punctuator, ;>
<identifier, set_intr_gate>
<operator, (>
<integer_constant, 0x2E>
<operator, ,>
<operator, &>
<identifier, hd_interrupt>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x21>
<operator, )>
<operator, &>
<integer_constant, 0xfb>
<operator, ,>
<integer_constant, 0x21>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0xA1>
<operator, )>
<operator, &>
<integer_constant, 0xbf>
<operator, ,>
<integer_constant, 0xA1>
<operator, )>
<punctuator, ;>
<punctuator, }>
