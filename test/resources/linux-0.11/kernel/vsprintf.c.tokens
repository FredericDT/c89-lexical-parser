<punctuator, #>
<identifier, include>
<header_name, <stdarg.h>>
<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<operator, #>
<identifier, define>
<identifier, is_digit>
<operator, (>
<identifier, c>
<operator, )>
<operator, (>
<operator, (>
<identifier, c>
<operator, )>
<operator, >>
<operator, =>
<character_constant, '0'>
<operator, &>
<operator, &>
<operator, (>
<identifier, c>
<operator, )>
<operator, <>
<operator, =>
<character_constant, '9'>
<operator, )>
<keyword, static>
<keyword, int>
<identifier, skip_atoi>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<operator, *>
<identifier, s>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, is_digit>
<operator, (>
<operator, *>
<operator, *>
<identifier, s>
<operator, )>
<operator, )>
<identifier, i>
<operator, =>
<identifier, i>
<operator, *>
<integer_constant, 10>
<operator, +>
<operator, *>
<operator, (>
<operator, (>
<operator, *>
<identifier, s>
<operator, )>
<operator, ++>
<operator, )>
<operator, ->
<character_constant, '0'>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, ZEROPAD>
<integer_constant, 1>
<operator, #>
<identifier, define>
<identifier, SIGN>
<integer_constant, 2>
<operator, #>
<identifier, define>
<identifier, PLUS>
<integer_constant, 4>
<operator, #>
<identifier, define>
<identifier, SPACE>
<integer_constant, 8>
<operator, #>
<identifier, define>
<identifier, LEFT>
<integer_constant, 16>
<operator, #>
<identifier, define>
<identifier, SPECIAL>
<integer_constant, 32>
<operator, #>
<identifier, define>
<identifier, SMALL>
<integer_constant, 64>
<operator, #>
<identifier, define>
<identifier, do_div>
<operator, (>
<identifier, n>
<operator, ,>
<identifier, base>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, int>
<identifier, __res>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "divl %4">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, n>
<operator, )>
<operator, ,>
<string_literal, "=d">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<identifier, n>
<operator, )>
<operator, ,>
<string_literal, "1">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, base>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<keyword, static>
<keyword, char>
<operator, *>
<identifier, number>
<operator, (>
<keyword, char>
<operator, *>
<identifier, str>
<operator, ,>
<keyword, int>
<identifier, num>
<operator, ,>
<keyword, int>
<identifier, base>
<operator, ,>
<keyword, int>
<identifier, size>
<operator, ,>
<keyword, int>
<identifier, precision>
<operator, ,>
<keyword, int>
<identifier, type>
<operator, )>
<punctuator, {>
<keyword, char>
<identifier, c>
<operator, ,>
<identifier, sign>
<operator, ,>
<identifier, tmp>
<operator, [>
<integer_constant, 36>
<operator, ]>
<punctuator, ;>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, digits>
<operator, =>
<string_literal, "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ">
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, type>
<operator, &>
<identifier, SMALL>
<operator, )>
<identifier, digits>
<operator, =>
<string_literal, "0123456789abcdefghijklmnopqrstuvwxyz">
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, type>
<operator, &>
<identifier, LEFT>
<operator, )>
<identifier, type>
<operator, &>
<operator, =>
<operator, ~>
<identifier, ZEROPAD>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, base>
<operator, <>
<integer_constant, 2>
<operator, |>
<operator, |>
<identifier, base>
<operator, >>
<integer_constant, 36>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, c>
<operator, =>
<operator, (>
<identifier, type>
<operator, &>
<identifier, ZEROPAD>
<operator, )>
<operator, ?>
<character_constant, '0'>
<operator, :>
<character_constant, ' '>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, type>
<operator, &>
<identifier, SIGN>
<operator, &>
<operator, &>
<identifier, num>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, sign>
<operator, =>
<character_constant, '-'>
<punctuator, ;>
<identifier, num>
<operator, =>
<operator, ->
<identifier, num>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, sign>
<operator, =>
<operator, (>
<identifier, type>
<operator, &>
<identifier, PLUS>
<operator, )>
<operator, ?>
<character_constant, '+'>
<operator, :>
<operator, (>
<operator, (>
<identifier, type>
<operator, &>
<identifier, SPACE>
<operator, )>
<operator, ?>
<character_constant, ' '>
<operator, :>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, sign>
<operator, )>
<identifier, size>
<operator, -->
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, type>
<operator, &>
<identifier, SPECIAL>
<operator, )>
<keyword, if>
<operator, (>
<identifier, base>
<operator, ==>
<integer_constant, 16>
<operator, )>
<identifier, size>
<operator, ->
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, base>
<operator, ==>
<integer_constant, 8>
<operator, )>
<identifier, size>
<operator, -->
<punctuator, ;>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, num>
<operator, ==>
<integer_constant, 0>
<operator, )>
<identifier, tmp>
<operator, [>
<identifier, i>
<operator, ++>
<operator, ]>
<operator, =>
<character_constant, '0'>
<punctuator, ;>
<keyword, else>
<keyword, while>
<operator, (>
<identifier, num>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, tmp>
<operator, [>
<identifier, i>
<operator, ++>
<operator, ]>
<operator, =>
<identifier, digits>
<operator, [>
<identifier, do_div>
<operator, (>
<identifier, num>
<operator, ,>
<identifier, base>
<operator, )>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<identifier, precision>
<operator, )>
<identifier, precision>
<operator, =>
<identifier, i>
<punctuator, ;>
<identifier, size>
<operator, ->
<operator, =>
<identifier, precision>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, type>
<operator, &>
<operator, (>
<identifier, ZEROPAD>
<operator, +>
<identifier, LEFT>
<operator, )>
<operator, )>
<operator, )>
<keyword, while>
<operator, (>
<identifier, size>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, sign>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<identifier, sign>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, type>
<operator, &>
<identifier, SPECIAL>
<operator, )>
<keyword, if>
<operator, (>
<identifier, base>
<operator, ==>
<integer_constant, 8>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, '0'>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, base>
<operator, ==>
<integer_constant, 16>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, '0'>
<punctuator, ;>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<identifier, digits>
<operator, [>
<integer_constant, 33>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, type>
<operator, &>
<identifier, LEFT>
<operator, )>
<operator, )>
<keyword, while>
<operator, (>
<identifier, size>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<identifier, c>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, <>
<identifier, precision>
<operator, -->
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, '0'>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<identifier, tmp>
<operator, [>
<identifier, i>
<operator, ]>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, size>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<keyword, return>
<identifier, str>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, vsprintf>
<operator, (>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, fmt>
<operator, ,>
<identifier, va_list>
<identifier, args>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, len>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, str>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, s>
<punctuator, ;>
<keyword, int>
<operator, *>
<identifier, ip>
<punctuator, ;>
<keyword, int>
<identifier, flags>
<punctuator, ;>
<keyword, int>
<identifier, field_width>
<punctuator, ;>
<keyword, int>
<identifier, precision>
<punctuator, ;>
<keyword, int>
<identifier, qualifier>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, str>
<operator, =>
<identifier, buf>
<punctuator, ;>
<operator, *>
<identifier, fmt>
<punctuator, ;>
<operator, ++>
<identifier, fmt>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, !>
<operator, =>
<character_constant, '%'>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<operator, *>
<identifier, fmt>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<identifier, flags>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, repeat>
<operator, :>
<operator, ++>
<identifier, fmt>
<punctuator, ;>
<keyword, switch>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, )>
<punctuator, {>
<keyword, case>
<character_constant, '-'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, LEFT>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, case>
<character_constant, '+'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, PLUS>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, case>
<character_constant, ' '>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, SPACE>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, case>
<character_constant, '#'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, SPECIAL>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, case>
<character_constant, '0'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, ZEROPAD>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, field_width>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, is_digit>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, )>
<operator, )>
<identifier, field_width>
<operator, =>
<identifier, skip_atoi>
<operator, (>
<operator, &>
<identifier, fmt>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, '*'>
<operator, )>
<punctuator, {>
<identifier, field_width>
<operator, =>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, int>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, field_width>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, field_width>
<operator, =>
<operator, ->
<identifier, field_width>
<punctuator, ;>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, LEFT>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, precision>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, '.'>
<operator, )>
<punctuator, {>
<operator, ++>
<identifier, fmt>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, is_digit>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, )>
<operator, )>
<identifier, precision>
<operator, =>
<identifier, skip_atoi>
<operator, (>
<operator, &>
<identifier, fmt>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, '*'>
<operator, )>
<punctuator, {>
<identifier, precision>
<operator, =>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, int>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, precision>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, precision>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, qualifier>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, 'h'>
<operator, |>
<operator, |>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, 'l'>
<operator, |>
<operator, |>
<operator, *>
<identifier, fmt>
<operator, ==>
<character_constant, 'L'>
<operator, )>
<punctuator, {>
<identifier, qualifier>
<operator, =>
<operator, *>
<identifier, fmt>
<punctuator, ;>
<operator, ++>
<identifier, fmt>
<punctuator, ;>
<punctuator, }>
<keyword, switch>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, )>
<punctuator, {>
<keyword, case>
<character_constant, 'c'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, flags>
<operator, &>
<identifier, LEFT>
<operator, )>
<operator, )>
<keyword, while>
<operator, (>
<operator, -->
<identifier, field_width>
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, )>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, int>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, field_width>
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 's'>
<operator, :>
<identifier, s>
<operator, =>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, char>
<operator, *>
<operator, )>
<punctuator, ;>
<identifier, len>
<operator, =>
<identifier, strlen>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, precision>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, precision>
<operator, =>
<identifier, len>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, len>
<operator, >>
<identifier, precision>
<operator, )>
<identifier, len>
<operator, =>
<identifier, precision>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, flags>
<operator, &>
<identifier, LEFT>
<operator, )>
<operator, )>
<keyword, while>
<operator, (>
<identifier, len>
<operator, <>
<identifier, field_width>
<operator, -->
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, len>
<punctuator, ;>
<operator, ++>
<identifier, i>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<operator, *>
<identifier, s>
<operator, ++>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, len>
<operator, <>
<identifier, field_width>
<operator, -->
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, ' '>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'o'>
<operator, :>
<identifier, str>
<operator, =>
<identifier, number>
<operator, (>
<identifier, str>
<operator, ,>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, )>
<operator, ,>
<integer_constant, 8>
<operator, ,>
<identifier, field_width>
<operator, ,>
<identifier, precision>
<operator, ,>
<identifier, flags>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'p'>
<operator, :>
<keyword, if>
<operator, (>
<identifier, field_width>
<operator, ==>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, field_width>
<operator, =>
<integer_constant, 8>
<punctuator, ;>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, ZEROPAD>
<punctuator, ;>
<punctuator, }>
<identifier, str>
<operator, =>
<identifier, number>
<operator, (>
<identifier, str>
<operator, ,>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, void>
<operator, *>
<operator, )>
<operator, ,>
<integer_constant, 16>
<operator, ,>
<identifier, field_width>
<operator, ,>
<identifier, precision>
<operator, ,>
<identifier, flags>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'x'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, SMALL>
<punctuator, ;>
<keyword, case>
<character_constant, 'X'>
<operator, :>
<identifier, str>
<operator, =>
<identifier, number>
<operator, (>
<identifier, str>
<operator, ,>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, )>
<operator, ,>
<integer_constant, 16>
<operator, ,>
<identifier, field_width>
<operator, ,>
<identifier, precision>
<operator, ,>
<identifier, flags>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'd'>
<operator, :>
<keyword, case>
<character_constant, 'i'>
<operator, :>
<identifier, flags>
<operator, |>
<operator, =>
<identifier, SIGN>
<punctuator, ;>
<keyword, case>
<character_constant, 'u'>
<operator, :>
<identifier, str>
<operator, =>
<identifier, number>
<operator, (>
<identifier, str>
<operator, ,>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, )>
<operator, ,>
<integer_constant, 10>
<operator, ,>
<identifier, field_width>
<operator, ,>
<identifier, precision>
<operator, ,>
<identifier, flags>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'n'>
<operator, :>
<identifier, ip>
<operator, =>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, int>
<operator, *>
<operator, )>
<punctuator, ;>
<operator, *>
<identifier, ip>
<operator, =>
<operator, (>
<identifier, str>
<operator, ->
<identifier, buf>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, default>
<operator, :>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, !>
<operator, =>
<character_constant, '%'>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<character_constant, '%'>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, *>
<identifier, fmt>
<operator, )>
<operator, *>
<identifier, str>
<operator, ++>
<operator, =>
<operator, *>
<identifier, fmt>
<punctuator, ;>
<keyword, else>
<operator, -->
<identifier, fmt>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<operator, *>
<identifier, str>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<keyword, return>
<identifier, str>
<operator, ->
<identifier, buf>
<punctuator, ;>
<punctuator, }>
