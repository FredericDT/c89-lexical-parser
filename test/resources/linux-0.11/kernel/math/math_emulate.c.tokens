<punctuator, #>
<identifier, include>
<header_name, <signal.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<keyword, void>
<identifier, math_emulate>
<operator, (>
<keyword, long>
<identifier, edi>
<operator, ,>
<keyword, long>
<identifier, esi>
<operator, ,>
<keyword, long>
<identifier, ebp>
<operator, ,>
<keyword, long>
<identifier, sys_call_ret>
<operator, ,>
<keyword, long>
<identifier, eax>
<operator, ,>
<keyword, long>
<identifier, ebx>
<operator, ,>
<keyword, long>
<identifier, ecx>
<operator, ,>
<keyword, long>
<identifier, edx>
<operator, ,>
<keyword, unsigned>
<keyword, short>
<identifier, fs>
<operator, ,>
<keyword, unsigned>
<keyword, short>
<identifier, es>
<operator, ,>
<keyword, unsigned>
<keyword, short>
<identifier, ds>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<identifier, eip>
<operator, ,>
<keyword, unsigned>
<keyword, short>
<identifier, cs>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<identifier, eflags>
<operator, ,>
<keyword, unsigned>
<keyword, short>
<identifier, ss>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<identifier, esp>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, char>
<identifier, first>
<operator, ,>
<identifier, second>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, cs>
<operator, !>
<operator, =>
<integer_constant, 0x000F>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "math_emulate: %04x:%08x\n\r">
<operator, ,>
<identifier, cs>
<operator, ,>
<identifier, eip>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "Math emulation needed in kernel">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, first>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<operator, (>
<operator, *>
<operator, &>
<identifier, eip>
<operator, )>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, second>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<operator, (>
<operator, *>
<operator, &>
<identifier, eip>
<operator, )>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%04x:%08x %02x %02x\n\r">
<operator, ,>
<identifier, cs>
<operator, ,>
<identifier, eip>
<operator, ->
<integer_constant, 2>
<operator, ,>
<identifier, first>
<operator, ,>
<identifier, second>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGFPE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, math_error>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "fnclex">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, )>
<identifier, last_task_used_math>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGFPE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
