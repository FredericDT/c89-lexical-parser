<punctuator, #>
<identifier, include>
<header_name, <ctype.h>>
<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <signal.h>>
<operator, #>
<identifier, define>
<identifier, ALRMMASK>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGALRM>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, KILLMASK>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGKILL>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, INTMASK>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGINT>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, QUITMASK>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGQUIT>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, TSTPMASK>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGTSTP>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/tty.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<operator, #>
<identifier, define>
<identifier, _L_FLAG>
<operator, (>
<identifier, tty>
<operator, ,>
<identifier, f>
<operator, )>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ->>
<identifier, termios>
<operator, .>
<identifier, c_lflag>
<operator, &>
<identifier, f>
<operator, )>
<operator, #>
<identifier, define>
<identifier, _I_FLAG>
<operator, (>
<identifier, tty>
<operator, ,>
<identifier, f>
<operator, )>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ->>
<identifier, termios>
<operator, .>
<identifier, c_iflag>
<operator, &>
<identifier, f>
<operator, )>
<operator, #>
<identifier, define>
<identifier, _O_FLAG>
<operator, (>
<identifier, tty>
<operator, ,>
<identifier, f>
<operator, )>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ->>
<identifier, termios>
<operator, .>
<identifier, c_oflag>
<operator, &>
<identifier, f>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ICANON>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ISIG>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ISIG>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ECHO>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ECHO>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ECHOE>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ECHOE>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ECHOK>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ECHOK>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ECHOCTL>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ECHOCTL>
<operator, )>
<operator, #>
<identifier, define>
<identifier, L_ECHOKE>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _L_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ECHOKE>
<operator, )>
<operator, #>
<identifier, define>
<identifier, I_UCLC>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _I_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, IUCLC>
<operator, )>
<operator, #>
<identifier, define>
<identifier, I_NLCR>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _I_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, INLCR>
<operator, )>
<operator, #>
<identifier, define>
<identifier, I_CRNL>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _I_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ICRNL>
<operator, )>
<operator, #>
<identifier, define>
<identifier, I_NOCR>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _I_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, IGNCR>
<operator, )>
<operator, #>
<identifier, define>
<identifier, O_POST>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _O_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, OPOST>
<operator, )>
<operator, #>
<identifier, define>
<identifier, O_NLCR>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _O_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ONLCR>
<operator, )>
<operator, #>
<identifier, define>
<identifier, O_CRNL>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _O_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, OCRNL>
<operator, )>
<operator, #>
<identifier, define>
<identifier, O_NLRET>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _O_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, ONLRET>
<operator, )>
<operator, #>
<identifier, define>
<identifier, O_LCUC>
<operator, (>
<identifier, tty>
<operator, )>
<identifier, _O_FLAG>
<operator, (>
<operator, (>
<identifier, tty>
<operator, )>
<operator, ,>
<identifier, OLCUC>
<operator, )>
<keyword, struct>
<identifier, tty_struct>
<identifier, tty_table>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<punctuator, {>
<identifier, ICRNL>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, B2400>
<operator, |>
<identifier, CS8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, INIT_C_CC>
<punctuator, }>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, rs_write>
<operator, ,>
<punctuator, {>
<integer_constant, 0x3f8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0x3f8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<punctuator, }>
<operator, ,>
<punctuator, {>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, B2400>
<operator, |>
<identifier, CS8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, INIT_C_CC>
<punctuator, }>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<identifier, rs_write>
<operator, ,>
<punctuator, {>
<integer_constant, 0x2f8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0x2f8>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<operator, ,>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<string_literal, "">
<punctuator, }>
<punctuator, }>
<punctuator, }>
<punctuator, ;>
<keyword, struct>
<identifier, tty_queue>
<operator, *>
<identifier, table_list>
<operator, [>
<operator, ]>
<operator, =>
<punctuator, {>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, read_q>
<operator, ,>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, write_q>
<operator, ,>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, .>
<identifier, read_q>
<operator, ,>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, .>
<identifier, write_q>
<operator, ,>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, .>
<identifier, read_q>
<operator, ,>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, .>
<identifier, write_q>
<punctuator, }>
<punctuator, ;>
<keyword, void>
<identifier, tty_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, rs_init>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, con_init>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, tty_intr>
<operator, (>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<operator, ,>
<keyword, int>
<identifier, mask>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, pgrp>
<operator, <>
<operator, =>
<integer_constant, 0>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, &>
<operator, &>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, pgrp>
<operator, ==>
<identifier, tty>
<operator, ->>
<identifier, pgrp>
<operator, )>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<identifier, mask>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, sleep_if_empty>
<operator, (>
<keyword, struct>
<identifier, tty_queue>
<operator, *>
<identifier, queue>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, &>
<identifier, EMPTY>
<operator, (>
<operator, *>
<identifier, queue>
<operator, )>
<operator, )>
<identifier, interruptible_sleep_on>
<operator, (>
<operator, &>
<identifier, queue>
<operator, ->>
<identifier, proc_list>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, sleep_if_full>
<operator, (>
<keyword, struct>
<identifier, tty_queue>
<operator, *>
<identifier, queue>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, FULL>
<operator, (>
<operator, *>
<identifier, queue>
<operator, )>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, &>
<identifier, LEFT>
<operator, (>
<operator, *>
<identifier, queue>
<operator, )>
<operator, <>
<integer_constant, 128>
<operator, )>
<identifier, interruptible_sleep_on>
<operator, (>
<operator, &>
<identifier, queue>
<operator, ->>
<identifier, proc_list>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, wait_for_keypress>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, sleep_if_empty>
<operator, (>
<operator, &>
<identifier, tty_table>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, secondary>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, copy_to_cooked>
<operator, (>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<operator, )>
<punctuator, {>
<keyword, signed>
<keyword, char>
<identifier, c>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, !>
<identifier, EMPTY>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, read_q>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<identifier, FULL>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, GETCH>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, read_q>
<operator, ,>
<identifier, c>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 13>
<operator, )>
<keyword, if>
<operator, (>
<identifier, I_CRNL>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<integer_constant, 10>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, I_NOCR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, else>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 10>
<operator, &>
<operator, &>
<identifier, I_NLCR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<integer_constant, 13>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, I_UCLC>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<identifier, tolower>
<operator, (>
<identifier, c>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, KILL_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, while>
<operator, (>
<operator, !>
<operator, (>
<identifier, EMPTY>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, c>
<operator, =>
<identifier, LAST>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, )>
<operator, ==>
<integer_constant, 10>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<identifier, EOF_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, L_ECHO>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, <>
<integer_constant, 32>
<operator, )>
<identifier, PUTCH>
<operator, (>
<integer_constant, 127>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<integer_constant, 127>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, tty>
<operator, ->>
<identifier, write>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, DEC>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, head>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, ERASE_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, EMPTY>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, c>
<operator, =>
<identifier, LAST>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, )>
<operator, ==>
<integer_constant, 10>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<identifier, EOF_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, L_ECHO>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, <>
<integer_constant, 32>
<operator, )>
<identifier, PUTCH>
<operator, (>
<integer_constant, 127>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<integer_constant, 127>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, tty>
<operator, ->>
<identifier, write>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, DEC>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, head>
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, STOP_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, tty>
<operator, ->>
<identifier, stopped>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, START_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, tty>
<operator, ->>
<identifier, stopped>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, L_ISIG>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, INTR_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, tty_intr>
<operator, (>
<identifier, tty>
<operator, ,>
<identifier, INTMASK>
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, QUIT_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, tty_intr>
<operator, (>
<identifier, tty>
<operator, ,>
<identifier, QUITMASK>
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 10>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<identifier, EOF_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, data>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, L_ECHO>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 10>
<operator, )>
<punctuator, {>
<identifier, PUTCH>
<operator, (>
<integer_constant, 10>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<integer_constant, 13>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, <>
<integer_constant, 32>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, L_ECHOCTL>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, PUTCH>
<operator, (>
<character_constant, '^'>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<identifier, c>
<operator, +>
<integer_constant, 64>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<identifier, PUTCH>
<operator, (>
<identifier, c>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<identifier, tty>
<operator, ->>
<identifier, write>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, PUTCH>
<operator, (>
<identifier, c>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, proc_list>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, tty_read>
<operator, (>
<keyword, unsigned>
<identifier, channel>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<punctuator, ;>
<keyword, char>
<identifier, c>
<operator, ,>
<operator, *>
<identifier, b>
<operator, =>
<identifier, buf>
<punctuator, ;>
<keyword, int>
<identifier, minimum>
<operator, ,>
<identifier, time>
<operator, ,>
<identifier, flag>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, long>
<identifier, oldalarm>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, channel>
<operator, >>
<integer_constant, 2>
<operator, |>
<operator, |>
<identifier, nr>
<operator, <>
<integer_constant, 0>
<operator, )>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, tty>
<operator, =>
<operator, &>
<identifier, tty_table>
<operator, [>
<identifier, channel>
<operator, ]>
<punctuator, ;>
<identifier, oldalarm>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, alarm>
<punctuator, ;>
<identifier, time>
<operator, =>
<integer_constant, 10L>
<operator, *>
<identifier, tty>
<operator, ->>
<identifier, termios>
<operator, .>
<identifier, c_cc>
<operator, [>
<identifier, VTIME>
<operator, ]>
<punctuator, ;>
<identifier, minimum>
<operator, =>
<identifier, tty>
<operator, ->>
<identifier, termios>
<operator, .>
<identifier, c_cc>
<operator, [>
<identifier, VMIN>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, time>
<operator, &>
<operator, &>
<operator, !>
<identifier, minimum>
<operator, )>
<punctuator, {>
<identifier, minimum>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, =>
<operator, (>
<operator, !>
<identifier, oldalarm>
<operator, |>
<operator, |>
<identifier, time>
<operator, +>
<identifier, jiffies>
<operator, <>
<identifier, oldalarm>
<operator, )>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, alarm>
<operator, =>
<identifier, time>
<operator, +>
<identifier, jiffies>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, minimum>
<operator, >>
<identifier, nr>
<operator, )>
<identifier, minimum>
<operator, =>
<identifier, nr>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, &>
<operator, &>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<identifier, ALRMMASK>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, =>
<operator, ~>
<identifier, ALRMMASK>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, EMPTY>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, data>
<operator, &>
<operator, &>
<identifier, LEFT>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, >>
<integer_constant, 20>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, sleep_if_empty>
<operator, (>
<operator, &>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, do>
<punctuator, {>
<identifier, GETCH>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, ,>
<identifier, c>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, EOF_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<integer_constant, 10>
<operator, )>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, .>
<identifier, data>
<operator, -->
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, EOF_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, &>
<operator, &>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<keyword, return>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, )>
<punctuator, ;>
<keyword, else>
<punctuator, {>
<identifier, put_fs_byte>
<operator, (>
<identifier, c>
<operator, ,>
<identifier, b>
<operator, ++>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, -->
<identifier, nr>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 0>
<operator, &>
<operator, &>
<operator, !>
<identifier, EMPTY>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, secondary>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, time>
<operator, &>
<operator, &>
<operator, !>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, =>
<operator, (>
<operator, !>
<identifier, oldalarm>
<operator, |>
<operator, |>
<identifier, time>
<operator, +>
<identifier, jiffies>
<operator, <>
<identifier, oldalarm>
<operator, )>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, alarm>
<operator, =>
<identifier, time>
<operator, +>
<identifier, jiffies>
<punctuator, ;>
<keyword, else>
<identifier, current>
<operator, ->>
<identifier, alarm>
<operator, =>
<identifier, oldalarm>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, L_CANON>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, >>
<operator, =>
<identifier, minimum>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<identifier, current>
<operator, ->>
<identifier, alarm>
<operator, =>
<identifier, oldalarm>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINTR>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, tty_write>
<operator, (>
<keyword, unsigned>
<identifier, channel>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, static>
<identifier, cr_flag>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<punctuator, ;>
<keyword, char>
<identifier, c>
<operator, ,>
<operator, *>
<identifier, b>
<operator, =>
<identifier, buf>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, channel>
<operator, >>
<integer_constant, 2>
<operator, |>
<operator, |>
<identifier, nr>
<operator, <>
<integer_constant, 0>
<operator, )>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, tty>
<operator, =>
<identifier, channel>
<operator, +>
<identifier, tty_table>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, sleep_if_full>
<operator, (>
<operator, &>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 0>
<operator, &>
<operator, &>
<operator, !>
<identifier, FULL>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, c>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, b>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, O_POST>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '\r'>
<operator, &>
<operator, &>
<identifier, O_CRNL>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<character_constant, '\n'>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '\n'>
<operator, &>
<operator, &>
<identifier, O_NLRET>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<character_constant, '\r'>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '\n'>
<operator, &>
<operator, &>
<operator, !>
<identifier, cr_flag>
<operator, &>
<operator, &>
<identifier, O_NLCR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, cr_flag>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<integer_constant, 13>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, O_LCUC>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<identifier, toupper>
<operator, (>
<identifier, c>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, b>
<operator, ++>
<punctuator, ;>
<identifier, nr>
<operator, -->
<punctuator, ;>
<identifier, cr_flag>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, PUTCH>
<operator, (>
<identifier, c>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, tty>
<operator, ->>
<identifier, write>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<operator, (>
<identifier, b>
<operator, ->
<identifier, buf>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_tty_interrupt>
<operator, (>
<keyword, int>
<identifier, tty>
<operator, )>
<punctuator, {>
<identifier, copy_to_cooked>
<operator, (>
<identifier, tty_table>
<operator, +>
<identifier, tty>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, chr_dev_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<punctuator, }>
