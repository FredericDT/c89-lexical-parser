<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/tty.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<operator, #>
<identifier, define>
<identifier, ORIG_X>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, *>
<operator, )>
<integer_constant, 0x90000>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_Y>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, char>
<operator, *>
<operator, )>
<integer_constant, 0x90001>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_PAGE>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x90004>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_MODE>
<operator, (>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x90006>
<operator, )>
<operator, &>
<integer_constant, 0xff>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_COLS>
<operator, (>
<operator, (>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x90006>
<operator, )>
<operator, &>
<integer_constant, 0xff00>
<operator, )>
<operator, >>>
<integer_constant, 8>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_LINES>
<operator, (>
<integer_constant, 25>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_EGA_AX>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x90008>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_EGA_BX>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x9000a>
<operator, )>
<operator, #>
<identifier, define>
<identifier, ORIG_VIDEO_EGA_CX>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<integer_constant, 0x9000c>
<operator, )>
<operator, #>
<identifier, define>
<identifier, VIDEO_TYPE_MDA>
<integer_constant, 0x10>
<operator, #>
<identifier, define>
<identifier, VIDEO_TYPE_CGA>
<integer_constant, 0x11>
<operator, #>
<identifier, define>
<identifier, VIDEO_TYPE_EGAM>
<integer_constant, 0x20>
<operator, #>
<identifier, define>
<identifier, VIDEO_TYPE_EGAC>
<integer_constant, 0x21>
<operator, #>
<identifier, define>
<identifier, NPAR>
<integer_constant, 16>
<keyword, extern>
<keyword, void>
<identifier, keyboard_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, video_type>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, video_num_columns>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, video_size_row>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, video_num_lines>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, video_page>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, video_mem_start>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, video_mem_end>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, short>
<identifier, video_port_reg>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, short>
<identifier, video_port_val>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, short>
<identifier, video_erase_char>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, origin>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, scr_end>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, pos>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, x>
<operator, ,>
<identifier, y>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, top>
<operator, ,>
<identifier, bottom>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, npar>
<operator, ,>
<identifier, par>
<operator, [>
<identifier, NPAR>
<operator, ]>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, ques>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, unsigned>
<keyword, char>
<identifier, attr>
<operator, =>
<integer_constant, 0x07>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, sysbeep>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, RESPONSE>
<string_literal, "\033[?1;2c">
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, gotoxy>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, new_x>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, new_y>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, new_x>
<operator, >>
<identifier, video_num_columns>
<operator, |>
<operator, |>
<identifier, new_y>
<operator, >>
<operator, =>
<identifier, video_num_lines>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, x>
<operator, =>
<identifier, new_x>
<punctuator, ;>
<identifier, y>
<operator, =>
<identifier, new_y>
<punctuator, ;>
<identifier, pos>
<operator, =>
<identifier, origin>
<operator, +>
<identifier, y>
<operator, *>
<identifier, video_size_row>
<operator, +>
<operator, (>
<identifier, x>
<operator, <<>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, set_origin>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 12>
<operator, ,>
<identifier, video_port_reg>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xff>
<operator, &>
<operator, (>
<operator, (>
<identifier, origin>
<operator, ->
<identifier, video_mem_start>
<operator, )>
<operator, >>>
<integer_constant, 9>
<operator, )>
<operator, ,>
<identifier, video_port_val>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 13>
<operator, ,>
<identifier, video_port_reg>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xff>
<operator, &>
<operator, (>
<operator, (>
<identifier, origin>
<operator, ->
<identifier, video_mem_start>
<operator, )>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<identifier, video_port_val>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, scrup>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, video_type>
<operator, ==>
<identifier, VIDEO_TYPE_EGAC>
<operator, |>
<operator, |>
<identifier, video_type>
<operator, ==>
<identifier, VIDEO_TYPE_EGAM>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, top>
<operator, &>
<operator, &>
<identifier, bottom>
<operator, ==>
<identifier, video_num_lines>
<operator, )>
<punctuator, {>
<identifier, origin>
<operator, +>
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<identifier, scr_end>
<operator, +>
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, scr_end>
<operator, >>
<identifier, video_mem_end>
<operator, )>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "movsl\n\t">
<string_literal, "movl _video_num_columns,%1\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<operator, (>
<identifier, video_num_lines>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, *>
<identifier, video_num_columns>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, video_mem_start>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, origin>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<identifier, scr_end>
<operator, ->
<operator, =>
<identifier, origin>
<operator, ->
<identifier, video_mem_start>
<punctuator, ;>
<identifier, pos>
<operator, ->
<operator, =>
<identifier, origin>
<operator, ->
<identifier, video_mem_start>
<punctuator, ;>
<identifier, origin>
<operator, =>
<identifier, video_mem_start>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, video_num_columns>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, scr_end>
<operator, ->
<identifier, video_size_row>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, set_origin>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "movsl\n\t">
<string_literal, "movl _video_num_columns,%%ecx\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<operator, (>
<identifier, bottom>
<operator, ->
<identifier, top>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, *>
<identifier, video_num_columns>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<identifier, top>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<operator, (>
<identifier, top>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "movsl\n\t">
<string_literal, "movl _video_num_columns,%%ecx\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<operator, (>
<identifier, bottom>
<operator, ->
<identifier, top>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, *>
<identifier, video_num_columns>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<identifier, top>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<operator, (>
<identifier, top>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, scrdown>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, video_type>
<operator, ==>
<identifier, VIDEO_TYPE_EGAC>
<operator, |>
<operator, |>
<identifier, video_type>
<operator, ==>
<identifier, VIDEO_TYPE_EGAM>
<operator, )>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "std\n\t">
<string_literal, "rep\n\t">
<string_literal, "movsl\n\t">
<string_literal, "addl $2,%%edi\n\t">
<string_literal, "movl _video_num_columns,%%ecx\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<operator, (>
<identifier, bottom>
<operator, ->
<identifier, top>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, *>
<identifier, video_num_columns>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<identifier, bottom>
<operator, ->
<integer_constant, 4>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<operator, (>
<identifier, bottom>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, ->
<integer_constant, 4>
<operator, )>
<operator, :>
<string_literal, "ax">
<operator, ,>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "std\n\t">
<string_literal, "rep\n\t">
<string_literal, "movsl\n\t">
<string_literal, "addl $2,%%edi\n\t">
<string_literal, "movl _video_num_columns,%%ecx\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<operator, (>
<identifier, bottom>
<operator, ->
<identifier, top>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, *>
<identifier, video_num_columns>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<identifier, bottom>
<operator, ->
<integer_constant, 4>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, origin>
<operator, +>
<identifier, video_size_row>
<operator, *>
<operator, (>
<identifier, bottom>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, ->
<integer_constant, 4>
<operator, )>
<operator, :>
<string_literal, "ax">
<operator, ,>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, lf>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, y>
<operator, +>
<integer_constant, 1>
<operator, <>
<identifier, bottom>
<operator, )>
<punctuator, {>
<identifier, y>
<operator, ++>
<punctuator, ;>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, scrup>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, ri>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, y>
<operator, >>
<identifier, top>
<operator, )>
<punctuator, {>
<identifier, y>
<operator, -->
<punctuator, ;>
<identifier, pos>
<operator, ->
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, scrdown>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, cr>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, pos>
<operator, ->
<operator, =>
<identifier, x>
<operator, <<>
<integer_constant, 1>
<punctuator, ;>
<identifier, x>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, del>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, x>
<operator, )>
<punctuator, {>
<identifier, pos>
<operator, ->
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, x>
<operator, -->
<punctuator, ;>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, pos>
<operator, =>
<identifier, video_erase_char>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_J>
<operator, (>
<keyword, int>
<identifier, par>
<operator, )>
<punctuator, {>
<keyword, long>
<identifier, count>
<identifier, __asm__>
<operator, (>
<string_literal, "cx">
<operator, )>
<punctuator, ;>
<keyword, long>
<identifier, start>
<identifier, __asm__>
<operator, (>
<string_literal, "di">
<operator, )>
<punctuator, ;>
<keyword, switch>
<operator, (>
<identifier, par>
<operator, )>
<punctuator, {>
<keyword, case>
<integer_constant, 0>
<operator, :>
<identifier, count>
<operator, =>
<operator, (>
<identifier, scr_end>
<operator, ->
<identifier, pos>
<operator, )>
<operator, >>>
<integer_constant, 1>
<punctuator, ;>
<identifier, start>
<operator, =>
<identifier, pos>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 1>
<operator, :>
<identifier, count>
<operator, =>
<operator, (>
<identifier, pos>
<operator, ->
<identifier, origin>
<operator, )>
<operator, >>>
<integer_constant, 1>
<punctuator, ;>
<identifier, start>
<operator, =>
<identifier, origin>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 2>
<operator, :>
<identifier, count>
<operator, =>
<identifier, video_num_columns>
<operator, *>
<identifier, video_num_lines>
<punctuator, ;>
<identifier, start>
<operator, =>
<identifier, origin>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, default>
<operator, :>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw\n\t">
<operator, :>
<operator, :>
<string_literal, "c">
<operator, (>
<identifier, count>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, start>
<operator, )>
<operator, ,>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_K>
<operator, (>
<keyword, int>
<identifier, par>
<operator, )>
<punctuator, {>
<keyword, long>
<identifier, count>
<identifier, __asm__>
<operator, (>
<string_literal, "cx">
<operator, )>
<punctuator, ;>
<keyword, long>
<identifier, start>
<identifier, __asm__>
<operator, (>
<string_literal, "di">
<operator, )>
<punctuator, ;>
<keyword, switch>
<operator, (>
<identifier, par>
<operator, )>
<punctuator, {>
<keyword, case>
<integer_constant, 0>
<operator, :>
<keyword, if>
<operator, (>
<identifier, x>
<operator, >>
<operator, =>
<identifier, video_num_columns>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, count>
<operator, =>
<identifier, video_num_columns>
<operator, ->
<identifier, x>
<punctuator, ;>
<identifier, start>
<operator, =>
<identifier, pos>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 1>
<operator, :>
<identifier, start>
<operator, =>
<identifier, pos>
<operator, ->
<operator, (>
<identifier, x>
<operator, <<>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, count>
<operator, =>
<operator, (>
<identifier, x>
<operator, <>
<identifier, video_num_columns>
<operator, )>
<operator, ?>
<identifier, x>
<operator, :>
<identifier, video_num_columns>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 2>
<operator, :>
<identifier, start>
<operator, =>
<identifier, pos>
<operator, ->
<operator, (>
<identifier, x>
<operator, <<>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, count>
<operator, =>
<identifier, video_num_columns>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, default>
<operator, :>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "rep\n\t">
<string_literal, "stosw\n\t">
<operator, :>
<operator, :>
<string_literal, "c">
<operator, (>
<identifier, count>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, start>
<operator, )>
<operator, ,>
<string_literal, "a">
<operator, (>
<identifier, video_erase_char>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, csi_m>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<operator, =>
<identifier, npar>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, switch>
<operator, (>
<identifier, par>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<keyword, case>
<integer_constant, 0>
<operator, :>
<identifier, attr>
<operator, =>
<integer_constant, 0x07>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 1>
<operator, :>
<identifier, attr>
<operator, =>
<integer_constant, 0x0f>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 4>
<operator, :>
<identifier, attr>
<operator, =>
<integer_constant, 0x0f>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 7>
<operator, :>
<identifier, attr>
<operator, =>
<integer_constant, 0x70>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 27>
<operator, :>
<identifier, attr>
<operator, =>
<integer_constant, 0x07>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, set_cursor>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 14>
<operator, ,>
<identifier, video_port_reg>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xff>
<operator, &>
<operator, (>
<operator, (>
<identifier, pos>
<operator, ->
<identifier, video_mem_start>
<operator, )>
<operator, >>>
<integer_constant, 9>
<operator, )>
<operator, ,>
<identifier, video_port_val>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 15>
<operator, ,>
<identifier, video_port_reg>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xff>
<operator, &>
<operator, (>
<operator, (>
<identifier, pos>
<operator, ->
<identifier, video_mem_start>
<operator, )>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, ,>
<identifier, video_port_val>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, respond>
<operator, (>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<operator, )>
<punctuator, {>
<keyword, char>
<operator, *>
<identifier, p>
<operator, =>
<identifier, RESPONSE>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<identifier, PUTCH>
<operator, (>
<operator, *>
<identifier, p>
<operator, ,>
<identifier, tty>
<operator, ->>
<identifier, read_q>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, copy_to_cooked>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, insert_char>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, =>
<identifier, x>
<punctuator, ;>
<keyword, unsigned>
<keyword, short>
<identifier, tmp>
<operator, ,>
<identifier, old>
<operator, =>
<identifier, video_erase_char>
<punctuator, ;>
<keyword, unsigned>
<keyword, short>
<operator, *>
<identifier, p>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, pos>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, ++>
<operator, <>
<identifier, video_num_columns>
<operator, )>
<punctuator, {>
<identifier, tmp>
<operator, =>
<operator, *>
<identifier, p>
<punctuator, ;>
<operator, *>
<identifier, p>
<operator, =>
<identifier, old>
<punctuator, ;>
<identifier, old>
<operator, =>
<identifier, tmp>
<punctuator, ;>
<identifier, p>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, insert_line>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, oldtop>
<operator, ,>
<identifier, oldbottom>
<punctuator, ;>
<identifier, oldtop>
<operator, =>
<identifier, top>
<punctuator, ;>
<identifier, oldbottom>
<operator, =>
<identifier, bottom>
<punctuator, ;>
<identifier, top>
<operator, =>
<identifier, y>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<identifier, scrdown>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, top>
<operator, =>
<identifier, oldtop>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, oldbottom>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, delete_char>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, unsigned>
<keyword, short>
<operator, *>
<identifier, p>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, pos>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, x>
<operator, >>
<operator, =>
<identifier, video_num_columns>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, x>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, ++>
<identifier, i>
<operator, <>
<identifier, video_num_columns>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, p>
<operator, =>
<operator, *>
<operator, (>
<identifier, p>
<operator, +>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<operator, *>
<identifier, p>
<operator, =>
<identifier, video_erase_char>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, delete_line>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, oldtop>
<operator, ,>
<identifier, oldbottom>
<punctuator, ;>
<identifier, oldtop>
<operator, =>
<identifier, top>
<punctuator, ;>
<identifier, oldbottom>
<operator, =>
<identifier, bottom>
<punctuator, ;>
<identifier, top>
<operator, =>
<identifier, y>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<identifier, scrup>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, top>
<operator, =>
<identifier, oldtop>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, oldbottom>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_at>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<identifier, video_num_columns>
<operator, )>
<identifier, nr>
<operator, =>
<identifier, video_num_columns>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, nr>
<operator, )>
<identifier, nr>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, -->
<operator, )>
<identifier, insert_char>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_L>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<identifier, video_num_lines>
<operator, )>
<identifier, nr>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, nr>
<operator, )>
<identifier, nr>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, -->
<operator, )>
<identifier, insert_line>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_P>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<identifier, video_num_columns>
<operator, )>
<identifier, nr>
<operator, =>
<identifier, video_num_columns>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, nr>
<operator, )>
<identifier, nr>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, -->
<operator, )>
<identifier, delete_char>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, csi_M>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<identifier, video_num_lines>
<operator, )>
<identifier, nr>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, nr>
<operator, )>
<identifier, nr>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, -->
<operator, )>
<identifier, delete_line>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, saved_x>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, saved_y>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, save_cur>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, saved_x>
<operator, =>
<identifier, x>
<punctuator, ;>
<identifier, saved_y>
<operator, =>
<identifier, y>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, restore_cur>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, gotoxy>
<operator, (>
<identifier, saved_x>
<operator, ,>
<identifier, saved_y>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, con_write>
<operator, (>
<keyword, struct>
<identifier, tty_struct>
<operator, *>
<identifier, tty>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, nr>
<punctuator, ;>
<keyword, char>
<identifier, c>
<punctuator, ;>
<identifier, nr>
<operator, =>
<identifier, CHARS>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, -->
<operator, )>
<punctuator, {>
<identifier, GETCH>
<operator, (>
<identifier, tty>
<operator, ->>
<identifier, write_q>
<operator, ,>
<identifier, c>
<operator, )>
<punctuator, ;>
<keyword, switch>
<operator, (>
<identifier, state>
<operator, )>
<punctuator, {>
<keyword, case>
<integer_constant, 0>
<operator, :>
<keyword, if>
<operator, (>
<identifier, c>
<operator, >>
<integer_constant, 31>
<operator, &>
<operator, &>
<identifier, c>
<operator, <>
<integer_constant, 127>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, x>
<operator, >>
<operator, =>
<identifier, video_num_columns>
<operator, )>
<punctuator, {>
<identifier, x>
<operator, ->
<operator, =>
<identifier, video_num_columns>
<punctuator, ;>
<identifier, pos>
<operator, ->
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<identifier, lf>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, __asm__>
<operator, (>
<string_literal, "movb _attr,%%ah\n\t">
<string_literal, "movw %%ax,%1\n\t">
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<identifier, c>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<keyword, short>
<operator, *>
<operator, )>
<identifier, pos>
<operator, )>
<operator, :>
<string_literal, "ax">
<operator, )>
<punctuator, ;>
<identifier, pos>
<operator, +>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, x>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 27>
<operator, )>
<identifier, state>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 10>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<integer_constant, 11>
<operator, |>
<operator, |>
<identifier, c>
<operator, ==>
<integer_constant, 12>
<operator, )>
<identifier, lf>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 13>
<operator, )>
<identifier, cr>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<identifier, ERASE_CHAR>
<operator, (>
<identifier, tty>
<operator, )>
<operator, )>
<identifier, del>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 8>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, x>
<operator, )>
<punctuator, {>
<identifier, x>
<operator, -->
<punctuator, ;>
<identifier, pos>
<operator, ->
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 9>
<operator, )>
<punctuator, {>
<identifier, c>
<operator, =>
<integer_constant, 8>
<operator, ->
<operator, (>
<identifier, x>
<operator, &>
<integer_constant, 7>
<operator, )>
<punctuator, ;>
<identifier, x>
<operator, +>
<operator, =>
<identifier, c>
<punctuator, ;>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, c>
<operator, <<>
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, x>
<operator, >>
<identifier, video_num_columns>
<operator, )>
<punctuator, {>
<identifier, x>
<operator, ->
<operator, =>
<identifier, video_num_columns>
<punctuator, ;>
<identifier, pos>
<operator, ->
<operator, =>
<identifier, video_size_row>
<punctuator, ;>
<identifier, lf>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, c>
<operator, =>
<integer_constant, 9>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<integer_constant, 7>
<operator, )>
<identifier, sysbeep>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 1>
<operator, :>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '['>
<operator, )>
<identifier, state>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, 'E'>
<operator, )>
<identifier, gotoxy>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, y>
<operator, +>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, 'M'>
<operator, )>
<identifier, ri>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, 'D'>
<operator, )>
<identifier, lf>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, 'Z'>
<operator, )>
<identifier, respond>
<operator, (>
<identifier, tty>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, x>
<operator, ==>
<character_constant, '7'>
<operator, )>
<identifier, save_cur>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, x>
<operator, ==>
<character_constant, '8'>
<operator, )>
<identifier, restore_cur>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 2>
<operator, :>
<keyword, for>
<operator, (>
<identifier, npar>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, npar>
<operator, <>
<identifier, NPAR>
<punctuator, ;>
<identifier, npar>
<operator, ++>
<operator, )>
<identifier, par>
<operator, [>
<identifier, npar>
<operator, ]>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, npar>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, state>
<operator, =>
<integer_constant, 3>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, ques>
<operator, =>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '?'>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, case>
<integer_constant, 3>
<operator, :>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, ';'>
<operator, &>
<operator, &>
<identifier, npar>
<operator, <>
<identifier, NPAR>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, npar>
<operator, ++>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, >>
<operator, =>
<character_constant, '0'>
<operator, &>
<operator, &>
<identifier, c>
<operator, <>
<operator, =>
<character_constant, '9'>
<operator, )>
<punctuator, {>
<identifier, par>
<operator, [>
<identifier, npar>
<operator, ]>
<operator, =>
<integer_constant, 10>
<operator, *>
<identifier, par>
<operator, [>
<identifier, npar>
<operator, ]>
<operator, +>
<identifier, c>
<operator, ->
<character_constant, '0'>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, state>
<operator, =>
<integer_constant, 4>
<punctuator, ;>
<keyword, case>
<integer_constant, 4>
<operator, :>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, switch>
<operator, (>
<identifier, c>
<operator, )>
<punctuator, {>
<keyword, case>
<character_constant, 'G'>
<operator, :>
<keyword, case>
<character_constant, '`'>
<operator, :>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, -->
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<identifier, y>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'A'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, x>
<operator, ,>
<identifier, y>
<operator, ->
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'B'>
<operator, :>
<keyword, case>
<character_constant, 'e'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, x>
<operator, ,>
<identifier, y>
<operator, +>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'C'>
<operator, :>
<keyword, case>
<character_constant, 'a'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, x>
<operator, +>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<identifier, y>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'D'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, x>
<operator, ->
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<identifier, y>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'E'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, y>
<operator, +>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'F'>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ++>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, y>
<operator, ->
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'd'>
<operator, :>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, -->
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, x>
<operator, ,>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'H'>
<operator, :>
<keyword, case>
<character_constant, 'f'>
<operator, :>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, -->
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, -->
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'J'>
<operator, :>
<identifier, csi_J>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'K'>
<operator, :>
<identifier, csi_K>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'L'>
<operator, :>
<identifier, csi_L>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'M'>
<operator, :>
<identifier, csi_M>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'P'>
<operator, :>
<identifier, csi_P>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, '@'>
<operator, :>
<identifier, csi_at>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'm'>
<operator, :>
<identifier, csi_m>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'r'>
<operator, :>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, -->
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, <>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, &>
<operator, &>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, <>
<operator, =>
<identifier, video_num_lines>
<operator, )>
<punctuator, {>
<identifier, top>
<operator, =>
<identifier, par>
<operator, [>
<integer_constant, 0>
<operator, ]>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, par>
<operator, [>
<integer_constant, 1>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 's'>
<operator, :>
<identifier, save_cur>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<keyword, case>
<character_constant, 'u'>
<operator, :>
<identifier, restore_cur>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<punctuator, }>
<identifier, set_cursor>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, con_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, register>
<keyword, unsigned>
<keyword, char>
<identifier, a>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, display_desc>
<operator, =>
<string_literal, "????">
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, display_ptr>
<punctuator, ;>
<identifier, video_num_columns>
<operator, =>
<identifier, ORIG_VIDEO_COLS>
<punctuator, ;>
<identifier, video_size_row>
<operator, =>
<identifier, video_num_columns>
<operator, *>
<integer_constant, 2>
<punctuator, ;>
<identifier, video_num_lines>
<operator, =>
<identifier, ORIG_VIDEO_LINES>
<punctuator, ;>
<identifier, video_page>
<operator, =>
<identifier, ORIG_VIDEO_PAGE>
<punctuator, ;>
<identifier, video_erase_char>
<operator, =>
<integer_constant, 0x0720>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, ORIG_VIDEO_MODE>
<operator, ==>
<integer_constant, 7>
<operator, )>
<punctuator, {>
<identifier, video_mem_start>
<operator, =>
<integer_constant, 0xb0000>
<punctuator, ;>
<identifier, video_port_reg>
<operator, =>
<integer_constant, 0x3b4>
<punctuator, ;>
<identifier, video_port_val>
<operator, =>
<integer_constant, 0x3b5>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, ORIG_VIDEO_EGA_BX>
<operator, &>
<integer_constant, 0xff>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0x10>
<operator, )>
<punctuator, {>
<identifier, video_type>
<operator, =>
<identifier, VIDEO_TYPE_EGAM>
<punctuator, ;>
<identifier, video_mem_end>
<operator, =>
<integer_constant, 0xb8000>
<punctuator, ;>
<identifier, display_desc>
<operator, =>
<string_literal, "EGAm">
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, video_type>
<operator, =>
<identifier, VIDEO_TYPE_MDA>
<punctuator, ;>
<identifier, video_mem_end>
<operator, =>
<integer_constant, 0xb2000>
<punctuator, ;>
<identifier, display_desc>
<operator, =>
<string_literal, "*MDA">
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, video_mem_start>
<operator, =>
<integer_constant, 0xb8000>
<punctuator, ;>
<identifier, video_port_reg>
<operator, =>
<integer_constant, 0x3d4>
<punctuator, ;>
<identifier, video_port_val>
<operator, =>
<integer_constant, 0x3d5>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, ORIG_VIDEO_EGA_BX>
<operator, &>
<integer_constant, 0xff>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0x10>
<operator, )>
<punctuator, {>
<identifier, video_type>
<operator, =>
<identifier, VIDEO_TYPE_EGAC>
<punctuator, ;>
<identifier, video_mem_end>
<operator, =>
<integer_constant, 0xbc000>
<punctuator, ;>
<identifier, display_desc>
<operator, =>
<string_literal, "EGAc">
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, video_type>
<operator, =>
<identifier, VIDEO_TYPE_CGA>
<punctuator, ;>
<identifier, video_mem_end>
<operator, =>
<integer_constant, 0xba000>
<punctuator, ;>
<identifier, display_desc>
<operator, =>
<string_literal, "*CGA">
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, display_ptr>
<operator, =>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, video_mem_start>
<operator, )>
<operator, +>
<identifier, video_size_row>
<operator, ->
<integer_constant, 8>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, *>
<identifier, display_desc>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, display_ptr>
<operator, ++>
<operator, =>
<operator, *>
<identifier, display_desc>
<operator, ++>
<punctuator, ;>
<identifier, display_ptr>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, origin>
<operator, =>
<identifier, video_mem_start>
<punctuator, ;>
<identifier, scr_end>
<operator, =>
<identifier, video_mem_start>
<operator, +>
<identifier, video_num_lines>
<operator, *>
<identifier, video_size_row>
<punctuator, ;>
<identifier, top>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bottom>
<operator, =>
<identifier, video_num_lines>
<punctuator, ;>
<identifier, gotoxy>
<operator, (>
<identifier, ORIG_X>
<operator, ,>
<identifier, ORIG_Y>
<operator, )>
<punctuator, ;>
<identifier, set_trap_gate>
<operator, (>
<integer_constant, 0x21>
<operator, ,>
<operator, &>
<identifier, keyboard_interrupt>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x21>
<operator, )>
<operator, &>
<integer_constant, 0xfd>
<operator, ,>
<integer_constant, 0x21>
<operator, )>
<punctuator, ;>
<identifier, a>
<operator, =>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x61>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, a>
<operator, |>
<integer_constant, 0x80>
<operator, ,>
<integer_constant, 0x61>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, a>
<operator, ,>
<integer_constant, 0x61>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, outb>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x61>
<operator, )>
<operator, &>
<integer_constant, 0xFC>
<operator, ,>
<integer_constant, 0x61>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, beepcount>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, sysbeep>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, outb_p>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x61>
<operator, )>
<operator, |>
<integer_constant, 3>
<operator, ,>
<integer_constant, 0x61>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0xB6>
<operator, ,>
<integer_constant, 0x43>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0x37>
<operator, ,>
<integer_constant, 0x42>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<integer_constant, 0x06>
<operator, ,>
<integer_constant, 0x42>
<operator, )>
<punctuator, ;>
<identifier, beepcount>
<operator, =>
<identifier, HZ>
<operator, />
<integer_constant, 8>
<punctuator, ;>
<punctuator, }>
