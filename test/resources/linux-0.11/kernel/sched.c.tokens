<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sys.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fdreg.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <signal.h>>
<operator, #>
<identifier, define>
<identifier, _S>
<operator, (>
<identifier, nr>
<operator, )>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<operator, (>
<identifier, nr>
<operator, )>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, _BLOCKABLE>
<operator, (>
<operator, ~>
<operator, (>
<identifier, _S>
<operator, (>
<identifier, SIGKILL>
<operator, )>
<operator, |>
<identifier, _S>
<operator, (>
<identifier, SIGSTOP>
<operator, )>
<operator, )>
<operator, )>
<keyword, void>
<identifier, show_task>
<operator, (>
<keyword, int>
<identifier, nr>
<operator, ,>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, j>
<operator, =>
<integer_constant, 4096>
<operator, ->
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, )>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%d: pid=%d, state=%d, ">
<operator, ,>
<identifier, nr>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, pid>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, state>
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, <>
<identifier, j>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<identifier, p>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, i>
<operator, ++>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%d (of %d) chars free in kernel stack\n\r">
<operator, ,>
<identifier, i>
<operator, ,>
<identifier, j>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, show_stat>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, show_task>
<operator, (>
<identifier, i>
<operator, ,>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, LATCH>
<operator, (>
<integer_constant, 1193180>
<operator, />
<identifier, HZ>
<operator, )>
<keyword, extern>
<keyword, void>
<identifier, mem_use>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, int>
<identifier, timer_interrupt>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, int>
<identifier, system_call>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, union>
<identifier, task_union>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<identifier, task>
<punctuator, ;>
<keyword, char>
<identifier, stack>
<operator, [>
<identifier, PAGE_SIZE>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, union>
<identifier, task_union>
<identifier, init_task>
<operator, =>
<punctuator, {>
<identifier, INIT_TASK>
<operator, ,>
<punctuator, }>
<punctuator, ;>
<keyword, long>
<keyword, volatile>
<identifier, jiffies>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, long>
<identifier, startup_time>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, current>
<operator, =>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, )>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, last_task_used_math>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, task>
<operator, [>
<identifier, NR_TASKS>
<operator, ]>
<operator, =>
<punctuator, {>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, )>
<operator, ,>
<punctuator, }>
<punctuator, ;>
<keyword, long>
<identifier, user_stack>
<operator, [>
<identifier, PAGE_SIZE>
<operator, >>>
<integer_constant, 2>
<operator, ]>
<punctuator, ;>
<keyword, struct>
<punctuator, {>
<keyword, long>
<operator, *>
<identifier, a>
<punctuator, ;>
<keyword, short>
<identifier, b>
<punctuator, ;>
<punctuator, }>
<identifier, stack_start>
<operator, =>
<punctuator, {>
<operator, &>
<identifier, user_stack>
<operator, [>
<identifier, PAGE_SIZE>
<operator, >>>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<integer_constant, 0x10>
<punctuator, }>
<punctuator, ;>
<keyword, void>
<identifier, math_state_restore>
<operator, (>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, ==>
<identifier, current>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "fwait">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, )>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "fnsave %0">
<operator, :>
<operator, :>
<string_literal, "m">
<operator, (>
<identifier, last_task_used_math>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, i387>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, last_task_used_math>
<operator, =>
<identifier, current>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, used_math>
<operator, )>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "frstor %0">
<operator, :>
<operator, :>
<string_literal, "m">
<operator, (>
<identifier, current>
<operator, ->>
<identifier, tss>
<operator, .>
<identifier, i387>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, __asm__>
<operator, (>
<string_literal, "fninit">
<operator, :>
<operator, :>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, used_math>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, void>
<identifier, schedule>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, next>
<operator, ,>
<identifier, c>
<punctuator, ;>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, p>
<operator, =>
<operator, &>
<identifier, LAST_TASK>
<punctuator, ;>
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<punctuator, ;>
<operator, -->
<identifier, p>
<operator, )>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, alarm>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, alarm>
<operator, <>
<identifier, jiffies>
<operator, )>
<punctuator, {>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGALRM>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<punctuator, ;>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, alarm>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, signal>
<operator, &>
<operator, ~>
<operator, (>
<identifier, _BLOCKABLE>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, blocked>
<operator, )>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, state>
<operator, ==>
<identifier, TASK_INTERRUPTIBLE>
<operator, )>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_RUNNING>
<punctuator, ;>
<punctuator, }>
<keyword, while>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, c>
<operator, =>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, next>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, p>
<operator, =>
<operator, &>
<identifier, task>
<operator, [>
<identifier, NR_TASKS>
<operator, ]>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, i>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, *>
<operator, -->
<identifier, p>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, state>
<operator, ==>
<identifier, TASK_RUNNING>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, counter>
<operator, >>
<identifier, c>
<operator, )>
<identifier, c>
<operator, =>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, counter>
<operator, ,>
<identifier, next>
<operator, =>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, c>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, p>
<operator, =>
<operator, &>
<identifier, LAST_TASK>
<punctuator, ;>
<identifier, p>
<operator, >>
<operator, &>
<identifier, FIRST_TASK>
<punctuator, ;>
<operator, -->
<identifier, p>
<operator, )>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, counter>
<operator, =>
<operator, (>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, counter>
<operator, >>>
<integer_constant, 1>
<operator, )>
<operator, +>
<operator, (>
<operator, *>
<identifier, p>
<operator, )>
<operator, ->>
<identifier, priority>
<punctuator, ;>
<punctuator, }>
<identifier, switch_to>
<operator, (>
<identifier, next>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_pause>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_INTERRUPTIBLE>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, sleep_on>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ==>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "task[0] trying to sleep">
<operator, )>
<punctuator, ;>
<identifier, tmp>
<operator, =>
<operator, *>
<identifier, p>
<punctuator, ;>
<operator, *>
<identifier, p>
<operator, =>
<identifier, current>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_UNINTERRUPTIBLE>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, )>
<identifier, tmp>
<operator, ->>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, interruptible_sleep_on>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ==>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "task[0] trying to sleep">
<operator, )>
<punctuator, ;>
<identifier, tmp>
<operator, =>
<operator, *>
<identifier, p>
<punctuator, ;>
<operator, *>
<identifier, p>
<operator, =>
<identifier, current>
<punctuator, ;>
<identifier, repeat>
<operator, :>
<identifier, current>
<operator, ->>
<identifier, state>
<operator, =>
<identifier, TASK_INTERRUPTIBLE>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, *>
<identifier, p>
<operator, &>
<operator, &>
<operator, *>
<identifier, p>
<operator, !>
<operator, =>
<identifier, current>
<operator, )>
<punctuator, {>
<operator, (>
<operator, *>
<operator, *>
<identifier, p>
<operator, )>
<operator, .>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<operator, *>
<identifier, p>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, )>
<identifier, tmp>
<operator, ->>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, wake_up>
<operator, (>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, p>
<operator, &>
<operator, &>
<operator, *>
<identifier, p>
<operator, )>
<punctuator, {>
<operator, (>
<operator, *>
<operator, *>
<identifier, p>
<operator, )>
<operator, .>
<identifier, state>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, *>
<identifier, p>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, wait_motor>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, =>
<punctuator, {>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<operator, ,>
<identifier, NULL>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, mon_timer>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, =>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, moff_timer>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, =>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<integer_constant, 0>
<punctuator, }>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, current_DOR>
<operator, =>
<integer_constant, 0x0C>
<punctuator, ;>
<keyword, int>
<identifier, ticks_to_floppy_on>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, extern>
<keyword, unsigned>
<keyword, char>
<identifier, selected>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, mask>
<operator, =>
<integer_constant, 0x10>
<operator, <<>
<identifier, nr>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, >>
<integer_constant, 3>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "floppy_on: nr>3">
<operator, )>
<punctuator, ;>
<identifier, moff_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<integer_constant, 10000>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, mask>
<operator, |>
<operator, =>
<identifier, current_DOR>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, selected>
<operator, )>
<punctuator, {>
<identifier, mask>
<operator, &>
<operator, =>
<integer_constant, 0xFC>
<punctuator, ;>
<identifier, mask>
<operator, |>
<operator, =>
<identifier, nr>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, mask>
<operator, !>
<operator, =>
<identifier, current_DOR>
<operator, )>
<punctuator, {>
<identifier, outb>
<operator, (>
<identifier, mask>
<operator, ,>
<identifier, FD_DOR>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, mask>
<operator, ^>
<identifier, current_DOR>
<operator, )>
<operator, &>
<integer_constant, 0xf0>
<operator, )>
<identifier, mon_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<identifier, HZ>
<operator, />
<integer_constant, 2>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, mon_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, <>
<integer_constant, 2>
<operator, )>
<identifier, mon_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, current_DOR>
<operator, =>
<identifier, mask>
<punctuator, ;>
<punctuator, }>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, mon_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, floppy_on>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, ticks_to_floppy_on>
<operator, (>
<identifier, nr>
<operator, )>
<operator, )>
<identifier, sleep_on>
<operator, (>
<identifier, nr>
<operator, +>
<identifier, wait_motor>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, floppy_off>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, moff_timer>
<operator, [>
<identifier, nr>
<operator, ]>
<operator, =>
<integer_constant, 3>
<operator, *>
<identifier, HZ>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_floppy_timer>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, unsigned>
<keyword, char>
<identifier, mask>
<operator, =>
<integer_constant, 0x10>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 4>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, mask>
<operator, <<>
<operator, =>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, mask>
<operator, &>
<identifier, current_DOR>
<operator, )>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, mon_timer>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, -->
<identifier, mon_timer>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, wake_up>
<operator, (>
<identifier, i>
<operator, +>
<identifier, wait_motor>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<operator, !>
<identifier, moff_timer>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<identifier, current_DOR>
<operator, &>
<operator, =>
<operator, ~>
<identifier, mask>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, current_DOR>
<operator, ,>
<identifier, FD_DOR>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, moff_timer>
<operator, [>
<identifier, i>
<operator, ]>
<operator, -->
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, TIME_REQUESTS>
<integer_constant, 64>
<keyword, static>
<keyword, struct>
<identifier, timer_list>
<punctuator, {>
<keyword, long>
<identifier, jiffies>
<punctuator, ;>
<keyword, void>
<operator, (>
<operator, *>
<identifier, fn>
<operator, )>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, struct>
<identifier, timer_list>
<operator, *>
<identifier, next>
<punctuator, ;>
<punctuator, }>
<identifier, timer_list>
<operator, [>
<identifier, TIME_REQUESTS>
<operator, ]>
<operator, ,>
<operator, *>
<identifier, next_timer>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, void>
<identifier, add_timer>
<operator, (>
<keyword, long>
<identifier, jiffies>
<operator, ,>
<keyword, void>
<operator, (>
<operator, *>
<identifier, fn>
<operator, )>
<operator, (>
<keyword, void>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, timer_list>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, fn>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, jiffies>
<operator, <>
<operator, =>
<integer_constant, 0>
<operator, )>
<operator, (>
<identifier, fn>
<operator, )>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, else>
<punctuator, {>
<keyword, for>
<operator, (>
<identifier, p>
<operator, =>
<identifier, timer_list>
<punctuator, ;>
<identifier, p>
<operator, <>
<identifier, timer_list>
<operator, +>
<identifier, TIME_REQUESTS>
<punctuator, ;>
<identifier, p>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, ->>
<identifier, fn>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, p>
<operator, >>
<operator, =>
<identifier, timer_list>
<operator, +>
<identifier, TIME_REQUESTS>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "No more time requests free">
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, fn>
<operator, =>
<identifier, fn>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, jiffies>
<operator, =>
<identifier, jiffies>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, =>
<identifier, next_timer>
<punctuator, ;>
<identifier, next_timer>
<operator, =>
<identifier, p>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, &>
<operator, &>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, jiffies>
<operator, <>
<identifier, p>
<operator, ->>
<identifier, jiffies>
<operator, )>
<punctuator, {>
<identifier, p>
<operator, ->>
<identifier, jiffies>
<operator, ->
<operator, =>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, jiffies>
<punctuator, ;>
<identifier, fn>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, fn>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, fn>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, fn>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, fn>
<operator, =>
<identifier, fn>
<punctuator, ;>
<identifier, jiffies>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, jiffies>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, jiffies>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, jiffies>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, next>
<operator, ->>
<identifier, jiffies>
<operator, =>
<identifier, jiffies>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, next>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, do_timer>
<operator, (>
<keyword, long>
<identifier, cpl>
<operator, )>
<punctuator, {>
<keyword, extern>
<keyword, int>
<identifier, beepcount>
<punctuator, ;>
<keyword, extern>
<keyword, void>
<identifier, sysbeepstop>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, beepcount>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<operator, -->
<identifier, beepcount>
<operator, )>
<identifier, sysbeepstop>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, cpl>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, utime>
<operator, ++>
<punctuator, ;>
<keyword, else>
<identifier, current>
<operator, ->>
<identifier, stime>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, next_timer>
<operator, )>
<punctuator, {>
<identifier, next_timer>
<operator, ->>
<identifier, jiffies>
<operator, -->
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, next_timer>
<operator, &>
<operator, &>
<identifier, next_timer>
<operator, ->>
<identifier, jiffies>
<operator, <>
<operator, =>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, void>
<operator, (>
<operator, *>
<identifier, fn>
<operator, )>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<identifier, fn>
<operator, =>
<identifier, next_timer>
<operator, ->>
<identifier, fn>
<punctuator, ;>
<identifier, next_timer>
<operator, ->>
<identifier, fn>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, next_timer>
<operator, =>
<identifier, next_timer>
<operator, ->>
<identifier, next>
<punctuator, ;>
<operator, (>
<identifier, fn>
<operator, )>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, current_DOR>
<operator, &>
<integer_constant, 0xf0>
<operator, )>
<identifier, do_floppy_timer>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, -->
<identifier, current>
<operator, ->>
<identifier, counter>
<operator, )>
<operator, >>
<integer_constant, 0>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, counter>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, cpl>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, schedule>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_alarm>
<operator, (>
<keyword, long>
<identifier, seconds>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, old>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, alarm>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, old>
<operator, )>
<identifier, old>
<operator, =>
<operator, (>
<identifier, old>
<operator, ->
<identifier, jiffies>
<operator, )>
<operator, />
<identifier, HZ>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, alarm>
<operator, =>
<operator, (>
<identifier, seconds>
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, ?>
<operator, (>
<identifier, jiffies>
<operator, +>
<identifier, HZ>
<operator, *>
<identifier, seconds>
<operator, )>
<operator, :>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, old>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_getpid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, pid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_getppid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, father>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_getuid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, uid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_geteuid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, euid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_getgid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, gid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_getegid>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, current>
<operator, ->>
<identifier, egid>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_nice>
<operator, (>
<keyword, long>
<identifier, increment>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, priority>
<operator, ->
<identifier, increment>
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, priority>
<operator, ->
<operator, =>
<identifier, increment>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, sched_init>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, desc_struct>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, if>
<operator, (>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, sigaction>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 16>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Struct sigaction MUST be 16 bytes">
<operator, )>
<punctuator, ;>
<identifier, set_tss_desc>
<operator, (>
<identifier, gdt>
<operator, +>
<identifier, FIRST_TSS_ENTRY>
<operator, ,>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, .>
<identifier, tss>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, set_ldt_desc>
<operator, (>
<identifier, gdt>
<operator, +>
<identifier, FIRST_LDT_ENTRY>
<operator, ,>
<operator, &>
<operator, (>
<identifier, init_task>
<operator, .>
<identifier, task>
<operator, .>
<identifier, ldt>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, gdt>
<operator, +>
<integer_constant, 2>
<operator, +>
<identifier, FIRST_TSS_ENTRY>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_TASKS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, task>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, a>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, b>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ++>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, a>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, b>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, __asm__>
<operator, (>
<string_literal, "pushfl ; andl $0xffffbfff,(%esp) ; popfl">
<operator, )>
<punctuator, ;>
<identifier, ltr>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, lldt>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<integer_constant, 0x36>
<operator, ,>
<integer_constant, 0x43>
<operator, )>
<punctuator, ;>
<identifier, outb_p>
<operator, (>
<identifier, LATCH>
<operator, &>
<integer_constant, 0xff>
<operator, ,>
<integer_constant, 0x40>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, LATCH>
<operator, >>>
<integer_constant, 8>
<operator, ,>
<integer_constant, 0x40>
<operator, )>
<punctuator, ;>
<identifier, set_intr_gate>
<operator, (>
<integer_constant, 0x20>
<operator, ,>
<operator, &>
<identifier, timer_interrupt>
<operator, )>
<punctuator, ;>
<identifier, outb>
<operator, (>
<identifier, inb_p>
<operator, (>
<integer_constant, 0x21>
<operator, )>
<operator, &>
<operator, ~>
<integer_constant, 0x01>
<operator, ,>
<integer_constant, 0x21>
<operator, )>
<punctuator, ;>
<identifier, set_system_gate>
<operator, (>
<integer_constant, 0x80>
<operator, ,>
<operator, &>
<identifier, system_call>
<operator, )>
<punctuator, ;>
<punctuator, }>
