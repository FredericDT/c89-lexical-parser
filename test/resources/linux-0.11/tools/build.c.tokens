<punctuator, #>
<identifier, include>
<header_name, <stdio.h>>
<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <stdlib.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/types.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<punctuator, #>
<identifier, include>
<header_name, <unistd.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<operator, #>
<identifier, define>
<identifier, MINIX_HEADER>
<integer_constant, 32>
<operator, #>
<identifier, define>
<identifier, GCC_HEADER>
<integer_constant, 1024>
<operator, #>
<identifier, define>
<identifier, SYS_SIZE>
<integer_constant, 0x2000>
<operator, #>
<identifier, define>
<identifier, DEFAULT_MAJOR_ROOT>
<integer_constant, 3>
<operator, #>
<identifier, define>
<identifier, DEFAULT_MINOR_ROOT>
<integer_constant, 6>
<operator, #>
<identifier, define>
<identifier, SETUP_SECTS>
<integer_constant, 4>
<operator, #>
<identifier, define>
<identifier, STRINGIFY>
<operator, (>
<identifier, x>
<operator, )>
<operator, #>
<identifier, x>
<keyword, void>
<identifier, die>
<operator, (>
<keyword, char>
<operator, *>
<identifier, str>
<operator, )>
<punctuator, {>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "%s\n">
<operator, ,>
<identifier, str>
<operator, )>
<punctuator, ;>
<identifier, exit>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, usage>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<identifier, die>
<operator, (>
<string_literal, "Usage: build bootsect setup system [rootdev] [> image]">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, main>
<operator, (>
<keyword, int>
<identifier, argc>
<operator, ,>
<keyword, char>
<operator, *>
<operator, *>
<identifier, argv>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, c>
<operator, ,>
<identifier, id>
<punctuator, ;>
<keyword, char>
<identifier, buf>
<operator, [>
<integer_constant, 1024>
<operator, ]>
<punctuator, ;>
<keyword, char>
<identifier, major_root>
<operator, ,>
<identifier, minor_root>
<punctuator, ;>
<keyword, struct>
<identifier, stat>
<identifier, sb>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, argc>
<operator, !>
<operator, =>
<integer_constant, 4>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, argc>
<operator, !>
<operator, =>
<integer_constant, 5>
<operator, )>
<operator, )>
<identifier, usage>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, argc>
<operator, ==>
<integer_constant, 5>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, strcmp>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, ,>
<string_literal, "FLOPPY">
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, stat>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, ,>
<operator, &>
<identifier, sb>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, perror>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, die>
<operator, (>
<string_literal, "Couldn't stat root device.">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, major_root>
<operator, =>
<identifier, MAJOR>
<operator, (>
<identifier, sb>
<operator, .>
<identifier, st_rdev>
<operator, )>
<punctuator, ;>
<identifier, minor_root>
<operator, =>
<identifier, MINOR>
<operator, (>
<identifier, sb>
<operator, .>
<identifier, st_rdev>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, major_root>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, minor_root>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<punctuator, {>
<identifier, major_root>
<operator, =>
<identifier, DEFAULT_MAJOR_ROOT>
<punctuator, ;>
<identifier, minor_root>
<operator, =>
<identifier, DEFAULT_MINOR_ROOT>
<punctuator, ;>
<punctuator, }>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "Root device is (%d, %d)\n">
<operator, ,>
<identifier, major_root>
<operator, ,>
<identifier, minor_root>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, major_root>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, major_root>
<operator, !>
<operator, =>
<integer_constant, 3>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, major_root>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "Illegal root device (major = %d)\n">
<operator, ,>
<identifier, major_root>
<operator, )>
<punctuator, ;>
<identifier, die>
<operator, (>
<string_literal, "Bad root device --- major #">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<keyword, sizeof>
<identifier, buf>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, buf>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, id>
<operator, =>
<identifier, open>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, O_RDONLY>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to open 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, MINIX_HEADER>
<operator, )>
<operator, !>
<operator, =>
<identifier, MINIX_HEADER>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to read header of 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0x04100301>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, !>
<operator, =>
<identifier, MINIX_HEADER>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal data segment in 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal bss in 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 5>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'boot'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal symbol table in 'boot'">
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<keyword, sizeof>
<identifier, buf>
<operator, )>
<punctuator, ;>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "Boot sector %d bytes.\n">
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, !>
<operator, =>
<integer_constant, 512>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Boot block must be exactly 512 bytes">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<identifier, buf>
<operator, +>
<integer_constant, 510>
<operator, )>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0xAA55>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Boot block hasn't got boot flag (0xAA55)">
<operator, )>
<punctuator, ;>
<identifier, buf>
<operator, [>
<integer_constant, 508>
<operator, ]>
<operator, =>
<operator, (>
<keyword, char>
<operator, )>
<identifier, minor_root>
<punctuator, ;>
<identifier, buf>
<operator, [>
<integer_constant, 509>
<operator, ]>
<operator, =>
<operator, (>
<keyword, char>
<operator, )>
<identifier, major_root>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, write>
<operator, (>
<integer_constant, 1>
<operator, ,>
<identifier, buf>
<operator, ,>
<integer_constant, 512>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, !>
<operator, =>
<integer_constant, 512>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Write call failed">
<operator, )>
<punctuator, ;>
<identifier, close>
<operator, (>
<identifier, id>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, id>
<operator, =>
<identifier, open>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<identifier, O_RDONLY>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to open 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, MINIX_HEADER>
<operator, )>
<operator, !>
<operator, =>
<identifier, MINIX_HEADER>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to read header of 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0x04100301>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, !>
<operator, =>
<identifier, MINIX_HEADER>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal data segment in 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal bss in 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 5>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-Minix header of 'setup'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Illegal symbol table in 'setup'">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, (>
<identifier, c>
<operator, =>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<keyword, sizeof>
<identifier, buf>
<operator, )>
<operator, )>
<operator, >>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, +>
<operator, =>
<identifier, c>
<operator, )>
<keyword, if>
<operator, (>
<identifier, write>
<operator, (>
<integer_constant, 1>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, c>
<operator, )>
<operator, !>
<operator, =>
<identifier, c>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Write call failed">
<operator, )>
<punctuator, ;>
<identifier, close>
<operator, (>
<identifier, id>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<identifier, SETUP_SECTS>
<operator, *>
<integer_constant, 512>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Setup exceeds ">
<identifier, STRINGIFY>
<operator, (>
<identifier, SETUP_SECTS>
<operator, )>
<string_literal, " sectors - rewrite build/boot/setup">
<operator, )>
<punctuator, ;>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "Setup is %d bytes.\n">
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, c>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, c>
<operator, <>
<keyword, sizeof>
<operator, (>
<identifier, buf>
<operator, )>
<punctuator, ;>
<identifier, c>
<operator, ++>
<operator, )>
<identifier, buf>
<operator, [>
<identifier, c>
<operator, ]>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, <>
<identifier, SETUP_SECTS>
<operator, *>
<integer_constant, 512>
<operator, )>
<punctuator, {>
<identifier, c>
<operator, =>
<identifier, SETUP_SECTS>
<operator, *>
<integer_constant, 512>
<operator, ->
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, >>
<keyword, sizeof>
<operator, (>
<identifier, buf>
<operator, )>
<operator, )>
<identifier, c>
<operator, =>
<keyword, sizeof>
<operator, (>
<identifier, buf>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, write>
<operator, (>
<integer_constant, 1>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, c>
<operator, )>
<operator, !>
<operator, =>
<identifier, c>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Write call failed">
<operator, )>
<punctuator, ;>
<identifier, i>
<operator, +>
<operator, =>
<identifier, c>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, (>
<identifier, id>
<operator, =>
<identifier, open>
<operator, (>
<identifier, argv>
<operator, [>
<integer_constant, 3>
<operator, ]>
<operator, ,>
<identifier, O_RDONLY>
<operator, ,>
<integer_constant, 0>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to open 'system'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, GCC_HEADER>
<operator, )>
<operator, !>
<operator, =>
<identifier, GCC_HEADER>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Unable to read header of 'system'">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<keyword, long>
<operator, *>
<operator, )>
<identifier, buf>
<operator, )>
<operator, [>
<integer_constant, 5>
<operator, ]>
<operator, !>
<operator, =>
<integer_constant, 0>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Non-GCC header of 'system'">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, (>
<identifier, c>
<operator, =>
<identifier, read>
<operator, (>
<identifier, id>
<operator, ,>
<identifier, buf>
<operator, ,>
<keyword, sizeof>
<identifier, buf>
<operator, )>
<operator, )>
<operator, >>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, +>
<operator, =>
<identifier, c>
<operator, )>
<keyword, if>
<operator, (>
<identifier, write>
<operator, (>
<integer_constant, 1>
<operator, ,>
<identifier, buf>
<operator, ,>
<identifier, c>
<operator, )>
<operator, !>
<operator, =>
<identifier, c>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "Write call failed">
<operator, )>
<punctuator, ;>
<identifier, close>
<operator, (>
<identifier, id>
<operator, )>
<punctuator, ;>
<identifier, fprintf>
<operator, (>
<identifier, stderr>
<operator, ,>
<string_literal, "System is %d bytes.\n">
<operator, ,>
<identifier, i>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<identifier, SYS_SIZE>
<operator, *>
<integer_constant, 16>
<operator, )>
<identifier, die>
<operator, (>
<string_literal, "System is too big">
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
