<punctuator, #>
<identifier, include>
<header_name, <stdarg.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/config.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/io.h>>
<keyword, extern>
<keyword, int>
<identifier, end>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, start_buffer>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<operator, )>
<operator, &>
<identifier, end>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, hash_table>
<operator, [>
<identifier, NR_HASH>
<operator, ]>
<punctuator, ;>
<keyword, static>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, free_list>
<punctuator, ;>
<keyword, static>
<keyword, struct>
<identifier, task_struct>
<operator, *>
<identifier, buffer_wait>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, int>
<identifier, NR_BUFFERS>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, wait_on_buffer>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_wait>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_sync>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<identifier, sync_inodes>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_BUFFERS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, bh>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, WRITE>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sync_dev>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_BUFFERS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, bh>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, !>
<operator, =>
<identifier, dev>
<operator, )>
<keyword, continue>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ==>
<identifier, dev>
<operator, &>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, WRITE>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, sync_inodes>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_BUFFERS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, bh>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, !>
<operator, =>
<identifier, dev>
<operator, )>
<keyword, continue>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ==>
<identifier, dev>
<operator, &>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, WRITE>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, inline>
<identifier, invalidate_buffers>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_BUFFERS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, bh>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, !>
<operator, =>
<identifier, dev>
<operator, )>
<keyword, continue>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ==>
<identifier, dev>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, void>
<identifier, check_disk_change>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, MAJOR>
<operator, (>
<identifier, dev>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, floppy_change>
<operator, (>
<identifier, dev>
<operator, &>
<integer_constant, 0x03>
<operator, )>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_SUPER>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, super_block>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, s_dev>
<operator, ==>
<identifier, dev>
<operator, )>
<identifier, put_super>
<operator, (>
<identifier, super_block>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, s_dev>
<operator, )>
<punctuator, ;>
<identifier, invalidate_inodes>
<operator, (>
<identifier, dev>
<operator, )>
<punctuator, ;>
<identifier, invalidate_buffers>
<operator, (>
<identifier, dev>
<operator, )>
<punctuator, ;>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, _hashfn>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, (>
<operator, (>
<operator, (>
<keyword, unsigned>
<operator, )>
<operator, (>
<identifier, dev>
<operator, ^>
<identifier, block>
<operator, )>
<operator, )>
<operator, %>
<identifier, NR_HASH>
<operator, )>
<operator, #>
<identifier, define>
<identifier, hash>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<identifier, hash_table>
<operator, [>
<identifier, _hashfn>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, ]>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, remove_from_queues>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<operator, ->>
<identifier, b_prev>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_prev>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_prev>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_prev>
<operator, ->>
<identifier, b_next>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, hash>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, )>
<operator, ==>
<identifier, bh>
<operator, )>
<identifier, hash>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, )>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_prev_free>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_next_free>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Free block list corrupted">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_prev_free>
<operator, ->>
<identifier, b_next_free>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_next_free>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_next_free>
<operator, ->>
<identifier, b_prev_free>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_prev_free>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, free_list>
<operator, ==>
<identifier, bh>
<operator, )>
<identifier, free_list>
<operator, =>
<identifier, bh>
<operator, ->>
<identifier, b_next_free>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, insert_into_queues>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, bh>
<operator, ->>
<identifier, b_next_free>
<operator, =>
<identifier, free_list>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_prev_free>
<operator, =>
<identifier, free_list>
<operator, ->>
<identifier, b_prev_free>
<punctuator, ;>
<identifier, free_list>
<operator, ->>
<identifier, b_prev_free>
<operator, ->>
<identifier, b_next_free>
<operator, =>
<identifier, bh>
<punctuator, ;>
<identifier, free_list>
<operator, ->>
<identifier, b_prev_free>
<operator, =>
<identifier, bh>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_prev>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<operator, =>
<identifier, hash>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, )>
<punctuator, ;>
<identifier, hash>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, )>
<operator, =>
<identifier, bh>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_next>
<operator, ->>
<identifier, b_prev>
<operator, =>
<identifier, bh>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, find_buffer>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, tmp>
<operator, =>
<identifier, hash>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<punctuator, ;>
<identifier, tmp>
<operator, !>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, tmp>
<operator, =>
<identifier, tmp>
<operator, ->>
<identifier, b_next>
<operator, )>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, ->>
<identifier, b_dev>
<operator, ==>
<identifier, dev>
<operator, &>
<operator, &>
<identifier, tmp>
<operator, ->>
<identifier, b_blocknr>
<operator, ==>
<identifier, block>
<operator, )>
<keyword, return>
<identifier, tmp>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, get_hash_table>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, for>
<operator, (>
<punctuator, ;>
<punctuator, ;>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, find_buffer>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, ++>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, ==>
<identifier, dev>
<operator, &>
<operator, &>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, ==>
<identifier, block>
<operator, )>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, -->
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, BADNESS>
<operator, (>
<identifier, bh>
<operator, )>
<operator, (>
<operator, (>
<operator, (>
<identifier, bh>
<operator, )>
<operator, ->>
<identifier, b_dirt>
<operator, <<>
<integer_constant, 1>
<operator, )>
<operator, +>
<operator, (>
<identifier, bh>
<operator, )>
<operator, ->>
<identifier, b_lock>
<operator, )>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, getblk>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, tmp>
<operator, ,>
<operator, *>
<identifier, bh>
<punctuator, ;>
<identifier, repeat>
<operator, :>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, get_hash_table>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<identifier, tmp>
<operator, =>
<identifier, free_list>
<punctuator, ;>
<keyword, do>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, ->>
<identifier, b_count>
<operator, )>
<keyword, continue>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, |>
<operator, |>
<identifier, BADNESS>
<operator, (>
<identifier, tmp>
<operator, )>
<operator, <>
<identifier, BADNESS>
<operator, (>
<identifier, bh>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, bh>
<operator, =>
<identifier, tmp>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, BADNESS>
<operator, (>
<identifier, tmp>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, while>
<operator, (>
<operator, (>
<identifier, tmp>
<operator, =>
<identifier, tmp>
<operator, ->>
<identifier, b_next_free>
<operator, )>
<operator, !>
<operator, =>
<identifier, free_list>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, buffer_wait>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, )>
<punctuator, {>
<identifier, sync_dev>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, )>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, find_buffer>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, remove_from_queues>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dev>
<operator, =>
<identifier, dev>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_blocknr>
<operator, =>
<identifier, block>
<punctuator, ;>
<identifier, insert_into_queues>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, brelse>
<operator, (>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, buf>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, buf>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, buf>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, buf>
<operator, ->>
<identifier, b_count>
<operator, -->
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Trying to free free buffer">
<operator, )>
<punctuator, ;>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, buffer_wait>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bread>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "bread: getblk returned NULL\n">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<identifier, ll_rw_block>
<operator, (>
<identifier, READ>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<operator, #>
<identifier, define>
<identifier, COPYBLK>
<operator, (>
<identifier, from>
<operator, ,>
<identifier, to>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<unknown, \>
<string_literal, "rep\n\t">
<unknown, \>
<string_literal, "movsl\n\t">
<unknown, \>
<operator, :>
<operator, :>
<string_literal, "c">
<operator, (>
<identifier, BLOCK_SIZE>
<operator, />
<integer_constant, 4>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, from>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<identifier, to>
<operator, )>
<unknown, \>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<keyword, void>
<identifier, bread_page>
<operator, (>
<keyword, unsigned>
<keyword, long>
<identifier, address>
<operator, ,>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, b>
<operator, [>
<integer_constant, 4>
<operator, ]>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, [>
<integer_constant, 4>
<operator, ]>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 4>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, b>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, b>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, READ>
<operator, ,>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 4>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, address>
<operator, +>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, )>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<identifier, COPYBLK>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, ,>
<identifier, address>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, breada>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, first>
<operator, ,>
<operator, .>
<operator, .>
<operator, .>
<operator, )>
<punctuator, {>
<identifier, va_list>
<identifier, args>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, ,>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<identifier, va_start>
<operator, (>
<identifier, args>
<operator, ,>
<identifier, first>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, first>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "bread: getblk returned NULL\n">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, READ>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, (>
<identifier, first>
<operator, =>
<identifier, va_arg>
<operator, (>
<identifier, args>
<operator, ,>
<keyword, int>
<operator, )>
<operator, )>
<operator, >>
<operator, =>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, tmp>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, first>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, tmp>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<identifier, ll_rw_block>
<operator, (>
<identifier, READA>
<operator, ,>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, tmp>
<operator, ->>
<identifier, b_count>
<operator, -->
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, va_end>
<operator, (>
<identifier, args>
<operator, )>
<punctuator, ;>
<identifier, wait_on_buffer>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, )>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, NULL>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, buffer_init>
<operator, (>
<keyword, long>
<identifier, buffer_end>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, h>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<keyword, void>
<operator, *>
<identifier, b>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, buffer_end>
<operator, ==>
<integer_constant, 1>
<operator, <<>
<integer_constant, 20>
<operator, )>
<identifier, b>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 640>
<operator, *>
<integer_constant, 1024>
<operator, )>
<punctuator, ;>
<keyword, else>
<identifier, b>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<identifier, buffer_end>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, (>
<identifier, b>
<operator, ->
<operator, =>
<identifier, BLOCK_SIZE>
<operator, )>
<operator, >>
<operator, =>
<operator, (>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<operator, (>
<identifier, h>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, h>
<operator, ->>
<identifier, b_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_lock>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_uptodate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_wait>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_next>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_prev>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_data>
<operator, =>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, b>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_prev_free>
<operator, =>
<identifier, h>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_next_free>
<operator, =>
<identifier, h>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<identifier, h>
<operator, ++>
<punctuator, ;>
<identifier, NR_BUFFERS>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, b>
<operator, ==>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<integer_constant, 0x100000>
<operator, )>
<identifier, b>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<integer_constant, 0xA0000>
<punctuator, ;>
<punctuator, }>
<identifier, h>
<operator, -->
<punctuator, ;>
<identifier, free_list>
<operator, =>
<identifier, start_buffer>
<punctuator, ;>
<identifier, free_list>
<operator, ->>
<identifier, b_prev_free>
<operator, =>
<identifier, h>
<punctuator, ;>
<identifier, h>
<operator, ->>
<identifier, b_next_free>
<operator, =>
<identifier, free_list>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_HASH>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, hash_table>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
