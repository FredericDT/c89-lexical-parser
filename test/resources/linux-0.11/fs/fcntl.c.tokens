<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<keyword, extern>
<keyword, int>
<identifier, sys_close>
<operator, (>
<keyword, int>
<identifier, fd>
<operator, )>
<punctuator, ;>
<keyword, static>
<keyword, int>
<identifier, dupfd>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, fd>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, arg>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, fd>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, |>
<operator, |>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EBADF>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, arg>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, arg>
<operator, <>
<identifier, NR_OPEN>
<operator, )>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, arg>
<operator, ]>
<operator, )>
<identifier, arg>
<operator, ++>
<punctuator, ;>
<keyword, else>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, arg>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EMFILE>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<integer_constant, 1>
<operator, <<>
<identifier, arg>
<operator, )>
<punctuator, ;>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, arg>
<operator, ]>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, )>
<operator, ->>
<identifier, f_count>
<operator, ++>
<punctuator, ;>
<keyword, return>
<identifier, arg>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_dup2>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, oldfd>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, newfd>
<operator, )>
<punctuator, {>
<identifier, sys_close>
<operator, (>
<identifier, newfd>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, dupfd>
<operator, (>
<identifier, oldfd>
<operator, ,>
<identifier, newfd>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_dup>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, fildes>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, dupfd>
<operator, (>
<identifier, fildes>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_fcntl>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, fd>
<operator, ,>
<keyword, unsigned>
<keyword, int>
<identifier, cmd>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<identifier, arg>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, filp>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, fd>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, filp>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EBADF>
<punctuator, ;>
<keyword, switch>
<operator, (>
<identifier, cmd>
<operator, )>
<punctuator, {>
<keyword, case>
<identifier, F_DUPFD>
<operator, :>
<keyword, return>
<identifier, dupfd>
<operator, (>
<identifier, fd>
<operator, ,>
<identifier, arg>
<operator, )>
<punctuator, ;>
<keyword, case>
<identifier, F_GETFD>
<operator, :>
<keyword, return>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, >>>
<identifier, fd>
<operator, )>
<operator, &>
<integer_constant, 1>
<punctuator, ;>
<keyword, case>
<identifier, F_SETFD>
<operator, :>
<keyword, if>
<operator, (>
<identifier, arg>
<operator, &>
<integer_constant, 1>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, |>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<identifier, fd>
<operator, )>
<punctuator, ;>
<keyword, else>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<integer_constant, 1>
<operator, <<>
<identifier, fd>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, case>
<identifier, F_GETFL>
<operator, :>
<keyword, return>
<identifier, filp>
<operator, ->>
<identifier, f_flags>
<punctuator, ;>
<keyword, case>
<identifier, F_SETFL>
<operator, :>
<identifier, filp>
<operator, ->>
<identifier, f_flags>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<identifier, O_APPEND>
<operator, |>
<identifier, O_NONBLOCK>
<operator, )>
<punctuator, ;>
<identifier, filp>
<operator, ->>
<identifier, f_flags>
<operator, |>
<operator, =>
<identifier, arg>
<operator, &>
<operator, (>
<identifier, O_APPEND>
<operator, |>
<identifier, O_NONBLOCK>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, case>
<identifier, F_GETLK>
<operator, :>
<keyword, case>
<identifier, F_SETLK>
<operator, :>
<keyword, case>
<identifier, F_SETLKW>
<operator, :>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, default>
<operator, :>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
