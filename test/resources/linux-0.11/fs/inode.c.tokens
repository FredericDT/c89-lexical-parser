<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/mm.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<keyword, struct>
<identifier, m_inode>
<identifier, inode_table>
<operator, [>
<identifier, NR_INODE>
<operator, ]>
<operator, =>
<punctuator, {>
<punctuator, {>
<integer_constant, 0>
<operator, ,>
<punctuator, }>
<operator, ,>
<punctuator, }>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, read_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, write_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, wait_on_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, lock_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_lock>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<identifier, inline>
<keyword, void>
<identifier, unlock_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_lock>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, invalidate_inodes>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<identifier, inode>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, inode_table>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_INODE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, inode>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ==>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "inode in use on removed disk\n\r">
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<punctuator, }>
<keyword, void>
<identifier, sync_inodes>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<identifier, inode>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, inode_table>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_INODE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, inode>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_pipe>
<operator, )>
<identifier, write_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, _bmap>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, ,>
<keyword, int>
<identifier, create>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, <>
<integer_constant, 0>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "_bmap: block<0">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, >>
<operator, =>
<integer_constant, 7>
<operator, +>
<integer_constant, 512>
<operator, +>
<integer_constant, 512>
<operator, *>
<integer_constant, 512>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "_bmap: block>big">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, <>
<integer_constant, 7>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<identifier, block>
<operator, ]>
<operator, )>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<identifier, block>
<operator, ]>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<identifier, block>
<operator, ]>
<punctuator, ;>
<punctuator, }>
<identifier, block>
<operator, ->
<operator, =>
<integer_constant, 7>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, <>
<integer_constant, 512>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, )>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 7>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, [>
<identifier, block>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, i>
<operator, )>
<keyword, if>
<operator, (>
<identifier, i>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, [>
<identifier, block>
<operator, ]>
<operator, =>
<identifier, i>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<identifier, block>
<operator, ->
<operator, =>
<integer_constant, 512>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 8>
<operator, ]>
<operator, )>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 8>
<operator, ]>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 8>
<operator, ]>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 8>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, [>
<identifier, block>
<operator, >>>
<integer_constant, 9>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, i>
<operator, )>
<keyword, if>
<operator, (>
<identifier, i>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, [>
<identifier, block>
<operator, >>>
<integer_constant, 9>
<operator, ]>
<operator, =>
<identifier, i>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, i>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, i>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, [>
<identifier, block>
<operator, &>
<integer_constant, 511>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, create>
<operator, &>
<operator, &>
<operator, !>
<identifier, i>
<operator, )>
<keyword, if>
<operator, (>
<identifier, i>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<punctuator, {>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, short>
<operator, *>
<operator, )>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, [>
<identifier, block>
<operator, &>
<integer_constant, 511>
<operator, ]>
<operator, =>
<identifier, i>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, bmap>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, _bmap>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, block>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, create_block>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, _bmap>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, block>
<operator, ,>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, iput>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "iput: trying to free free inode">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_pipe>
<operator, )>
<punctuator, {>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, -->
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<keyword, return>
<punctuator, ;>
<identifier, free_page>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_pipe>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, -->
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, S_ISBLK>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, sync_dev>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, repeat>
<operator, :>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, >>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, -->
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<punctuator, {>
<identifier, truncate>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, free_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, )>
<punctuator, {>
<identifier, write_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, repeat>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, -->
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, get_empty_inode>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, static>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, last_inode>
<operator, =>
<identifier, inode_table>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, do>
<punctuator, {>
<identifier, inode>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<identifier, NR_INODE>
<punctuator, ;>
<identifier, i>
<punctuator, ;>
<identifier, i>
<operator, -->
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, ++>
<identifier, last_inode>
<operator, >>
<operator, =>
<identifier, inode_table>
<operator, +>
<identifier, NR_INODE>
<operator, )>
<identifier, last_inode>
<operator, =>
<identifier, inode_table>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, last_inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, =>
<identifier, last_inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_lock>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_INODE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "%04x: %6d\t">
<operator, ,>
<identifier, inode_table>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, i_dev>
<operator, ,>
<identifier, inode_table>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, i_num>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "No free inodes in mem">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, )>
<punctuator, {>
<identifier, write_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, while>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<punctuator, ;>
<identifier, memset>
<operator, (>
<identifier, inode>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<keyword, sizeof>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, get_pipe_inode>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, get_empty_inode>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, =>
<identifier, get_free_page>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, PIPE_HEAD>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, =>
<identifier, PIPE_TAIL>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_pipe>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, iget>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, nr>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<operator, *>
<identifier, empty>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, dev>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "iget with dev==0">
<operator, )>
<punctuator, ;>
<identifier, empty>
<operator, =>
<identifier, get_empty_inode>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, =>
<identifier, inode_table>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, inode>
<operator, <>
<identifier, NR_INODE>
<operator, +>
<identifier, inode_table>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, !>
<operator, =>
<identifier, dev>
<operator, |>
<operator, |>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, !>
<operator, =>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ++>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<identifier, wait_on_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, !>
<operator, =>
<identifier, dev>
<operator, |>
<operator, |>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, !>
<operator, =>
<identifier, nr>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, =>
<identifier, inode_table>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mount>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_SUPER>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, super_block>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, s_imount>
<operator, ==>
<identifier, inode>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<operator, =>
<identifier, NR_SUPER>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Mounted inode hasn't got sb\n">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, empty>
<operator, )>
<identifier, iput>
<operator, (>
<identifier, empty>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, super_block>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, s_dev>
<punctuator, ;>
<identifier, nr>
<operator, =>
<identifier, ROOT_INO>
<punctuator, ;>
<identifier, inode>
<operator, =>
<identifier, inode_table>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, empty>
<operator, )>
<identifier, iput>
<operator, (>
<identifier, empty>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, empty>
<operator, )>
<keyword, return>
<operator, (>
<identifier, NULL>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, =>
<identifier, empty>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, =>
<identifier, dev>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, =>
<identifier, nr>
<punctuator, ;>
<identifier, read_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, read_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, block>
<punctuator, ;>
<identifier, lock_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to read inode without dev">
<operator, )>
<punctuator, ;>
<identifier, block>
<operator, =>
<integer_constant, 2>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_imap_blocks>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_zmap_blocks>
<operator, +>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, />
<identifier, INODES_PER_BLOCK>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "unable to read i-node block">
<operator, )>
<punctuator, ;>
<operator, *>
<operator, (>
<keyword, struct>
<identifier, d_inode>
<operator, *>
<operator, )>
<identifier, inode>
<operator, =>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_inode>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, [>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, %>
<identifier, INODES_PER_BLOCK>
<operator, ]>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, unlock_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, write_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, block>
<punctuator, ;>
<identifier, lock_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, |>
<operator, |>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, {>
<identifier, unlock_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to write inode without device">
<operator, )>
<punctuator, ;>
<identifier, block>
<operator, =>
<integer_constant, 2>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_imap_blocks>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_zmap_blocks>
<operator, +>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, />
<identifier, INODES_PER_BLOCK>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "unable to read i-node block">
<operator, )>
<punctuator, ;>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_inode>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, [>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, %>
<identifier, INODES_PER_BLOCK>
<operator, ]>
<operator, =>
<operator, *>
<operator, (>
<keyword, struct>
<identifier, d_inode>
<operator, *>
<operator, )>
<identifier, inode>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, unlock_inode>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<punctuator, }>
