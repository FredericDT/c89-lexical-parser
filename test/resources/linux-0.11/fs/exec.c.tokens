<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<punctuator, #>
<identifier, include>
<header_name, <a.out.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/fs.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/mm.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<keyword, extern>
<keyword, int>
<identifier, sys_exit>
<operator, (>
<keyword, int>
<identifier, exit_code>
<operator, )>
<punctuator, ;>
<keyword, extern>
<keyword, int>
<identifier, sys_close>
<operator, (>
<keyword, int>
<identifier, fd>
<operator, )>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, MAX_ARG_PAGES>
<integer_constant, 32>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, create_tables>
<operator, (>
<keyword, char>
<operator, *>
<identifier, p>
<operator, ,>
<keyword, int>
<identifier, argc>
<operator, ,>
<keyword, int>
<identifier, envc>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, argv>
<operator, ,>
<operator, *>
<identifier, envp>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, sp>
<punctuator, ;>
<identifier, sp>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<operator, (>
<integer_constant, 0xfffffffc>
<operator, &>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, p>
<operator, )>
<punctuator, ;>
<identifier, sp>
<operator, ->
<operator, =>
<identifier, envc>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<identifier, envp>
<operator, =>
<identifier, sp>
<punctuator, ;>
<identifier, sp>
<operator, ->
<operator, =>
<identifier, argc>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<identifier, argv>
<operator, =>
<identifier, sp>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, envp>
<operator, ,>
<operator, -->
<identifier, sp>
<operator, )>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, argv>
<operator, ,>
<operator, -->
<identifier, sp>
<operator, )>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, argc>
<operator, ,>
<operator, -->
<identifier, sp>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, argc>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, put_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, p>
<operator, ,>
<identifier, argv>
<operator, ++>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, get_fs_byte>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, put_fs_long>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, argv>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, envc>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, put_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, p>
<operator, ,>
<identifier, envp>
<operator, ++>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, get_fs_byte>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, put_fs_long>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, envp>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, sp>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, count>
<operator, (>
<keyword, char>
<operator, *>
<operator, *>
<identifier, argv>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, char>
<operator, *>
<operator, *>
<identifier, tmp>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, tmp>
<operator, =>
<identifier, argv>
<operator, )>
<keyword, while>
<operator, (>
<identifier, get_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<operator, (>
<identifier, tmp>
<operator, ++>
<operator, )>
<operator, )>
<operator, )>
<identifier, i>
<operator, ++>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, copy_strings>
<operator, (>
<keyword, int>
<identifier, argc>
<operator, ,>
<keyword, char>
<operator, *>
<operator, *>
<identifier, argv>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, page>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<identifier, p>
<operator, ,>
<keyword, int>
<identifier, from_kmem>
<operator, )>
<punctuator, {>
<keyword, char>
<operator, *>
<identifier, tmp>
<operator, ,>
<operator, *>
<identifier, pag>
<punctuator, ;>
<keyword, int>
<identifier, len>
<operator, ,>
<identifier, offset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<identifier, old_fs>
<operator, ,>
<identifier, new_fs>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, new_fs>
<operator, =>
<identifier, get_ds>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, old_fs>
<operator, =>
<identifier, get_fs>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 2>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, new_fs>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, argc>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 1>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, new_fs>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, tmp>
<operator, =>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, get_fs_long>
<operator, (>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<identifier, argv>
<operator, )>
<operator, +>
<identifier, argc>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "argc is wrong">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 1>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<identifier, len>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, do>
<punctuator, {>
<identifier, len>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<keyword, while>
<operator, (>
<identifier, get_fs_byte>
<operator, (>
<identifier, tmp>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, p>
<operator, ->
<identifier, len>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, while>
<operator, (>
<identifier, len>
<operator, )>
<punctuator, {>
<operator, -->
<identifier, p>
<punctuator, ;>
<operator, -->
<identifier, tmp>
<punctuator, ;>
<operator, -->
<identifier, len>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, -->
<identifier, offset>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, offset>
<operator, =>
<identifier, p>
<operator, %>
<identifier, PAGE_SIZE>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 2>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, pag>
<operator, =>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, page>
<operator, [>
<identifier, p>
<operator, />
<identifier, PAGE_SIZE>
<operator, ]>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<identifier, pag>
<operator, =>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, page>
<operator, [>
<identifier, p>
<operator, />
<identifier, PAGE_SIZE>
<operator, ]>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<identifier, get_free_page>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 2>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, new_fs>
<operator, )>
<punctuator, ;>
<punctuator, }>
<operator, *>
<operator, (>
<identifier, pag>
<operator, +>
<identifier, offset>
<operator, )>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, tmp>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, from_kmem>
<operator, ==>
<integer_constant, 2>
<operator, )>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, p>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, unsigned>
<keyword, long>
<identifier, change_ldt>
<operator, (>
<keyword, unsigned>
<keyword, long>
<identifier, text_size>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, page>
<operator, )>
<punctuator, {>
<keyword, unsigned>
<keyword, long>
<identifier, code_limit>
<operator, ,>
<identifier, data_limit>
<operator, ,>
<identifier, code_base>
<operator, ,>
<identifier, data_base>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<identifier, code_limit>
<operator, =>
<identifier, text_size>
<operator, +>
<identifier, PAGE_SIZE>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, code_limit>
<operator, &>
<operator, =>
<integer_constant, 0xFFFFF000>
<punctuator, ;>
<identifier, data_limit>
<operator, =>
<integer_constant, 0x4000000>
<punctuator, ;>
<identifier, code_base>
<operator, =>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, data_base>
<operator, =>
<identifier, code_base>
<punctuator, ;>
<identifier, set_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, code_base>
<operator, )>
<punctuator, ;>
<identifier, set_limit>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<identifier, code_limit>
<operator, )>
<punctuator, ;>
<identifier, set_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<identifier, data_base>
<operator, )>
<punctuator, ;>
<identifier, set_limit>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, ,>
<identifier, data_limit>
<operator, )>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "pushl $0x17\n\tpop %%fs">
<operator, :>
<operator, :>
<operator, )>
<punctuator, ;>
<identifier, data_base>
<operator, +>
<operator, =>
<identifier, data_limit>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<identifier, MAX_ARG_PAGES>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, i>
<operator, >>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, -->
<operator, )>
<punctuator, {>
<identifier, data_base>
<operator, ->
<operator, =>
<identifier, PAGE_SIZE>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, page>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<identifier, put_page>
<operator, (>
<identifier, page>
<operator, [>
<identifier, i>
<operator, ]>
<operator, ,>
<identifier, data_base>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<identifier, data_limit>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, do_execve>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, eip>
<operator, ,>
<keyword, long>
<identifier, tmp>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, char>
<operator, *>
<operator, *>
<identifier, argv>
<operator, ,>
<keyword, char>
<operator, *>
<operator, *>
<identifier, envp>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, exec>
<identifier, ex>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<identifier, page>
<operator, [>
<identifier, MAX_ARG_PAGES>
<operator, ]>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, argc>
<operator, ,>
<identifier, envc>
<punctuator, ;>
<keyword, int>
<identifier, e_uid>
<operator, ,>
<identifier, e_gid>
<punctuator, ;>
<keyword, int>
<identifier, retval>
<punctuator, ;>
<keyword, int>
<identifier, sh_bang>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<identifier, p>
<operator, =>
<identifier, PAGE_SIZE>
<operator, *>
<identifier, MAX_ARG_PAGES>
<operator, ->
<integer_constant, 4>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<integer_constant, 0xffff>
<operator, &>
<identifier, eip>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<operator, !>
<operator, =>
<integer_constant, 0x000f>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "execve called from supervisor mode">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, MAX_ARG_PAGES>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, page>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<identifier, argc>
<operator, =>
<identifier, count>
<operator, (>
<identifier, argv>
<operator, )>
<punctuator, ;>
<identifier, envc>
<operator, =>
<identifier, count>
<operator, (>
<identifier, envp>
<operator, )>
<punctuator, ;>
<identifier, restart_interp>
<operator, :>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISREG>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<identifier, i>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<punctuator, ;>
<identifier, e_uid>
<operator, =>
<operator, (>
<identifier, i>
<operator, &>
<identifier, S_ISUID>
<operator, )>
<operator, ?>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, :>
<identifier, current>
<operator, ->>
<identifier, euid>
<punctuator, ;>
<identifier, e_gid>
<operator, =>
<operator, (>
<identifier, i>
<operator, &>
<identifier, S_ISGID>
<operator, )>
<operator, ?>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, :>
<identifier, current>
<operator, ->>
<identifier, egid>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, )>
<identifier, i>
<operator, >>>
<operator, =>
<integer_constant, 6>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, egid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, )>
<identifier, i>
<operator, >>>
<operator, =>
<integer_constant, 3>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, i>
<operator, &>
<integer_constant, 1>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, &>
<integer_constant, 0111>
<operator, )>
<operator, &>
<operator, &>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOEXEC>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<identifier, ex>
<operator, =>
<operator, *>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, exec>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ==>
<character_constant, '#'>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ==>
<character_constant, '!'>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<operator, !>
<identifier, sh_bang>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, char>
<identifier, buf>
<operator, [>
<integer_constant, 1023>
<operator, ]>
<operator, ,>
<operator, *>
<identifier, cp>
<operator, ,>
<operator, *>
<identifier, interp>
<operator, ,>
<operator, *>
<identifier, i_name>
<operator, ,>
<operator, *>
<identifier, i_arg>
<punctuator, ;>
<keyword, unsigned>
<keyword, long>
<identifier, old_fs>
<punctuator, ;>
<identifier, strncpy>
<operator, (>
<identifier, buf>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, +>
<integer_constant, 2>
<operator, ,>
<integer_constant, 1022>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, buf>
<operator, [>
<integer_constant, 1022>
<operator, ]>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, cp>
<operator, =>
<identifier, strchr>
<operator, (>
<identifier, buf>
<operator, ,>
<character_constant, '\n'>
<operator, )>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, cp>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, cp>
<operator, =>
<identifier, buf>
<punctuator, ;>
<operator, (>
<operator, *>
<identifier, cp>
<operator, ==>
<character_constant, ' '>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<operator, *>
<identifier, cp>
<operator, ==>
<character_constant, '\t'>
<operator, )>
<punctuator, ;>
<identifier, cp>
<operator, ++>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, cp>
<operator, |>
<operator, |>
<operator, *>
<identifier, cp>
<operator, ==>
<character_constant, '\0'>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOEXEC>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error1>
<punctuator, ;>
<punctuator, }>
<identifier, interp>
<operator, =>
<identifier, i_name>
<operator, =>
<identifier, cp>
<punctuator, ;>
<identifier, i_arg>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<punctuator, ;>
<operator, *>
<identifier, cp>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, cp>
<operator, !>
<operator, =>
<character_constant, ' '>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<operator, *>
<identifier, cp>
<operator, !>
<operator, =>
<character_constant, '\t'>
<operator, )>
<punctuator, ;>
<identifier, cp>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, *>
<identifier, cp>
<operator, ==>
<character_constant, '/'>
<operator, )>
<identifier, i_name>
<operator, =>
<identifier, cp>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, *>
<identifier, cp>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, cp>
<operator, ++>
<operator, =>
<character_constant, '\0'>
<punctuator, ;>
<identifier, i_arg>
<operator, =>
<identifier, cp>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, sh_bang>
<operator, ++>
<operator, ==>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<identifier, envc>
<operator, ,>
<identifier, envp>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<operator, -->
<identifier, argc>
<operator, ,>
<identifier, argv>
<operator, +>
<integer_constant, 1>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<integer_constant, 1>
<operator, ,>
<operator, &>
<identifier, filename>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, argc>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i_arg>
<operator, )>
<punctuator, {>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<integer_constant, 1>
<operator, ,>
<operator, &>
<identifier, i_arg>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<identifier, argc>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<integer_constant, 1>
<operator, ,>
<operator, &>
<identifier, i_name>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 2>
<operator, )>
<punctuator, ;>
<identifier, argc>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOMEM>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error1>
<punctuator, ;>
<punctuator, }>
<identifier, old_fs>
<operator, =>
<identifier, get_fs>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, set_fs>
<operator, (>
<identifier, get_ds>
<operator, (>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, interp>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error1>
<punctuator, ;>
<punctuator, }>
<identifier, set_fs>
<operator, (>
<identifier, old_fs>
<operator, )>
<punctuator, ;>
<keyword, goto>
<identifier, restart_interp>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, N_MAGIC>
<operator, (>
<identifier, ex>
<operator, )>
<operator, !>
<operator, =>
<identifier, ZMAGIC>
<operator, |>
<operator, |>
<identifier, ex>
<operator, .>
<identifier, a_trsize>
<operator, |>
<operator, |>
<identifier, ex>
<operator, .>
<identifier, a_drsize>
<operator, |>
<operator, |>
<identifier, ex>
<operator, .>
<identifier, a_text>
<operator, +>
<identifier, ex>
<operator, .>
<identifier, a_data>
<operator, +>
<identifier, ex>
<operator, .>
<identifier, a_bss>
<operator, >>
<integer_constant, 0x3000000>
<operator, |>
<operator, |>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, <>
<identifier, ex>
<operator, .>
<identifier, a_text>
<operator, +>
<identifier, ex>
<operator, .>
<identifier, a_data>
<operator, +>
<identifier, ex>
<operator, .>
<identifier, a_syms>
<operator, +>
<identifier, N_TXTOFF>
<operator, (>
<identifier, ex>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOEXEC>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, N_TXTOFF>
<operator, (>
<identifier, ex>
<operator, )>
<operator, !>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "%s: N_TXTOFF != BLOCK_SIZE. See a.out.h.">
<operator, ,>
<identifier, filename>
<operator, )>
<punctuator, ;>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOEXEC>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, sh_bang>
<operator, )>
<punctuator, {>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<identifier, envc>
<operator, ,>
<identifier, envp>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, copy_strings>
<operator, (>
<identifier, argc>
<operator, ,>
<identifier, argv>
<operator, ,>
<identifier, page>
<operator, ,>
<identifier, p>
<operator, ,>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, p>
<operator, )>
<punctuator, {>
<identifier, retval>
<operator, =>
<operator, ->
<identifier, ENOMEM>
<punctuator, ;>
<keyword, goto>
<identifier, exec_error2>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, )>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, executable>
<operator, =>
<identifier, inode>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 32>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, sigaction>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, sa_handler>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_OPEN>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, >>>
<identifier, i>
<operator, )>
<operator, &>
<integer_constant, 1>
<operator, )>
<identifier, sys_close>
<operator, (>
<identifier, i>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, free_page_tables>
<operator, (>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, )>
<operator, ,>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x0f>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, free_page_tables>
<operator, (>
<identifier, get_base>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, ldt>
<operator, [>
<integer_constant, 2>
<operator, ]>
<operator, )>
<operator, ,>
<identifier, get_limit>
<operator, (>
<integer_constant, 0x17>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, last_task_used_math>
<operator, ==>
<identifier, current>
<operator, )>
<identifier, last_task_used_math>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, used_math>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, +>
<operator, =>
<identifier, change_ldt>
<operator, (>
<identifier, ex>
<operator, .>
<identifier, a_text>
<operator, ,>
<identifier, page>
<operator, )>
<operator, ->
<identifier, MAX_ARG_PAGES>
<operator, *>
<identifier, PAGE_SIZE>
<punctuator, ;>
<identifier, p>
<operator, =>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, )>
<identifier, create_tables>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, p>
<operator, ,>
<identifier, argc>
<operator, ,>
<identifier, envc>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, brk>
<operator, =>
<identifier, ex>
<operator, .>
<identifier, a_bss>
<operator, +>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, end_data>
<operator, =>
<identifier, ex>
<operator, .>
<identifier, a_data>
<operator, +>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, end_code>
<operator, =>
<identifier, ex>
<operator, .>
<identifier, a_text>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, start_stack>
<operator, =>
<identifier, p>
<operator, &>
<integer_constant, 0xfffff000>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, =>
<identifier, e_uid>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, egid>
<operator, =>
<identifier, e_gid>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, ex>
<operator, .>
<identifier, a_text>
<operator, +>
<identifier, ex>
<operator, .>
<identifier, a_data>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, &>
<integer_constant, 0xfff>
<operator, )>
<identifier, put_fs_byte>
<operator, (>
<integer_constant, 0>
<operator, ,>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<operator, (>
<identifier, i>
<operator, ++>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, eip>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, =>
<identifier, ex>
<operator, .>
<identifier, a_entry>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, exec_error2>
<operator, :>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, exec_error1>
<operator, :>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, MAX_ARG_PAGES>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, free_page>
<operator, (>
<identifier, page>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, retval>
<operator, )>
<punctuator, ;>
<punctuator, }>
