<punctuator, #>
<identifier, include>
<header_name, <linux/config.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<keyword, int>
<identifier, sync_dev>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, ;>
<keyword, void>
<identifier, wait_for_keypress>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, ;>
<operator, #>
<identifier, define>
<identifier, set_bit>
<operator, (>
<identifier, bitnr>
<operator, ,>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, int>
<identifier, __res>
<identifier, __asm__>
<operator, (>
<string_literal, "ax">
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "bt %2,%3;setb %%al">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<string_literal, "a">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, bitnr>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<keyword, struct>
<identifier, super_block>
<identifier, super_block>
<operator, [>
<identifier, NR_SUPER>
<operator, ]>
<punctuator, ;>
<keyword, int>
<identifier, ROOT_DEV>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, static>
<keyword, void>
<identifier, lock_super>
<operator, (>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_wait>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_lock>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, free_super>
<operator, (>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_lock>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, wake_up>
<operator, (>
<operator, &>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_wait>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, void>
<identifier, wait_on_super>
<operator, (>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<operator, )>
<punctuator, {>
<identifier, cli>
<operator, (>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_lock>
<operator, )>
<identifier, sleep_on>
<operator, (>
<operator, &>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_wait>
<operator, )>
<operator, )>
<punctuator, ;>
<identifier, sti>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, get_super>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, s>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, dev>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, s>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, super_block>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, s>
<operator, <>
<identifier, NR_SUPER>
<operator, +>
<identifier, super_block>
<operator, )>
<keyword, if>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, ==>
<identifier, dev>
<operator, )>
<punctuator, {>
<identifier, wait_on_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, ==>
<identifier, dev>
<operator, )>
<keyword, return>
<identifier, s>
<punctuator, ;>
<identifier, s>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, super_block>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, s>
<operator, ++>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, put_super>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, int>
<identifier, i>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, dev>
<operator, ==>
<identifier, ROOT_DEV>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "root diskette changed: prepare for armageddon\n\r">
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Mounted disk changed - tssk, tssk\n\r">
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, lock_super>
<operator, (>
<identifier, sb>
<operator, )>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, I_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, brelse>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, Z_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, brelse>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, free_super>
<operator, (>
<identifier, sb>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, read_super>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, s>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, block>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, dev>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, check_disk_change>
<operator, (>
<identifier, dev>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, s>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<keyword, return>
<identifier, s>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, s>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, super_block>
<punctuator, ;>
<punctuator, ;>
<identifier, s>
<operator, ++>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, s>
<operator, >>
<operator, =>
<identifier, NR_SUPER>
<operator, +>
<identifier, super_block>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, =>
<identifier, dev>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_isup>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_imount>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_time>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_rd_only>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, lock_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, dev>
<operator, ,>
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, free_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<operator, *>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_super_block>
<operator, *>
<operator, )>
<identifier, s>
<operator, )>
<operator, =>
<operator, *>
<operator, (>
<operator, (>
<keyword, struct>
<identifier, d_super_block>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_magic>
<operator, !>
<operator, =>
<identifier, SUPER_MAGIC>
<operator, )>
<punctuator, {>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, free_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, I_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, s>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, Z_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, s>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, block>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, s>
<operator, ->>
<identifier, s_imap_blocks>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<identifier, block>
<operator, ++>
<punctuator, ;>
<keyword, else>
<keyword, break>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, s>
<operator, ->>
<identifier, s_zmap_blocks>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<identifier, block>
<operator, ++>
<punctuator, ;>
<keyword, else>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, +>
<identifier, s>
<operator, ->>
<identifier, s_imap_blocks>
<operator, +>
<identifier, s>
<operator, ->>
<identifier, s_zmap_blocks>
<operator, )>
<punctuator, {>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, I_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, brelse>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, Z_MAP_SLOTS>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, brelse>
<operator, (>
<identifier, s>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, free_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<identifier, s>
<operator, ->>
<identifier, s_imap>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, |>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, s>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, |>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, free_super>
<operator, (>
<identifier, s>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, s>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_umount>
<operator, (>
<keyword, char>
<operator, *>
<identifier, dev_name>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, int>
<identifier, dev>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, dev_name>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISBLK>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOTBLK>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, dev>
<operator, ==>
<identifier, ROOT_DEV>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EBUSY>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, ->>
<identifier, i_mount>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "Mounted inode has i_mount=0\n">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, inode_table>
<operator, +>
<integer_constant, 0>
<punctuator, ;>
<identifier, inode>
<operator, <>
<identifier, inode_table>
<operator, +>
<identifier, NR_INODE>
<punctuator, ;>
<identifier, inode>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ==>
<identifier, dev>
<operator, &>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EBUSY>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, ->>
<identifier, i_mount>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, )>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_isup>
<operator, )>
<punctuator, ;>
<identifier, sb>
<operator, ->>
<identifier, s_isup>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, put_super>
<operator, (>
<identifier, dev>
<operator, )>
<punctuator, ;>
<identifier, sync_dev>
<operator, (>
<identifier, dev>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_mount>
<operator, (>
<keyword, char>
<operator, *>
<identifier, dev_name>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, dir_name>
<operator, ,>
<keyword, int>
<identifier, rw_flag>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dev_i>
<operator, ,>
<operator, *>
<identifier, dir_i>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, int>
<identifier, dev>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dev_i>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, dev_name>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, dev_i>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISBLK>
<operator, (>
<identifier, dev_i>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dev_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, dev_i>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir_i>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, dir_name>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, dir_i>
<operator, ->>
<identifier, i_count>
<operator, !>
<operator, =>
<integer_constant, 1>
<operator, |>
<operator, |>
<identifier, dir_i>
<operator, ->>
<identifier, i_num>
<operator, ==>
<identifier, ROOT_INO>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EBUSY>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISDIR>
<operator, (>
<identifier, dir_i>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, read_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EBUSY>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EBUSY>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, dir_i>
<operator, ->>
<identifier, i_mount>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir_i>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, =>
<identifier, dir_i>
<punctuator, ;>
<identifier, dir_i>
<operator, ->>
<identifier, i_mount>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, dir_i>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, mount_root>
<operator, (>
<keyword, void>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, free>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, mi>
<punctuator, ;>
<keyword, if>
<operator, (>
<integer_constant, 32>
<operator, !>
<operator, =>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, d_inode>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "bad i-node size">
<operator, )>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_FILE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, file_table>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, MAJOR>
<operator, (>
<identifier, ROOT_DEV>
<operator, )>
<operator, ==>
<integer_constant, 2>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Insert root floppy and press ENTER">
<operator, )>
<punctuator, ;>
<identifier, wait_for_keypress>
<operator, (>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, p>
<operator, =>
<operator, &>
<identifier, super_block>
<operator, [>
<integer_constant, 0>
<operator, ]>
<punctuator, ;>
<identifier, p>
<operator, <>
<operator, &>
<identifier, super_block>
<operator, [>
<identifier, NR_SUPER>
<operator, ]>
<punctuator, ;>
<identifier, p>
<operator, ++>
<operator, )>
<punctuator, {>
<identifier, p>
<operator, ->>
<identifier, s_dev>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, s_lock>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, s_wait>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, p>
<operator, =>
<identifier, read_super>
<operator, (>
<identifier, ROOT_DEV>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Unable to mount root">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, mi>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, ROOT_DEV>
<operator, ,>
<identifier, ROOT_INO>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Unable to read root i-node">
<operator, )>
<punctuator, ;>
<identifier, mi>
<operator, ->>
<identifier, i_count>
<operator, +>
<operator, =>
<integer_constant, 3>
<punctuator, ;>
<identifier, p>
<operator, ->>
<identifier, s_isup>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, s_imount>
<operator, =>
<identifier, mi>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, =>
<identifier, mi>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, =>
<identifier, mi>
<punctuator, ;>
<identifier, free>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, s_nzones>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, i>
<operator, >>
<operator, =>
<integer_constant, 0>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, set_bit>
<operator, (>
<identifier, i>
<operator, &>
<integer_constant, 8191>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, >>>
<integer_constant, 13>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<identifier, free>
<operator, ++>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%d/%d free blocks\n\r">
<operator, ,>
<identifier, free>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, s_nzones>
<operator, )>
<punctuator, ;>
<identifier, free>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, =>
<identifier, p>
<operator, ->>
<identifier, s_ninodes>
<operator, +>
<integer_constant, 1>
<punctuator, ;>
<keyword, while>
<operator, (>
<operator, -->
<identifier, i>
<operator, >>
<operator, =>
<integer_constant, 0>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, set_bit>
<operator, (>
<identifier, i>
<operator, &>
<integer_constant, 8191>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, >>>
<integer_constant, 13>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<identifier, free>
<operator, ++>
<punctuator, ;>
<identifier, printk>
<operator, (>
<string_literal, "%d/%d free inodes\n\r">
<operator, ,>
<identifier, free>
<operator, ,>
<identifier, p>
<operator, ->>
<identifier, s_ninodes>
<operator, )>
<punctuator, ;>
<punctuator, }>
