<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<operator, #>
<identifier, define>
<identifier, clear_block>
<operator, (>
<identifier, addr>
<operator, )>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<unknown, \>
<string_literal, "rep\n\t">
<unknown, \>
<string_literal, "stosl">
<unknown, \>
<operator, :>
<operator, :>
<string_literal, "a">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, BLOCK_SIZE>
<operator, />
<integer_constant, 4>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, )>
<operator, #>
<identifier, define>
<identifier, set_bit>
<operator, (>
<identifier, nr>
<operator, ,>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, int>
<identifier, res>
<identifier, __asm__>
<operator, (>
<string_literal, "ax">
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<identifier, __volatile__>
<operator, (>
<string_literal, "btsl %2,%3\n\tsetb %%al">
<operator, :>
<unknown, \>
<string_literal, "=a">
<operator, (>
<identifier, res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, nr>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, clear_bit>
<operator, (>
<identifier, nr>
<operator, ,>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, register>
<keyword, int>
<identifier, res>
<identifier, __asm__>
<operator, (>
<string_literal, "ax">
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<identifier, __volatile__>
<operator, (>
<string_literal, "btrl %2,%3\n\tsetnb %%al">
<operator, :>
<unknown, \>
<string_literal, "=a">
<operator, (>
<identifier, res>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "r">
<operator, (>
<identifier, nr>
<operator, )>
<operator, ,>
<string_literal, "m">
<operator, (>
<operator, *>
<operator, (>
<identifier, addr>
<operator, )>
<operator, )>
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<operator, #>
<identifier, define>
<identifier, find_first_zero>
<operator, (>
<identifier, addr>
<operator, )>
<operator, (>
<punctuator, {>
<unknown, \>
<keyword, int>
<identifier, __res>
<punctuator, ;>
<unknown, \>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n">
<unknown, \>
<string_literal, "1:\tlodsl\n\t">
<unknown, \>
<string_literal, "notl %%eax\n\t">
<unknown, \>
<string_literal, "bsfl %%eax,%%edx\n\t">
<unknown, \>
<string_literal, "je 2f\n\t">
<unknown, \>
<string_literal, "addl %%edx,%%ecx\n\t">
<unknown, \>
<string_literal, "jmp 3f\n">
<unknown, \>
<string_literal, "2:\taddl $32,%%ecx\n\t">
<unknown, \>
<string_literal, "cmpl $8192,%%ecx\n\t">
<unknown, \>
<string_literal, "jl 1b\n">
<unknown, \>
<string_literal, "3:">
<unknown, \>
<operator, :>
<string_literal, "=c">
<operator, (>
<identifier, __res>
<operator, )>
<operator, :>
<string_literal, "c">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<identifier, addr>
<operator, )>
<operator, :>
<string_literal, "ax">
<operator, ,>
<string_literal, "dx">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<unknown, \>
<identifier, __res>
<punctuator, ;>
<punctuator, }>
<operator, )>
<keyword, void>
<identifier, free_block>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, int>
<identifier, block>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to free block on nonexistent device">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, block>
<operator, <>
<identifier, sb>
<operator, ->>
<identifier, s_firstdatazone>
<operator, |>
<operator, |>
<identifier, block>
<operator, >>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_nzones>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to free block not in datazone">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, get_hash_table>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, !>
<operator, =>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "trying to free block (%04x:%d), count=%d\n">
<operator, ,>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, block>
<operator, ->
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_firstdatazone>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, clear_bit>
<operator, (>
<identifier, block>
<operator, &>
<integer_constant, 8191>
<operator, ,>
<identifier, sb>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, block>
<operator, />
<integer_constant, 8192>
<operator, ]>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "block (%04x:%d) ">
<operator, ,>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_firstdatazone>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "free_block: bit already cleared">
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, sb>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, block>
<operator, />
<integer_constant, 8192>
<operator, ]>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, new_block>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, j>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to get new block from nonexistant device">
<operator, )>
<punctuator, ;>
<identifier, j>
<operator, =>
<integer_constant, 8192>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 8>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_zmap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<keyword, if>
<operator, (>
<operator, (>
<identifier, j>
<operator, =>
<identifier, find_first_zero>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 8192>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<operator, =>
<integer_constant, 8>
<operator, |>
<operator, |>
<operator, !>
<identifier, bh>
<operator, |>
<operator, |>
<identifier, j>
<operator, >>
<operator, =>
<integer_constant, 8192>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, set_bit>
<operator, (>
<identifier, j>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "new_block: bit already set">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, j>
<operator, +>
<operator, =>
<identifier, i>
<operator, *>
<integer_constant, 8192>
<operator, +>
<identifier, sb>
<operator, ->>
<identifier, s_firstdatazone>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, j>
<operator, >>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_nzones>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, j>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "new_block: cannot get block">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_count>
<operator, !>
<operator, =>
<integer_constant, 1>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "new block: count is != 1">
<operator, )>
<punctuator, ;>
<identifier, clear_block>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_uptodate>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, j>
<punctuator, ;>
<punctuator, }>
<keyword, void>
<identifier, free_inode>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<keyword, return>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, {>
<identifier, memset>
<operator, (>
<identifier, inode>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<keyword, sizeof>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, return>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, >>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "trying to free inode with count=%d\n">
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, )>
<punctuator, ;>
<identifier, panic>
<operator, (>
<string_literal, "free_inode">
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to free inode with links">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to free inode on nonexistent device">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, <>
<integer_constant, 1>
<operator, |>
<operator, |>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, >>
<identifier, sb>
<operator, ->>
<identifier, s_ninodes>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "trying to free inode 0 or nonexistant inode">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, >>>
<integer_constant, 13>
<operator, ]>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "nonexistent imap in superblock">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, clear_bit>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, &>
<integer_constant, 8191>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "free_inode: bit already cleared.\n\r">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, memset>
<operator, (>
<identifier, inode>
<operator, ,>
<integer_constant, 0>
<operator, ,>
<keyword, sizeof>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, new_inode>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, j>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, get_empty_inode>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<identifier, dev>
<operator, )>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "new_inode with unknown device">
<operator, )>
<punctuator, ;>
<identifier, j>
<operator, =>
<integer_constant, 8192>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<integer_constant, 8>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_imap>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<keyword, if>
<operator, (>
<operator, (>
<identifier, j>
<operator, =>
<identifier, find_first_zero>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 8192>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, |>
<operator, |>
<identifier, j>
<operator, >>
<operator, =>
<integer_constant, 8192>
<operator, |>
<operator, |>
<identifier, j>
<operator, +>
<identifier, i>
<operator, *>
<integer_constant, 8192>
<operator, >>
<identifier, sb>
<operator, ->>
<identifier, s_ninodes>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, set_bit>
<operator, (>
<identifier, j>
<operator, ,>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "new_inode: bit already set">
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, =>
<identifier, dev>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, euid>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, egid>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, =>
<identifier, j>
<operator, +>
<identifier, i>
<operator, *>
<integer_constant, 8192>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<punctuator, }>
