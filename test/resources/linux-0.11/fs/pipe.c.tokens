<punctuator, #>
<identifier, include>
<header_name, <signal.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/mm.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<keyword, int>
<identifier, read_pipe>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, chars>
<operator, ,>
<identifier, size>
<operator, ,>
<identifier, read>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, count>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, while>
<operator, (>
<operator, !>
<operator, (>
<identifier, size>
<operator, =>
<identifier, PIPE_SIZE>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<keyword, return>
<identifier, read>
<punctuator, ;>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, chars>
<operator, =>
<identifier, PAGE_SIZE>
<operator, ->
<identifier, PIPE_TAIL>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, count>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, count>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, size>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, size>
<punctuator, ;>
<identifier, count>
<operator, ->
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, read>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, size>
<operator, =>
<identifier, PIPE_TAIL>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, PIPE_TAIL>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, PIPE_TAIL>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, &>
<operator, =>
<operator, (>
<identifier, PAGE_SIZE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, put_fs_byte>
<operator, (>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, )>
<operator, [>
<identifier, size>
<operator, ++>
<operator, ]>
<operator, ,>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, read>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, write_pipe>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, chars>
<operator, ,>
<identifier, size>
<operator, ,>
<identifier, written>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, count>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<keyword, while>
<operator, (>
<operator, !>
<operator, (>
<identifier, size>
<operator, =>
<operator, (>
<identifier, PAGE_SIZE>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, ->
<identifier, PIPE_SIZE>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, signal>
<operator, |>
<operator, =>
<operator, (>
<integer_constant, 1>
<operator, <<>
<operator, (>
<identifier, SIGPIPE>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, written>
<operator, ?>
<identifier, written>
<operator, :>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, sleep_on>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, chars>
<operator, =>
<identifier, PAGE_SIZE>
<operator, ->
<identifier, PIPE_HEAD>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, count>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, count>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, size>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, size>
<punctuator, ;>
<identifier, count>
<operator, ->
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, written>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, size>
<operator, =>
<identifier, PIPE_HEAD>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, PIPE_HEAD>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, PIPE_HEAD>
<operator, (>
<operator, *>
<identifier, inode>
<operator, )>
<operator, &>
<operator, =>
<operator, (>
<identifier, PAGE_SIZE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, )>
<operator, [>
<identifier, size>
<operator, ++>
<operator, ]>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, wake_up>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_wait>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, written>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_pipe>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, fildes>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, f>
<operator, [>
<integer_constant, 2>
<operator, ]>
<punctuator, ;>
<keyword, int>
<identifier, fd>
<operator, [>
<integer_constant, 2>
<operator, ]>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, j>
<punctuator, ;>
<identifier, j>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, j>
<operator, <>
<integer_constant, 2>
<operator, &>
<operator, &>
<identifier, i>
<operator, <>
<identifier, NR_FILE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, file_table>
<operator, [>
<identifier, i>
<operator, ]>
<operator, .>
<identifier, f_count>
<operator, )>
<operator, (>
<identifier, f>
<operator, [>
<identifier, j>
<operator, ++>
<operator, ]>
<operator, =>
<identifier, i>
<operator, +>
<identifier, file_table>
<operator, )>
<operator, ->>
<identifier, f_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, j>
<operator, ==>
<integer_constant, 1>
<operator, )>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, j>
<operator, <>
<integer_constant, 2>
<operator, )>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<identifier, j>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, j>
<operator, <>
<integer_constant, 2>
<operator, &>
<operator, &>
<identifier, i>
<operator, <>
<identifier, NR_OPEN>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, i>
<operator, ]>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, [>
<identifier, j>
<operator, ]>
<operator, =>
<identifier, i>
<operator, ]>
<operator, =>
<identifier, f>
<operator, [>
<identifier, j>
<operator, ]>
<punctuator, ;>
<identifier, j>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, j>
<operator, ==>
<integer_constant, 1>
<operator, )>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, j>
<operator, <>
<integer_constant, 2>
<operator, )>
<punctuator, {>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_count>
<operator, =>
<identifier, f>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, get_pipe_inode>
<operator, (>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ]>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_count>
<operator, =>
<identifier, f>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_inode>
<operator, =>
<identifier, f>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ->>
<identifier, f_inode>
<operator, =>
<identifier, inode>
<punctuator, ;>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_pos>
<operator, =>
<identifier, f>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ->>
<identifier, f_pos>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, f>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ->>
<identifier, f_mode>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<identifier, fd>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, ,>
<integer_constant, 0>
<operator, +>
<identifier, fildes>
<operator, )>
<punctuator, ;>
<identifier, put_fs_long>
<operator, (>
<identifier, fd>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, ,>
<integer_constant, 1>
<operator, +>
<identifier, fildes>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
