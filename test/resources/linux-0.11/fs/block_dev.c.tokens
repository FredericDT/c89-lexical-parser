<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/system.h>>
<keyword, int>
<identifier, block_write>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, long>
<operator, *>
<identifier, pos>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, block>
<operator, =>
<operator, *>
<identifier, pos>
<operator, >>>
<identifier, BLOCK_SIZE_BITS>
<punctuator, ;>
<keyword, int>
<identifier, offset>
<operator, =>
<operator, *>
<identifier, pos>
<operator, &>
<operator, (>
<identifier, BLOCK_SIZE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, int>
<identifier, chars>
<punctuator, ;>
<keyword, int>
<identifier, written>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, register>
<keyword, char>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, count>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, chars>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, ->
<identifier, offset>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, count>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, count>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, ==>
<identifier, BLOCK_SIZE>
<operator, )>
<identifier, bh>
<operator, =>
<identifier, getblk>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, )>
<punctuator, ;>
<keyword, else>
<identifier, bh>
<operator, =>
<identifier, breada>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 1>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, ,>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<identifier, block>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<keyword, return>
<identifier, written>
<operator, ?>
<identifier, written>
<operator, :>
<operator, ->
<identifier, EIO>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, offset>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<identifier, offset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, *>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, written>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, count>
<operator, ->
<operator, =>
<identifier, chars>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<identifier, written>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, block_read>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, unsigned>
<keyword, long>
<operator, *>
<identifier, pos>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, block>
<operator, =>
<operator, *>
<identifier, pos>
<operator, >>>
<identifier, BLOCK_SIZE_BITS>
<punctuator, ;>
<keyword, int>
<identifier, offset>
<operator, =>
<operator, *>
<identifier, pos>
<operator, &>
<operator, (>
<identifier, BLOCK_SIZE>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<keyword, int>
<identifier, chars>
<punctuator, ;>
<keyword, int>
<identifier, read>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, register>
<keyword, char>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, count>
<operator, >>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, chars>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, ->
<identifier, offset>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, chars>
<operator, >>
<identifier, count>
<operator, )>
<identifier, chars>
<operator, =>
<identifier, count>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, breada>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, block>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 1>
<operator, ,>
<identifier, block>
<operator, +>
<integer_constant, 2>
<operator, ,>
<operator, ->
<integer_constant, 1>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, read>
<operator, ?>
<identifier, read>
<operator, :>
<operator, ->
<identifier, EIO>
<punctuator, ;>
<identifier, block>
<operator, ++>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, offset>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<identifier, offset>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, *>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, read>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, count>
<operator, ->
<operator, =>
<identifier, chars>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, put_fs_byte>
<operator, (>
<operator, *>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, ,>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<identifier, read>
<punctuator, ;>
<punctuator, }>
