<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<operator, #>
<identifier, define>
<identifier, MIN>
<operator, (>
<identifier, a>
<operator, ,>
<identifier, b>
<operator, )>
<operator, (>
<operator, (>
<operator, (>
<identifier, a>
<operator, )>
<operator, <>
<operator, (>
<identifier, b>
<operator, )>
<operator, )>
<operator, ?>
<operator, (>
<identifier, a>
<operator, )>
<operator, :>
<operator, (>
<identifier, b>
<operator, )>
<operator, )>
<operator, #>
<identifier, define>
<identifier, MAX>
<operator, (>
<identifier, a>
<operator, ,>
<identifier, b>
<operator, )>
<operator, (>
<operator, (>
<operator, (>
<identifier, a>
<operator, )>
<operator, >>
<operator, (>
<identifier, b>
<operator, )>
<operator, )>
<operator, ?>
<operator, (>
<identifier, a>
<operator, )>
<operator, :>
<operator, (>
<identifier, b>
<operator, )>
<operator, )>
<keyword, int>
<identifier, file_read>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, filp>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, left>
<operator, ,>
<identifier, chars>
<operator, ,>
<identifier, nr>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, left>
<operator, =>
<identifier, count>
<operator, )>
<operator, <>
<operator, =>
<integer_constant, 0>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, left>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, nr>
<operator, =>
<identifier, bmap>
<operator, (>
<identifier, inode>
<operator, ,>
<operator, (>
<identifier, filp>
<operator, ->>
<identifier, f_pos>
<operator, )>
<operator, />
<identifier, BLOCK_SIZE>
<operator, )>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, nr>
<operator, )>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, bh>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, nr>
<operator, =>
<identifier, filp>
<operator, ->>
<identifier, f_pos>
<operator, %>
<identifier, BLOCK_SIZE>
<punctuator, ;>
<identifier, chars>
<operator, =>
<identifier, MIN>
<operator, (>
<identifier, BLOCK_SIZE>
<operator, ->
<identifier, nr>
<operator, ,>
<identifier, left>
<operator, )>
<punctuator, ;>
<identifier, filp>
<operator, ->>
<identifier, f_pos>
<operator, +>
<operator, =>
<identifier, chars>
<punctuator, ;>
<identifier, left>
<operator, ->
<operator, =>
<identifier, chars>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, char>
<operator, *>
<identifier, p>
<operator, =>
<identifier, nr>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, put_fs_byte>
<operator, (>
<operator, *>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, ,>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<punctuator, {>
<keyword, while>
<operator, (>
<identifier, chars>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<identifier, put_fs_byte>
<operator, (>
<integer_constant, 0>
<operator, ,>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, count>
<operator, ->
<identifier, left>
<operator, )>
<operator, ?>
<operator, (>
<identifier, count>
<operator, ->
<identifier, left>
<operator, )>
<operator, :>
<operator, ->
<identifier, ERROR>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, file_write>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, filp>
<operator, ,>
<keyword, char>
<operator, *>
<identifier, buf>
<operator, ,>
<keyword, int>
<identifier, count>
<operator, )>
<punctuator, {>
<identifier, off_t>
<identifier, pos>
<punctuator, ;>
<keyword, int>
<identifier, block>
<operator, ,>
<identifier, c>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, char>
<operator, *>
<identifier, p>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, filp>
<operator, ->>
<identifier, f_flags>
<operator, &>
<identifier, O_APPEND>
<operator, )>
<identifier, pos>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<punctuator, ;>
<keyword, else>
<identifier, pos>
<operator, =>
<identifier, filp>
<operator, ->>
<identifier, f_pos>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, <>
<identifier, count>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, block>
<operator, =>
<identifier, create_block>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, pos>
<operator, />
<identifier, BLOCK_SIZE>
<operator, )>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<keyword, break>
<punctuator, ;>
<identifier, c>
<operator, =>
<identifier, pos>
<operator, %>
<identifier, BLOCK_SIZE>
<punctuator, ;>
<identifier, p>
<operator, =>
<identifier, c>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, c>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, ->
<identifier, c>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, c>
<operator, >>
<identifier, count>
<operator, ->
<identifier, i>
<operator, )>
<identifier, c>
<operator, =>
<identifier, count>
<operator, ->
<identifier, i>
<punctuator, ;>
<identifier, pos>
<operator, +>
<operator, =>
<identifier, c>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, pos>
<operator, >>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, =>
<identifier, pos>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, i>
<operator, +>
<operator, =>
<identifier, c>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, c>
<operator, -->
<operator, >>
<integer_constant, 0>
<operator, )>
<operator, *>
<operator, (>
<identifier, p>
<operator, ++>
<operator, )>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, buf>
<operator, ++>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, filp>
<operator, ->>
<identifier, f_flags>
<operator, &>
<identifier, O_APPEND>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, filp>
<operator, ->>
<identifier, f_pos>
<operator, =>
<identifier, pos>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<operator, (>
<identifier, i>
<operator, ?>
<identifier, i>
<operator, :>
<operator, ->
<integer_constant, 1>
<operator, )>
<punctuator, ;>
<punctuator, }>
