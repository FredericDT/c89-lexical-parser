<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/types.h>>
<punctuator, #>
<identifier, include>
<header_name, <utime.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/tty.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<keyword, int>
<identifier, sys_ustat>
<operator, (>
<keyword, int>
<identifier, dev>
<operator, ,>
<keyword, struct>
<identifier, ustat>
<operator, *>
<identifier, ubuf>
<operator, )>
<punctuator, {>
<keyword, return>
<operator, ->
<identifier, ENOSYS>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_utime>
<operator, (>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, struct>
<identifier, utimbuf>
<operator, *>
<identifier, times>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, long>
<identifier, actime>
<operator, ,>
<identifier, modtime>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, times>
<operator, )>
<punctuator, {>
<identifier, actime>
<operator, =>
<identifier, get_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<operator, &>
<identifier, times>
<operator, ->>
<identifier, actime>
<operator, )>
<punctuator, ;>
<identifier, modtime>
<operator, =>
<identifier, get_fs_long>
<operator, (>
<operator, (>
<keyword, unsigned>
<keyword, long>
<operator, *>
<operator, )>
<operator, &>
<identifier, times>
<operator, ->>
<identifier, modtime>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<identifier, actime>
<operator, =>
<identifier, modtime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, actime>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, modtime>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_access>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, int>
<identifier, res>
<operator, ,>
<identifier, i_mode>
<punctuator, ;>
<identifier, mode>
<operator, &>
<operator, =>
<integer_constant, 0007>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<identifier, i_mode>
<operator, =>
<identifier, res>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, &>
<integer_constant, 0777>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, uid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, )>
<identifier, res>
<operator, >>>
<operator, =>
<integer_constant, 6>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, gid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, )>
<identifier, res>
<operator, >>>
<operator, =>
<integer_constant, 6>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, res>
<operator, &>
<integer_constant, 0007>
<operator, &>
<identifier, mode>
<operator, )>
<operator, ==>
<identifier, mode>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, uid>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<operator, !>
<operator, (>
<identifier, mode>
<operator, &>
<integer_constant, 1>
<operator, )>
<operator, |>
<operator, |>
<operator, (>
<identifier, i_mode>
<operator, &>
<integer_constant, 0111>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_chdir>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOTDIR>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, =>
<identifier, inode>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_chroot>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOTDIR>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, =>
<identifier, inode>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_chmod>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, !>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, =>
<operator, (>
<identifier, mode>
<operator, &>
<integer_constant, 07777>
<operator, )>
<operator, |>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, &>
<operator, ~>
<integer_constant, 07777>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_chown>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, uid>
<operator, ,>
<keyword, int>
<identifier, gid>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, filename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, =>
<identifier, uid>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, =>
<identifier, gid>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_open>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, flag>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, f>
<punctuator, ;>
<keyword, int>
<identifier, i>
<operator, ,>
<identifier, fd>
<punctuator, ;>
<identifier, mode>
<operator, &>
<operator, =>
<integer_constant, 0777>
<operator, &>
<operator, ~>
<identifier, current>
<operator, ->>
<identifier, umask>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, fd>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, fd>
<operator, <>
<identifier, NR_OPEN>
<punctuator, ;>
<identifier, fd>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, fd>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<integer_constant, 1>
<operator, <<>
<identifier, fd>
<operator, )>
<punctuator, ;>
<identifier, f>
<operator, =>
<integer_constant, 0>
<operator, +>
<identifier, file_table>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NR_FILE>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, ,>
<identifier, f>
<operator, ++>
<operator, )>
<keyword, if>
<operator, (>
<operator, !>
<identifier, f>
<operator, ->>
<identifier, f_count>
<operator, )>
<keyword, break>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, i>
<operator, >>
<operator, =>
<identifier, NR_FILE>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, =>
<identifier, f>
<operator, )>
<operator, ->>
<identifier, f_count>
<operator, ++>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, i>
<operator, =>
<identifier, open_namei>
<operator, (>
<identifier, filename>
<operator, ,>
<identifier, flag>
<operator, ,>
<identifier, mode>
<operator, ,>
<operator, &>
<identifier, inode>
<operator, )>
<operator, )>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<identifier, i>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, S_ISCHR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<keyword, if>
<operator, (>
<identifier, MAJOR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, ==>
<integer_constant, 4>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, leader>
<operator, &>
<operator, &>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, =>
<identifier, MINOR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, tty_table>
<operator, [>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, ]>
<operator, .>
<identifier, pgrp>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, pgrp>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, MAJOR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, ==>
<integer_constant, 5>
<operator, )>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, tty>
<operator, <>
<integer_constant, 0>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, S_ISBLK>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<identifier, check_disk_change>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_mode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_flags>
<operator, =>
<identifier, flag>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_count>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_inode>
<operator, =>
<identifier, inode>
<punctuator, ;>
<identifier, f>
<operator, ->>
<identifier, f_pos>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<keyword, return>
<operator, (>
<identifier, fd>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_creat>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, )>
<punctuator, {>
<keyword, return>
<identifier, sys_open>
<operator, (>
<identifier, pathname>
<operator, ,>
<identifier, O_CREAT>
<operator, |>
<identifier, O_TRUNC>
<operator, ,>
<identifier, mode>
<operator, )>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_close>
<operator, (>
<keyword, unsigned>
<keyword, int>
<identifier, fd>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, file>
<operator, *>
<identifier, filp>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, fd>
<operator, >>
<operator, =>
<identifier, NR_OPEN>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, close_on_exec>
<operator, &>
<operator, =>
<operator, ~>
<operator, (>
<integer_constant, 1>
<operator, <<>
<identifier, fd>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, filp>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EINVAL>
<punctuator, ;>
<identifier, current>
<operator, ->>
<identifier, filp>
<operator, [>
<identifier, fd>
<operator, ]>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, filp>
<operator, ->>
<identifier, f_count>
<operator, ==>
<integer_constant, 0>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "Close: file count is 0">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, -->
<identifier, filp>
<operator, ->>
<identifier, f_count>
<operator, )>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, filp>
<operator, ->>
<identifier, f_inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, (>
<integer_constant, 0>
<operator, )>
<punctuator, ;>
<punctuator, }>
