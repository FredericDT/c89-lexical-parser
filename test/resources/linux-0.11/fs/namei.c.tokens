<punctuator, #>
<identifier, include>
<header_name, <linux/sched.h>>
<punctuator, #>
<identifier, include>
<header_name, <linux/kernel.h>>
<punctuator, #>
<identifier, include>
<header_name, <asm/segment.h>>
<punctuator, #>
<identifier, include>
<header_name, <string.h>>
<punctuator, #>
<identifier, include>
<header_name, <fcntl.h>>
<punctuator, #>
<identifier, include>
<header_name, <errno.h>>
<punctuator, #>
<identifier, include>
<header_name, <const.h>>
<punctuator, #>
<identifier, include>
<header_name, <sys/stat.h>>
<operator, #>
<identifier, define>
<identifier, ACC_MODE>
<operator, (>
<identifier, x>
<operator, )>
<operator, (>
<string_literal, "\004\002\006\377">
<operator, [>
<operator, (>
<identifier, x>
<operator, )>
<operator, &>
<identifier, O_ACCMODE>
<operator, ]>
<operator, )>
<operator, #>
<identifier, define>
<identifier, MAY_EXEC>
<integer_constant, 1>
<operator, #>
<identifier, define>
<identifier, MAY_WRITE>
<integer_constant, 2>
<operator, #>
<identifier, define>
<identifier, MAY_READ>
<integer_constant, 4>
<keyword, static>
<keyword, int>
<identifier, permission>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, ,>
<keyword, int>
<identifier, mask>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, mode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, &>
<operator, &>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, )>
<identifier, mode>
<operator, >>>
<operator, =>
<integer_constant, 6>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, current>
<operator, ->>
<identifier, egid>
<operator, ==>
<identifier, inode>
<operator, ->>
<identifier, i_gid>
<operator, )>
<identifier, mode>
<operator, >>>
<operator, =>
<integer_constant, 3>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<operator, (>
<identifier, mode>
<operator, &>
<identifier, mask>
<operator, &>
<integer_constant, 0007>
<operator, )>
<operator, ==>
<identifier, mask>
<operator, )>
<operator, |>
<operator, |>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 1>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, match>
<operator, (>
<keyword, int>
<identifier, len>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, name>
<operator, ,>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<operator, )>
<punctuator, {>
<keyword, register>
<keyword, int>
<identifier, same>
<identifier, __asm__>
<operator, (>
<string_literal, "ax">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, de>
<operator, |>
<operator, |>
<operator, !>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, |>
<operator, |>
<identifier, len>
<operator, >>
<identifier, NAME_LEN>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, len>
<operator, <>
<identifier, NAME_LEN>
<operator, &>
<operator, &>
<identifier, de>
<operator, ->>
<identifier, name>
<operator, [>
<identifier, len>
<operator, ]>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, __asm__>
<operator, (>
<string_literal, "cld\n\t">
<string_literal, "fs ; repe ; cmpsb\n\t">
<string_literal, "setz %%al">
<operator, :>
<string_literal, "=a">
<operator, (>
<identifier, same>
<operator, )>
<operator, :>
<string_literal, "0">
<operator, (>
<integer_constant, 0>
<operator, )>
<operator, ,>
<string_literal, "S">
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<identifier, name>
<operator, )>
<operator, ,>
<string_literal, "D">
<operator, (>
<operator, (>
<keyword, long>
<operator, )>
<identifier, de>
<operator, ->>
<identifier, name>
<operator, )>
<operator, ,>
<string_literal, "c">
<operator, (>
<identifier, len>
<operator, )>
<operator, :>
<string_literal, "cx">
<operator, ,>
<string_literal, "di">
<operator, ,>
<string_literal, "si">
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, same>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, find_entry>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<operator, *>
<identifier, dir>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, name>
<operator, ,>
<keyword, int>
<identifier, namelen>
<operator, ,>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, *>
<identifier, res_dir>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, entries>
<punctuator, ;>
<keyword, int>
<identifier, block>
<operator, ,>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, struct>
<identifier, super_block>
<operator, *>
<identifier, sb>
<punctuator, ;>
<operator, #>
<identifier, ifdef>
<identifier, NO_TRUNCATE>
<keyword, if>
<operator, (>
<identifier, namelen>
<operator, >>
<identifier, NAME_LEN>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<operator, #>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, namelen>
<operator, >>
<identifier, NAME_LEN>
<operator, )>
<identifier, namelen>
<operator, =>
<identifier, NAME_LEN>
<punctuator, ;>
<operator, #>
<identifier, endif>
<identifier, entries>
<operator, =>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_size>
<operator, />
<operator, (>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, )>
<operator, )>
<punctuator, ;>
<operator, *>
<identifier, res_dir>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, namelen>
<operator, ==>
<integer_constant, 2>
<operator, &>
<operator, &>
<identifier, get_fs_byte>
<operator, (>
<identifier, name>
<operator, )>
<operator, ==>
<character_constant, '.'>
<operator, &>
<operator, &>
<identifier, get_fs_byte>
<operator, (>
<identifier, name>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, ==>
<character_constant, '.'>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ==>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, )>
<identifier, namelen>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, else>
<keyword, if>
<operator, (>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_num>
<operator, ==>
<identifier, ROOT_INO>
<operator, )>
<punctuator, {>
<identifier, sb>
<operator, =>
<identifier, get_super>
<operator, (>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<punctuator, ;>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, =>
<identifier, sb>
<operator, ->>
<identifier, s_imount>
<punctuator, ;>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, block>
<operator, =>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, i>
<operator, <>
<identifier, entries>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, de>
<operator, >>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, block>
<operator, =>
<identifier, bmap>
<operator, (>
<operator, *>
<identifier, dir>
<operator, ,>
<identifier, i>
<operator, />
<identifier, DIR_ENTRIES_PER_BLOCK>
<operator, )>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<operator, (>
<operator, *>
<identifier, dir>
<operator, )>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, i>
<operator, +>
<operator, =>
<identifier, DIR_ENTRIES_PER_BLOCK>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, match>
<operator, (>
<identifier, namelen>
<operator, ,>
<identifier, name>
<operator, ,>
<identifier, de>
<operator, )>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, res_dir>
<operator, =>
<identifier, de>
<punctuator, ;>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ++>
<punctuator, ;>
<identifier, i>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, add_entry>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, name>
<operator, ,>
<keyword, int>
<identifier, namelen>
<operator, ,>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, *>
<identifier, res_dir>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, block>
<operator, ,>
<identifier, i>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<operator, *>
<identifier, res_dir>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<operator, #>
<identifier, ifdef>
<identifier, NO_TRUNCATE>
<keyword, if>
<operator, (>
<identifier, namelen>
<operator, >>
<identifier, NAME_LEN>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<operator, #>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, namelen>
<operator, >>
<identifier, NAME_LEN>
<operator, )>
<identifier, namelen>
<operator, =>
<identifier, NAME_LEN>
<punctuator, ;>
<operator, #>
<identifier, endif>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, block>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<keyword, while>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<keyword, char>
<operator, *>
<operator, )>
<identifier, de>
<operator, >>
<operator, =>
<identifier, BLOCK_SIZE>
<operator, +>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, NULL>
<punctuator, ;>
<identifier, block>
<operator, =>
<identifier, create_block>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, i>
<operator, />
<identifier, DIR_ENTRIES_PER_BLOCK>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, block>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, i>
<operator, +>
<operator, =>
<identifier, DIR_ENTRIES_PER_BLOCK>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, i>
<operator, *>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, )>
<operator, >>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_size>
<operator, )>
<punctuator, {>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_size>
<operator, =>
<operator, (>
<identifier, i>
<operator, +>
<integer_constant, 1>
<operator, )>
<operator, *>
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, )>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, dir>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, for>
<operator, (>
<identifier, i>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, i>
<operator, <>
<identifier, NAME_LEN>
<punctuator, ;>
<identifier, i>
<operator, ++>
<operator, )>
<identifier, de>
<operator, ->>
<identifier, name>
<operator, [>
<identifier, i>
<operator, ]>
<operator, =>
<operator, (>
<identifier, i>
<operator, <>
<identifier, namelen>
<operator, )>
<operator, ?>
<identifier, get_fs_byte>
<operator, (>
<identifier, name>
<operator, +>
<identifier, i>
<operator, )>
<operator, :>
<integer_constant, 0>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<operator, *>
<identifier, res_dir>
<operator, =>
<identifier, de>
<punctuator, ;>
<keyword, return>
<identifier, bh>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ++>
<punctuator, ;>
<identifier, i>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, get_dir>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, )>
<punctuator, {>
<keyword, char>
<identifier, c>
<punctuator, ;>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, thisname>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<operator, ,>
<identifier, inr>
<operator, ,>
<identifier, idev>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, |>
<operator, |>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, root>
<operator, ->>
<identifier, i_count>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "No root inode">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, |>
<operator, |>
<operator, !>
<identifier, current>
<operator, ->>
<identifier, pwd>
<operator, ->>
<identifier, i_count>
<operator, )>
<identifier, panic>
<operator, (>
<string_literal, "No cwd inode">
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, c>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, pathname>
<operator, )>
<operator, )>
<operator, ==>
<character_constant, '/'>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, root>
<punctuator, ;>
<identifier, pathname>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<keyword, else>
<keyword, if>
<operator, (>
<identifier, c>
<operator, )>
<identifier, inode>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, pwd>
<punctuator, ;>
<keyword, else>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, ++>
<punctuator, ;>
<keyword, while>
<operator, (>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, thisname>
<operator, =>
<identifier, pathname>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, MAY_EXEC>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<keyword, for>
<operator, (>
<identifier, namelen>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<operator, (>
<identifier, c>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, pathname>
<operator, ++>
<operator, )>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, c>
<operator, !>
<operator, =>
<character_constant, '/'>
<operator, )>
<punctuator, ;>
<identifier, namelen>
<operator, ++>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, c>
<operator, )>
<keyword, return>
<identifier, inode>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, inode>
<operator, ,>
<identifier, thisname>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<identifier, inr>
<operator, =>
<identifier, de>
<operator, ->>
<identifier, inode>
<punctuator, ;>
<identifier, idev>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, idev>
<operator, ,>
<identifier, inr>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<punctuator, }>
<keyword, static>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir_namei>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, ,>
<keyword, int>
<operator, *>
<identifier, namelen>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<operator, *>
<identifier, name>
<operator, )>
<punctuator, {>
<keyword, char>
<identifier, c>
<punctuator, ;>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, get_dir>
<operator, (>
<identifier, pathname>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<identifier, basename>
<operator, =>
<identifier, pathname>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, c>
<operator, =>
<identifier, get_fs_byte>
<operator, (>
<identifier, pathname>
<operator, ++>
<operator, )>
<operator, )>
<keyword, if>
<operator, (>
<identifier, c>
<operator, ==>
<character_constant, '/'>
<operator, )>
<identifier, basename>
<operator, =>
<identifier, pathname>
<punctuator, ;>
<operator, *>
<identifier, namelen>
<operator, =>
<identifier, pathname>
<operator, ->
<identifier, basename>
<operator, ->
<integer_constant, 1>
<punctuator, ;>
<operator, *>
<identifier, name>
<operator, =>
<identifier, basename>
<punctuator, ;>
<keyword, return>
<identifier, dir>
<punctuator, ;>
<punctuator, }>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, namei>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, inr>
<operator, ,>
<identifier, dev>
<operator, ,>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, pathname>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<keyword, return>
<identifier, dir>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<identifier, NULL>
<punctuator, ;>
<punctuator, }>
<identifier, inr>
<operator, =>
<identifier, de>
<operator, ->>
<identifier, inode>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, dir>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, inr>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, {>
<identifier, dir>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, return>
<identifier, dir>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, open_namei>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, ,>
<keyword, int>
<identifier, flag>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, ,>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<operator, *>
<identifier, res_inode>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, inr>
<operator, ,>
<identifier, dev>
<operator, ,>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_TRUNC>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_ACCMODE>
<operator, )>
<operator, )>
<identifier, flag>
<operator, |>
<operator, =>
<identifier, O_WRONLY>
<punctuator, ;>
<identifier, mode>
<operator, &>
<operator, =>
<integer_constant, 0777>
<operator, &>
<operator, ~>
<identifier, current>
<operator, ->>
<identifier, umask>
<punctuator, ;>
<identifier, mode>
<operator, |>
<operator, =>
<identifier, I_REGULAR>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, pathname>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, flag>
<operator, &>
<operator, (>
<identifier, O_ACCMODE>
<operator, |>
<identifier, O_CREAT>
<operator, |>
<identifier, O_TRUNC>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<operator, *>
<identifier, res_inode>
<operator, =>
<identifier, dir>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EISDIR>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_CREAT>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, =>
<identifier, new_inode>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, euid>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, =>
<identifier, mode>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, add_entry>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, -->
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<operator, *>
<identifier, res_inode>
<operator, =>
<identifier, inode>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, inr>
<operator, =>
<identifier, de>
<operator, ->>
<identifier, inode>
<punctuator, ;>
<identifier, dev>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_EXCL>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EEXIST>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, dev>
<operator, ,>
<identifier, inr>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, (>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, &>
<operator, &>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_ACCMODE>
<operator, )>
<operator, )>
<operator, |>
<operator, |>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, ACC_MODE>
<operator, (>
<identifier, flag>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, flag>
<operator, &>
<identifier, O_TRUNC>
<operator, )>
<identifier, truncate>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<operator, *>
<identifier, res_inode>
<operator, =>
<identifier, inode>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_mknod>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, filename>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, ,>
<keyword, int>
<identifier, dev>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, filename>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EEXIST>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, =>
<identifier, new_inode>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, =>
<identifier, mode>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, S_ISBLK>
<operator, (>
<identifier, mode>
<operator, )>
<operator, |>
<operator, |>
<identifier, S_ISCHR>
<operator, (>
<identifier, mode>
<operator, )>
<operator, )>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, =>
<identifier, dev>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, add_entry>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_mkdir>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, pathname>
<operator, ,>
<keyword, int>
<identifier, mode>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<operator, ,>
<operator, *>
<identifier, dir_block>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, pathname>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EEXIST>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, =>
<identifier, new_inode>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, =>
<integer_constant, 32>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_atime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, =>
<identifier, new_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, -->
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir_block>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, free_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, -->
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ERROR>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, dir_block>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, strcpy>
<operator, (>
<identifier, de>
<operator, ->>
<identifier, name>
<operator, ,>
<string_literal, ".">
<operator, )>
<punctuator, ;>
<identifier, de>
<operator, ++>
<punctuator, ;>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, strcpy>
<operator, (>
<identifier, de>
<operator, ->>
<identifier, name>
<operator, ,>
<string_literal, "..">
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, dir_block>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, dir_block>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, =>
<identifier, I_DIRECTORY>
<operator, |>
<operator, (>
<identifier, mode>
<operator, &>
<integer_constant, 0777>
<operator, &>
<operator, ~>
<identifier, current>
<operator, ->>
<identifier, umask>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, bh>
<operator, =>
<identifier, add_entry>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, free_block>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_nlinks>
<operator, ++>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, static>
<keyword, int>
<identifier, empty_dir>
<operator, (>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, inode>
<operator, )>
<punctuator, {>
<keyword, int>
<identifier, nr>
<operator, ,>
<identifier, block>
<punctuator, ;>
<keyword, int>
<identifier, len>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<identifier, len>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_size>
<operator, />
<keyword, sizeof>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, len>
<operator, <>
<integer_constant, 2>
<operator, |>
<operator, |>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, |>
<operator, |>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_zone>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "warning - bad directory on dev %04x\n">
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, de>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, inode>
<operator, !>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, |>
<operator, |>
<operator, !>
<identifier, de>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, .>
<identifier, inode>
<operator, |>
<operator, |>
<identifier, strcmp>
<operator, (>
<string_literal, ".">
<operator, ,>
<identifier, de>
<operator, [>
<integer_constant, 0>
<operator, ]>
<operator, .>
<identifier, name>
<operator, )>
<operator, |>
<operator, |>
<identifier, strcmp>
<operator, (>
<string_literal, "..">
<operator, ,>
<identifier, de>
<operator, [>
<integer_constant, 1>
<operator, ]>
<operator, .>
<identifier, name>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "warning - bad directory on dev %04x\n">
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, nr>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<identifier, de>
<operator, +>
<operator, =>
<integer_constant, 2>
<punctuator, ;>
<keyword, while>
<operator, (>
<identifier, nr>
<operator, <>
<identifier, len>
<operator, )>
<punctuator, {>
<keyword, if>
<operator, (>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<identifier, de>
<operator, >>
<operator, =>
<operator, (>
<keyword, void>
<operator, *>
<operator, )>
<operator, (>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<operator, +>
<identifier, BLOCK_SIZE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, block>
<operator, =>
<identifier, bmap>
<operator, (>
<identifier, inode>
<operator, ,>
<identifier, nr>
<operator, />
<identifier, DIR_ENTRIES_PER_BLOCK>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, block>
<operator, )>
<punctuator, {>
<identifier, nr>
<operator, +>
<operator, =>
<identifier, DIR_ENTRIES_PER_BLOCK>
<punctuator, ;>
<keyword, continue>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, bh>
<operator, =>
<identifier, bread>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, block>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<identifier, de>
<operator, =>
<operator, (>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<operator, )>
<identifier, bh>
<operator, ->>
<identifier, b_data>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ++>
<punctuator, ;>
<identifier, nr>
<operator, ++>
<punctuator, ;>
<punctuator, }>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_rmdir>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, name>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, name>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_mode>
<operator, &>
<identifier, S_ISVTX>
<operator, )>
<operator, &>
<operator, &>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, &>
<operator, &>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, !>
<operator, =>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, !>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, |>
<operator, |>
<identifier, inode>
<operator, ->>
<identifier, i_count>
<operator, >>
<integer_constant, 1>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ==>
<identifier, dir>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOTDIR>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, empty_dir>
<operator, (>
<identifier, inode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOTEMPTY>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, !>
<operator, =>
<integer_constant, 2>
<operator, )>
<identifier, printk>
<operator, (>
<string_literal, "empty directory has nlink!=2 (%d)">
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<punctuator, ;>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_nlinks>
<operator, -->
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_mtime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, dir>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_unlink>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, name>
<operator, )>
<punctuator, {>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, dir>
<operator, ,>
<operator, *>
<identifier, inode>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, name>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<operator, )>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<operator, (>
<identifier, inode>
<operator, =>
<identifier, iget>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, )>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_mode>
<operator, &>
<identifier, S_ISVTX>
<operator, )>
<operator, &>
<operator, &>
<operator, !>
<identifier, suser>
<operator, (>
<operator, )>
<operator, &>
<operator, &>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, !>
<operator, =>
<identifier, inode>
<operator, ->>
<identifier, i_uid>
<operator, &>
<operator, &>
<identifier, current>
<operator, ->>
<identifier, euid>
<operator, !>
<operator, =>
<identifier, dir>
<operator, ->>
<identifier, i_uid>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, S_ISDIR>
<operator, (>
<identifier, inode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<punctuator, {>
<identifier, printk>
<operator, (>
<string_literal, "Deleting nonexistent file (%04x:%d), %d\n">
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_dev>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_num>
<operator, ,>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<integer_constant, 0>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_nlinks>
<operator, -->
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, inode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, inode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
<keyword, int>
<identifier, sys_link>
<operator, (>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, oldname>
<operator, ,>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, newname>
<operator, )>
<punctuator, {>
<keyword, struct>
<identifier, dir_entry>
<operator, *>
<identifier, de>
<punctuator, ;>
<keyword, struct>
<identifier, m_inode>
<operator, *>
<identifier, oldinode>
<operator, ,>
<operator, *>
<identifier, dir>
<punctuator, ;>
<keyword, struct>
<identifier, buffer_head>
<operator, *>
<identifier, bh>
<punctuator, ;>
<keyword, const>
<keyword, char>
<operator, *>
<identifier, basename>
<punctuator, ;>
<keyword, int>
<identifier, namelen>
<punctuator, ;>
<identifier, oldinode>
<operator, =>
<identifier, namei>
<operator, (>
<identifier, oldname>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, oldinode>
<operator, )>
<keyword, return>
<operator, ->
<identifier, ENOENT>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, S_ISDIR>
<operator, (>
<identifier, oldinode>
<operator, ->>
<identifier, i_mode>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<identifier, dir>
<operator, =>
<identifier, dir_namei>
<operator, (>
<identifier, newname>
<operator, ,>
<operator, &>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, basename>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, dir>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, namelen>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EPERM>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<identifier, dir>
<operator, ->>
<identifier, i_dev>
<operator, !>
<operator, =>
<identifier, oldinode>
<operator, ->>
<identifier, i_dev>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EXDEV>
<punctuator, ;>
<punctuator, }>
<keyword, if>
<operator, (>
<operator, !>
<identifier, permission>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, MAY_WRITE>
<operator, )>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EACCES>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, find_entry>
<operator, (>
<operator, &>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, EEXIST>
<punctuator, ;>
<punctuator, }>
<identifier, bh>
<operator, =>
<identifier, add_entry>
<operator, (>
<identifier, dir>
<operator, ,>
<identifier, basename>
<operator, ,>
<identifier, namelen>
<operator, ,>
<operator, &>
<identifier, de>
<operator, )>
<punctuator, ;>
<keyword, if>
<operator, (>
<operator, !>
<identifier, bh>
<operator, )>
<punctuator, {>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<operator, ->
<identifier, ENOSPC>
<punctuator, ;>
<punctuator, }>
<identifier, de>
<operator, ->>
<identifier, inode>
<operator, =>
<identifier, oldinode>
<operator, ->>
<identifier, i_num>
<punctuator, ;>
<identifier, bh>
<operator, ->>
<identifier, b_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, brelse>
<operator, (>
<identifier, bh>
<operator, )>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, dir>
<operator, )>
<punctuator, ;>
<identifier, oldinode>
<operator, ->>
<identifier, i_nlinks>
<operator, ++>
<punctuator, ;>
<identifier, oldinode>
<operator, ->>
<identifier, i_ctime>
<operator, =>
<identifier, CURRENT_TIME>
<punctuator, ;>
<identifier, oldinode>
<operator, ->>
<identifier, i_dirt>
<operator, =>
<integer_constant, 1>
<punctuator, ;>
<identifier, iput>
<operator, (>
<identifier, oldinode>
<operator, )>
<punctuator, ;>
<keyword, return>
<integer_constant, 0>
<punctuator, ;>
<punctuator, }>
